1)
You are a software testing assistant. Your task is to generate a set of unit tests for a Python class provided below.

The tests should:
- use the `unittest` framework,
- cover all public methods,
- test typical usage as well as edge cases, invalid inputs, and exceptions,
- be clear, atomic, and minimal.

You will now analyze the class to prepare relevant test cases.
Do not write test code yet.

Below is the interface+docstrings of the class:

```python
from typing import TypedDict, List


class Item(TypedDict):
    """
    Represents a single product entry in the order.

    :key name: The name of the product.
    :key price: The price per unit of the product.
    :key quantity: The number of units of the product.
    """

class OrderCalculator:
    def __init__(self, tax_rate=0.23, free_shipping_threshold=100.0, shipping_cost=10.0):
        """
        Initializes a new OrderCalculator instance.
        Initializes an empty list of items (each represented as a TypedDict 'Item')
        and stores the configured tax and shipping parameters.

        :param tax_rate: The percentage of tax applied to the final amount, expressed as a float between 0.0 and 1.0 (default is 0.23 for 23%).
        :param free_shipping_threshold: The minimum order value (after discount) that qualifies for free shipping (default is 100.0).
        :param shipping_cost: The cost of shipping applied if the order does not meet the free shipping threshold (default is 10.0).

        :raises ValueError:
            - If tax_rate is not in the range [0.0, 1.0].
            - If free_shipping_threshold is negative.
            - If shipping_cost is negative.
        :raises TypeError: If any parameter is of incorrect type.
        """

    def add_item(self, name: str, price: float, quantity: int = 1):
        """
        Add an item to the order.

        If an item with the same name and price already exists, its quantity is increased.

        :param name: the name of the item
        :param price: the price of the item
        :param quantity: the quantity of the item (default is 1)
        :raises ValueError: If name is empty, price <= 0, quantity < 1, or item with same name but different price exists.
        :raises TypeError: If inputs are of incorrect types.
        """

    def remove_item(self, name: str):
        """
        Removes an item from the order.

        :param name: The name of the item to remove.
        :raises ValueError: If no item with the given name exists in the order.
        :raises TypeError: If name is not a string.
        """

    def get_subtotal(self) -> float:
        """
        Calculates the subtotal (sum of item prices times their quantities) for all items in the order.

        :return: The subtotal as a float.
        :raises ValueError: If the order is empty.
        """

    def apply_discount(self, subtotal: float, discount: float) -> float:
        """
        Applies a percentage discount to the given subtotal.

        :param subtotal: the subtotal amount (must be >= 0)
        :param discount: the discount rate as a float between 0.0 and 1.0 (e.g. 0.2 = 20%).
        :return: The discounted subtotal.
        :raises ValueError: If subtotal < 0 or discount is outside the [0.0, 1.0] range.
        :raises TypeError: If inputs are of incorrect types.
        """

    def calculate_shipping(self, discounted_subtotal: float) -> float:
        """
        Calculates the shipping cost based on the discounted subtotal.

        If the discounted subtotal >= free shipping threshold shipping is free (0.0).
        Otherwise, the standard shipping cost is applied.

        :param discounted_subtotal: The subtotal amount after applying discount (must be >= 0.0).
        :return: The shipping cost as a float (0.0 or self.shipping_cost).
        :raises TypeError: If input is not a number.
        """

    def calculate_tax(self, amount: float) -> float:
        """
        Calculates the tax based on the provided amount using the configured tax rate.

        :param amount: The amount on which to calculate the tax (must be >= 0.0).
        :return: The tax as a float.
        :raises ValueError: If the amount is negative.
        :raises TypeError: If input is not a number.
        """

    def calculate_total(self, discount: float = 0.0) -> float:
        """
        Calculates the total cost of the order after applying discount, shipping, and tax.

        This method performs the following steps:
        1. Calculates the subtotal from all items.
        2. Applies the given discount.
        3. Adds shipping cost if necessary.
        4. Calculates tax on the discounted subtotal + shipping.

        :param discount: Discount rate between 0.0 and 1.0 (e.g. 0.2 = 20%).
        :return: The final total as a float.
        :raises ValueError:
            - If the subtotal is negative.
            - If the discount is invalid.
            - If the order is empty.
        :raises TypeError: If input is not a number.
        """

    def total_items(self) -> int:
        """
        Returns the total quantity of all items in the order.

        :return: The sum of the quantities of all items.
        :return:
        """

    def clear_order(self):
        """
        Removes all items from the order, resetting it to an empty state.
        """

    def list_items(self) -> List[str]:
        """
        Returns a list of all unique item names currently in the order.

        :return: A list of unique item names (no duplicates).
        """

	def is_empty(self) -> bool:
        """
        Checks whether the order is currently empty.

        :return: True if no items are in the order, False otherwise.
        """
```


2)
Based on the class above, list all relevant unit test scenarios you would create.
Each scenario should describe:
- the method being tested,
- the type of case (e.g. normal use, invalid input, exception),
- a short explanation of the intent.
List as many scenarios as you can think of, covering all aspects of the class.
Do not write test code yet.



3)
Now, based on the test scenarios you just listed, generate the complete Python unit test suite using the `unittest` framework.

Follow these rules:
- Include one test method per scenario.
- Use meaningful test method names.
- Do not include comments or explanations.
- Output a valid `.py` file containing only the test class.

The output must contain only Python code.