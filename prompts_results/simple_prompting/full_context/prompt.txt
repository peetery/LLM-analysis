Generate a complete Python unit test suite for the class `OrderCalculator`.

Instructions:
- Use the `unittest` framework.
- Include tests for all public methods of the class.
- Ensure proper coverage of:
  • typical use cases,
  • edge cases (corner cases),
  • incorrect input (invalid types or values),
  • exceptions.
- Each test should be clear, minimal and atomic (test one behavior at a time).
- Avoid comments or explanations — output only the test code.
- Return a single valid Python file with a class extending `unittest.TestCase`.

Below is the full class implementation:

```python
from typing import TypedDict, List


class Item(TypedDict):
    """
    Represents a single product entry in the order.

    :key name: The name of the product.
    :key price: The price per unit of the product.
    :key quantity: The number of units of the product.
    """
    name: str
    price: float
    quantity: int


class OrderCalculator:
    def __init__(self, tax_rate=0.23, free_shipping_threshold=100.0, shipping_cost=10.0):
        """
        Initializes a new OrderCalculator instance.
        Initializes an empty list of items (each represented as a TypedDict 'Item')
        and stores the configured tax and shipping parameters.

        :param tax_rate: The percentage of tax applied to the final amount, expressed as a float between 0.0 and 1.0 (default is 0.23 for 23%).
        :param free_shipping_threshold: The minimum order value (after discount) that qualifies for free shipping (default is 100.0).
        :param shipping_cost: The cost of shipping applied if the order does not meet the free shipping threshold (default is 10.0).

        :raises ValueError:
            - If tax_rate is not in the range [0.0, 1.0].
            - If free_shipping_threshold is negative.
            - If shipping_cost is negative.
        :raises TypeError: If any parameter is of incorrect type.
        """
        if not isinstance(tax_rate, (float, int)):
            raise TypeError("Tax rate must be a float or int.")
        if not isinstance(free_shipping_threshold, (float, int)):
            raise TypeError("Free shipping threshold must be a float or int.")
        if not isinstance(shipping_cost, (float, int)):
            raise TypeError("Shipping cost must be a float or int.")
        if not 0.0 <= tax_rate <= 1.0:
            raise ValueError("Tax rate must be between 0.0 and 1.0.")
        if free_shipping_threshold < 0.0:
            raise ValueError("Free shipping threshold cannot be negative.")
        if shipping_cost < 0.0:
            raise ValueError("Shipping cost cannot be negative.")

        self.items: List[Item] = []
        self.tax_rate = tax_rate
        self.free_shipping_threshold = free_shipping_threshold
        self.shipping_cost = shipping_cost

    def add_item(self, name: str, price: float, quantity: int = 1):
        """
        Add an item to the order.

        If an item with the same name and price already exists, its quantity is increased.

        :param name: the name of the item
        :param price: the price of the item
        :param quantity: the quantity of the item (default is 1)
        :raises ValueError: If name is empty, price <= 0, quantity < 1, or item with same name but different price exists.
        :raises TypeError: If inputs are of incorrect types.
        """
        if not isinstance(name, str):
            raise TypeError("Item name must be a string.")
        if not isinstance(price, (float, int)):
            raise TypeError("Price must be a number.")
        if not isinstance(quantity, int):
            raise TypeError("Quantity must be an integer.")
        if not name:
            raise ValueError("Item name cannot be empty.")
        if quantity < 1:
            raise ValueError("Quantity must be at least 1.")
        if price <= 0:
            raise ValueError("Price must be greater than 0.")

        for item in self.items:
            if item["name"] == name:
                if item["price"] != price:
                    raise ValueError("Item with the same name but different price already exists.")
                item["quantity"] += quantity
                return


        self.items.append({
            "name": name,
            "price": price,
            "quantity": quantity
        })

    def remove_item(self, name: str):
        """
        Removes an item from the order.

        :param name: The name of the item to remove.
        :raises ValueError: If no item with the given name exists in the order.
        :raises TypeError: If name is not a string.
        """
        if not isinstance(name, str):
            raise TypeError("Item name must be a string.")
        if not any(item["name"] == name for item in self.items):
            raise ValueError(f"Item with name '{name}' does not exist in the order.")

        self.items = [item for item in self.items if item["name"] != name]

    def get_subtotal(self) -> float:
        """
        Calculates the subtotal (sum of item prices times their quantities) for all items in the order.

        :return: The subtotal as a float.
        :raises ValueError: If the order is empty.
        """
        if not self.items:
            raise ValueError("Cannot calculate subtotal on empty order.")
        return sum(item["price"] * item["quantity"] for item in self.items)

    def apply_discount(self, subtotal: float, discount: float) -> float:
        """
        Applies a percentage discount to the given subtotal.

        :param subtotal: the subtotal amount (must be >= 0)
        :param discount: the discount rate as a float between 0.0 and 1.0 (e.g. 0.2 = 20%).
        :return: The discounted subtotal.
        :raises ValueError: If subtotal < 0 or discount is outside the [0.0, 1.0] range.
        :raises TypeError: If inputs are of incorrect types.
        """
        if not isinstance(subtotal, (float, int)):
            raise TypeError("Subtotal must be a number.")
        if not isinstance(discount, (float, int)):
            raise TypeError("Discount must be a number.")
        if not 0.0 <= discount <= 1.0:
            raise ValueError("Discount must be between 0.0 and 1.0.")
        if subtotal < 0.0:
            raise ValueError("Cannot apply discount on negative subtotal.")
        return subtotal * (1 - discount)

    def calculate_shipping(self, discounted_subtotal: float) -> float:
        """
        Calculates the shipping cost based on the discounted subtotal.

        If the discounted subtotal >= free shipping threshold shipping is free (0.0).
        Otherwise, the standard shipping cost is applied.

        :param discounted_subtotal: The subtotal amount after applying discount (must be >= 0.0).
        :return: The shipping cost as a float (0.0 or self.shipping_cost).
        :raises TypeError: If input is not a number.
        """
        if not isinstance(discounted_subtotal, (float, int)):
            raise TypeError("Discounted subtotal must be a number.")
        if discounted_subtotal >= self.free_shipping_threshold:
            return 0.0
        return self.shipping_cost

    def calculate_tax(self, amount: float) -> float:
        """
        Calculates the tax based on the provided amount using the configured tax rate.

        :param amount: The amount on which to calculate the tax (must be >= 0.0).
        :return: The tax as a float.
        :raises ValueError: If the amount is negative.
        :raises TypeError: If input is not a number.
        """
        if not isinstance(amount, (float, int)):
            raise TypeError("Amount must be a number.")
        if amount < 0.0:
            raise ValueError("Cannot calculate tax on negative amount.")
        return amount * self.tax_rate

    def calculate_total(self, discount: float = 0.0) -> float:
        """
        Calculates the total cost of the order after applying discount, shipping, and tax.

        This method performs the following steps:
        1. Calculates the subtotal from all items.
        2. Applies the given discount.
        3. Adds shipping cost if necessary.
        4. Calculates tax on the discounted subtotal + shipping.

        :param discount: Discount rate between 0.0 and 1.0 (e.g. 0.2 = 20%).
        :return: The final total as a float.
        :raises ValueError:
            - If the subtotal is negative.
            - If the discount is invalid.
            - If the order is empty.
        :raises TypeError: If input is not a number.
        """
        if not isinstance(discount, (float, int)):
            raise TypeError("Discount must be a number.")

        subtotal = self.get_subtotal()
        if subtotal < 0.0:
            raise ValueError("Cannot calculate total on negative subtotal.")
        discounted_subtotal = self.apply_discount(subtotal, discount)
        shipping_cost = self.calculate_shipping(discounted_subtotal)
        tax = self.calculate_tax(discounted_subtotal + shipping_cost)
        return discounted_subtotal + shipping_cost + tax

    def total_items(self) -> int:
        """
        Returns the total quantity of all items in the order.

        :return: The sum of the quantities of all items.
        :return:
        """
        return sum(item["quantity"] for item in self.items)

    def clear_order(self):
        """
        Removes all items from the order, resetting it to an empty state.
        """
        self.items = []

    def list_items(self) -> List[str]:
        """
        Returns a list of all unique item names currently in the order.

        :return: A list of unique item names (no duplicates).
        """
        return list(set(item["name"] for item in self.items))

    def is_empty(self) -> bool:
        """
        Checks whether the order is currently empty.

        :return: True if no items are in the order, False otherwise.
        """
        return len(self.items) == 0
```