[
  {
    "experiment": {
      "model": "gpt-o4-mini-high",
      "strategy": "chain_of_thought_prompting",
      "context_type": "interface",
      "timestamp": "2025-07-04T01:05:21.887790",
      "response_time": 112.75090193748474,
      "test_file": "prompts_results\\chain_of_thought_prompting\\interface\\gpt-o4-mini-high\\tests.py",
      "raw_results": {
        "responses": [
          {
            "step": 1,
            "prompt": "You are a software testing assistant. Your task is to generate a set of unit tests for a Python class provided below.\n\nThe tests should:\n- use the `unittest` framework,\n- cover all public methods,\n- test typical usage as well as edge cases, invalid inputs, and exceptions,\n- be clear, atomic, and minimal.\n\nYou will now analyze the class to prepare relevant test cases.\nDo not write test code yet. Do not write test scenarios yet. Just analyze the class and prepare for the next step.\n\nBelow is the class interface (without implementation):\n\n```python\nfrom typing import TypedDict, List\n\nclass Item(TypedDict)\n\nclass OrderCalculator:\n    def __init__(self, tax_rate=0.23, free_shipping_threshold=100.0, shipping_cost=10.0):\n\ndef add_item(self, name: str, price: float, quantity: int = 1):\n\ndef remove_item(self, name: str):\n\ndef get_subtotal(self) -> float:\n\ndef apply_discount(self, subtotal: float, discount: float) -> float:\n\ndef calculate_shipping(self, discounted_subtotal: float) -> float:\n\ndef calculate_tax(self, amount: float) -> float:\n\ndef calculate_total(self, discount: float = 0.0) -> float:\n\ndef total_items(self) -> int:\n\ndef clear_order(self):\n\ndef list_items(self) -> List[str]:\n\ndef is_empty(self) -> bool:\n\n```\n\n",
            "response": "Here\u2019s a breakdown of the public interface and the behaviors we\u2019ll want to cover when we write our tests:\nInitialization\nDefault parameters (tax_rate=0.23, free_shipping_threshold=100.0, shipping_cost=10.0)\nNon-default constructor arguments (e.g. zero or very large tax rates, negative shipping costs, etc.)\nInitial state: empty order (is_empty() should be True, total_items() should be 0, get_subtotal() should be 0.0, list_items() should be empty).\nadd_item(name: str, price: float, quantity: int = 1)\nTypical use: add a single item, add multiple quantities.\nAdding the same item twice should either increment its quantity or overwrite\u2014it must be defined and tested.\nEdge cases:\nprice=0.0\nvery large price, very large quantity\nInvalid inputs:\nnon-string name\nnegative or zero quantity\nnegative price\nnon-numeric types for price or quantity\nPost-conditions:\ntotal_items() reflects added quantity\nget_subtotal() includes price\u00d7quantity\nis_empty() becomes False\nlist_items() contains the new name\nremove_item(name: str)\nTypical: remove an existing item (quantity should go to zero or the item should disappear).\nBehavior if item was added multiple times: remove entirely or decrement? (Choose expected and test it.)\nEdge: removing the last item in an order (order becomes empty again).\nInvalid: removing a name that was never added should raise a defined exception (e.g. KeyError or custom).\nInvalid input types (non-string name).\nget_subtotal() \u2192 float\nOn empty order \u2192 0.0\nAfter one item, multiple items\nFloating-point precision (e.g. prices that have many decimals)\nItems added and then removed should update subtotal accordingly\napply_discount(subtotal: float, discount: float) \u2192 float\nTypical: percentage discount (e.g. discount=0.1 means 10% off) or absolute? (Behavior must be defined.)\nZero discount \u2192 returns subtotal unchanged\nFull discount (discount=1.0) \u2192 zero or negative?\nOver-100% discount (discount>1.0) \u2192 negative totals? Throw?\nNegative discount \u2192 increase total? Throw?\nInvalid types (non-float discount)\ncalculate_shipping(discounted_subtotal: float) \u2192 float\nBelow threshold \u2192 returns shipping_cost\nAt exactly threshold \u2192 free shipping or not? (Define and test.)\nAbove threshold \u2192 zero\nNegative discounted_subtotal \u2192 treat as zero or throw? (Define and test.)\nCustom thresholds via constructor\ncalculate_tax(amount: float) \u2192 float\nTax on zero \u2192 0.0\nTax on positive amounts: amount * tax_rate (floating precision)\nTax on negative amounts? (Define behavior.)\nCustom tax_rate via constructor\nInvalid input types\ncalculate_total(discount: float = 0.0) \u2192 float\nNo items, no discount \u2192 total 0.0\nWith items, no discount \u2192 subtotal + shipping + tax\nWith items, with discount \u2192 ensure discount applied before shipping threshold check and tax calculation\nEdge: discount makes subtotal drop below zero \u2192 does total go negative or floor at zero? (Define and test.)\nCombination of free-shipping threshold, custom rates, and shipping costs\nInvalid discount values\ntotal_items() \u2192 int\nEmpty order \u2192 0\nAfter adding/removing items \u2192 accurate count\nLarge quantities \u2192 ensure no overflow\nclear_order()\nAfter clear: is_empty() is True, total_items() is 0, get_subtotal() is 0.0, list_items() empty\nClearing an already empty order should be safe (no exception)\nlist_items() \u2192 List[str]\nReturns each distinct item name once\nOrder of names: deterministic? (Test expected order or sort it in tests.)\nAfter add/remove operations\nis_empty() \u2192 bool\nOn new instance \u2192 True\nAfter adds \u2192 False\nAfter removing all items / clearing \u2192 True\nStateful interactions / integration tests\nA full \u201ccheckout\u201d flow: add several items, apply a discount, compute shipping, tax, and total, then clear the order and verify reset.\nMix of operations: add, remove some, add more, apply discount, etc., to ensure internal consistency.\nException and error handling\nInvalid method arguments (type errors, value errors)\nRemoving non-existent items\nOver-discounting or negative inputs if methods are specified to guard against those\nThis gives us a matrix of methods vs. input categories (typical, edge, invalid) to ensure 100% coverage of public behavior, state transitions, and error paths. Let me know if you\u2019d like to adjust any of these assumptions (e.g. whether discounts are percentages vs. absolutes) before I write out the concrete test scenarios.",
            "response_time": 23.475574731826782
          },
          {
            "step": 2,
            "prompt": "Based on the class above, list all relevant unit test scenarios you would create.\nEach scenario should describe:\n- the method being tested,\n- the type of case (e.g. normal use, invalid input, exception),\n- a short explanation of the intent.\nList as many scenarios as you can think of, covering all aspects of the class.\nDo not write test code yet.\n\n",
            "response": "Here\u2019s a comprehensive list of unit-test scenarios, organized by method. Each scenario names the method under test, the kind of case, and what it\u2019s verifying.\n1. Initialization (__init__)\nCase: Normal use (defaults)\nIntent: Verify that with no args, tax_rate==0.23, free_shipping_threshold==100.0, shipping_cost==10.0, and internal state is empty.\nCase: Normal use (custom params)\nIntent: Construct with non-default tax_rate, free_shipping_threshold, shipping_cost and confirm they\u2019re set.\nCase: Edge (zero values)\nIntent: tax_rate=0, free_shipping_threshold=0, shipping_cost=0 \u2013 ensure no errors and behavior matches zero thresholds.\nCase: Invalid input (negative values)\nIntent: Passing negative tax_rate, free_shipping_threshold, or shipping_cost should raise ValueError (or appropriate).\n2. add_item(name, price, quantity)\nCase: Normal use (single item)\nIntent: Add \"apple\", 1.0 \u2192 subtotal 1.0, total_items 1, is_empty()==False, list_items()==[\"apple\"].\nCase: Normal use (multiple quantity)\nIntent: Add \"banana\", 2.0, quantity=5 \u2192 subtotal 10.0, total_items 5.\nCase: Idempotence (same item twice)\nIntent: Add \"orange\", 1.5, q=2 then again \"orange\", 1.5, q=3 \u2192 subtotal 7.5, total_items 5.\nCase: Edge (price=0)\nIntent: Add \"freebie\", 0.0 \u2192 subtotal doesn\u2019t change but item is listed.\nCase: Edge (very large price/quantity)\nIntent: Add with huge numbers to check no overflow and correct math.\nCase: Invalid (negative price)\nIntent: price < 0 \u2192 raises ValueError.\nCase: Invalid (zero or negative quantity)\nIntent: quantity <= 0 \u2192 raises ValueError.\nCase: Invalid (non-string name)\nIntent: name not str \u2192 raises TypeError.\nCase: Invalid (non-numeric price or quantity)\nIntent: Wrong types for price/quantity \u2192 raises TypeError.\n3. remove_item(name)\nCase: Normal use (existing item)\nIntent: Remove \"apple\" that was added \u2192 item gone, subtotal and total_items update.\nCase: Edge (remove last item)\nIntent: Remove only item \u2192 is_empty()==True, subtotal 0.\nCase: Idempotence (remove after removal)\nIntent: Remove \"apple\", then again \u2192 second call raises KeyError.\nCase: Invalid (non-string name)\nIntent: Passing non-str name \u2192 raises TypeError.\nCase: Invalid (remove never-added)\nIntent: Removing \"ghost\" \u2192 raises KeyError.\n4. get_subtotal()\nCase: Normal use (empty)\nIntent: On new order \u2192 returns 0.0.\nCase: Normal use (after adds)\nIntent: Sum of all (price \u00d7 quantity).\nCase: After removals\nIntent: Add items, remove some/all, then confirm updated subtotal.\nCase: Floating-point precision\nIntent: Add prices like 0.1 + 0.2 \u2192 check correct handling or acceptable epsilon.\n5. apply_discount(subtotal, discount)\nCase: Normal use (10% off)\nIntent: Given subtotal=100, discount=0.1 \u2192 returns 90.0.\nCase: Edge (0% discount)\nIntent: discount=0.0 \u2192 returns subtotal unchanged.\nCase: Edge (100% discount)\nIntent: discount=1.0 \u2192 returns 0.0.\nCase: Invalid (discount >1.0)\nIntent: discount=1.5 \u2192 raises ValueError.\nCase: Invalid (negative discount)\nIntent: discount=-0.1 \u2192 raises ValueError.\nCase: Invalid (non-numeric discount)\nIntent: Type mismatch \u2192 raises TypeError.\nCase: Zero subtotal\nIntent: subtotal=0, any valid discount \u2192 returns 0.0.\n6. calculate_shipping(discounted_subtotal)\nCase: Below threshold\nIntent: If discounted_subtotal < free_shipping_threshold \u2192 returns shipping_cost.\nCase: At threshold\nIntent: == free_shipping_threshold \u2192 define whether free or charged, and assert it.\nCase: Above threshold\nIntent: Returns 0.0.\nCase: Edge (threshold=0)\nIntent: With custom free_shipping_threshold=0 \u2192 always free.\nCase: Invalid (negative subtotal)\nIntent: Negative input \u2192 raises ValueError (or treated as zero\u2014test defined behavior).\nCase: Invalid (non-numeric input)\nIntent: Type mismatch \u2192 raises TypeError.\n7. calculate_tax(amount)\nCase: Normal use (positive amount)\nIntent: Returns amount \u00d7 tax_rate.\nCase: Edge (zero amount)\nIntent: Returns 0.0.\nCase: Edge (negative amount)\nIntent: Negative input \u2192 raises ValueError (or defined behavior).\nCase: Custom tax rate\nIntent: Construct with custom tax_rate and verify.\nCase: Invalid (non-numeric input)\nIntent: Raises TypeError.\n8. calculate_total(discount=0.0)\nCase: Empty order, no discount\nIntent: Returns 0.0.\nCase: No discount, items under free-shipping\nIntent: subtotal + shipping_cost + tax.\nCase: No discount, items over free-shipping\nIntent: subtotal + 0 + tax.\nCase: With discount\nIntent: Discount applies before shipping decision and tax; verify full formula.\nCase: Discount to zero\nIntent: Discount such that discounted_subtotal == 0 \u2192 shipping applies to zero if below threshold, then tax on zero.\nCase: Invalid discount values\nIntent: discount < 0 or >1 \u2192 raises ValueError.\nCase: Custom parameters combined\nIntent: Custom tax_rate, free_shipping_threshold, shipping_cost, plus discount \u2192 verify end-to-end.\n9. total_items()\nCase: Empty order\nIntent: Returns 0.\nCase: After adds\nIntent: Sum of all quantities.\nCase: After removals\nIntent: Reflects removal.\nCase: Large quantities\nIntent: No overflow, correct count for big ints.\n10. clear_order()\nCase: Normal use (non-empty)\nIntent: Resets to empty state: subtotal 0, total_items 0, is_empty()==True, list_items()==[].\nCase: Idempotence (already empty)\nIntent: No exception, remains empty.\n11. list_items()\nCase: Empty order\nIntent: Returns [].\nCase: After adds\nIntent: Returns each distinct name once.\nCase: After duplicate adds\nIntent: Name appears only once.\nCase: After removal\nIntent: Removed names no longer in list.\nCase: Order determinism\nIntent: If order is defined, verify consistent ordering (or test sorted output).\n12. is_empty()\nCase: On init\nIntent: Returns True.\nCase: After add\nIntent: Returns False.\nCase: After removing all items\nIntent: Returns True.\nCase: After clear\nIntent: Returns True.\n13. Integration / State-flow scenarios\nScenario: Full checkout workflow\nIntent: Add multiple items, apply discount, calculate total, then clear and verify reset.\nScenario: Mixed adds/removes before total\nIntent: Add A, B, remove A, add C, then calculate subtotal, shipping, tax, total.\nScenario: Exception recovery\nIntent: After catching an invalid-input error, ensure order state is unchanged.\nTogether, these cover normal operations, boundary conditions, invalid inputs/exceptions, and end-to-end behavior for every public method. Let me know if you\u2019d like to refine any assumptions before moving on to writing the actual test code!",
            "response_time": 29.619093894958496
          },
          {
            "step": 3,
            "prompt": "Now, based on the test scenarios you just listed, generate the complete Python unit test suite using the `unittest` framework.\n\nFollow these rules:\n- Include one test method per scenario.\n- Use meaningful test method names.\n- Do not include comments or explanations.\n- Output a valid `.py` file containing only the test class.\n\nThe output must contain only Python code.",
            "response": "python\nKopiuj\nEdytuj\nimport unittest\nfrom order_calculator import OrderCalculator\n\nclass TestOrderCalculator(unittest.TestCase):\n    def test_init_defaults(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.tax_rate, 0.23)\n        self.assertEqual(calc.free_shipping_threshold, 100.0)\n        self.assertEqual(calc.shipping_cost, 10.0)\n        self.assertTrue(calc.is_empty())\n        self.assertEqual(calc.total_items(), 0)\n        self.assertEqual(calc.get_subtotal(), 0.0)\n        self.assertEqual(calc.list_items(), [])\n\n    def test_init_custom_params(self):\n        calc = OrderCalculator(tax_rate=0.1, free_shipping_threshold=50.0, shipping_cost=5.0)\n        self.assertEqual(calc.tax_rate, 0.1)\n        self.assertEqual(calc.free_shipping_threshold, 50.0)\n        self.assertEqual(calc.shipping_cost, 5.0)\n\n    def test_init_zero_values(self):\n        calc = OrderCalculator(tax_rate=0.0, free_shipping_threshold=0.0, shipping_cost=0.0)\n        self.assertEqual(calc.tax_rate, 0.0)\n        self.assertEqual(calc.free_shipping_threshold, 0.0)\n        self.assertEqual(calc.shipping_cost, 0.0)\n\n    def test_init_negative_values_raises_value_error(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=-0.1)\n        with self.assertRaises(ValueError):\n            OrderCalculator(free_shipping_threshold=-1.0)\n        with self.assertRaises(ValueError):\n            OrderCalculator(shipping_cost=-5.0)\n\n    def test_add_single_item(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        self.assertEqual(calc.get_subtotal(), 1.0)\n        self.assertEqual(calc.total_items(), 1)\n        self.assertFalse(calc.is_empty())\n        self.assertEqual(calc.list_items(), [\"apple\"])\n\n    def test_add_multiple_quantity(self):\n        calc = OrderCalculator()\n        calc.add_item(\"banana\", 2.0, quantity=5)\n        self.assertEqual(calc.get_subtotal(), 10.0)\n        self.assertEqual(calc.total_items(), 5)\n\n    def test_add_same_item_twice_accumulates_quantity(self):\n        calc = OrderCalculator()\n        calc.add_item(\"orange\", 1.5, quantity=2)\n        calc.add_item(\"orange\", 1.5, quantity=3)\n        self.assertEqual(calc.get_subtotal(), 7.5)\n        self.assertEqual(calc.total_items(), 5)\n\n    def test_add_item_zero_price(self):\n        calc = OrderCalculator()\n        calc.add_item(\"freebie\", 0.0)\n        self.assertEqual(calc.get_subtotal(), 0.0)\n        self.assertIn(\"freebie\", calc.list_items())\n\n    def test_add_item_large_price_and_quantity(self):\n        calc = OrderCalculator()\n        calc.add_item(\"expensive\", 1e6, quantity=1000)\n        self.assertEqual(calc.get_subtotal(), 1e9)\n        self.assertEqual(calc.total_items(), 1000)\n\n    def test_add_item_negative_price_raises_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"bad\", -1.0)\n\n    def test_add_item_non_positive_quantity_raises_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"bad\", 1.0, quantity=0)\n        with self.assertRaises(ValueError):\n            calc.add_item(\"bad\", 1.0, quantity=-5)\n\n    def test_add_item_non_string_name_raises_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(123, 1.0)\n\n    def test_add_item_non_numeric_price_or_quantity_raises_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(\"item\", \"one\", 1)\n        with self.assertRaises(TypeError):\n            calc.add_item(\"item\", 1.0, \"two\")\n\n    def test_remove_existing_item(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.remove_item(\"apple\")\n        self.assertEqual(calc.get_subtotal(), 0.0)\n        self.assertEqual(calc.total_items(), 0)\n        self.assertNotIn(\"apple\", calc.list_items())\n\n    def test_remove_last_item_makes_order_empty(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.remove_item(\"apple\")\n        self.assertTrue(calc.is_empty())\n\n    def test_remove_item_twice_raises_key_error(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.remove_item(\"apple\")\n        with self.assertRaises(KeyError):\n            calc.remove_item(\"apple\")\n\n    def test_remove_non_string_name_raises_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.remove_item(123)\n\n    def test_remove_nonexistent_item_raises_key_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(KeyError):\n            calc.remove_item(\"ghost\")\n\n    def test_get_subtotal_empty_order(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.get_subtotal(), 0.0)\n\n    def test_get_subtotal_after_adds(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0, 2)\n        calc.add_item(\"b\", 2.5, 3)\n        self.assertEqual(calc.get_subtotal(), 1.0*2 + 2.5*3)\n\n    def test_get_subtotal_after_removals(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0, 2)\n        calc.remove_item(\"a\")\n        self.assertEqual(calc.get_subtotal(), 0.0)\n\n    def test_get_subtotal_floating_point_precision(self):\n        calc = OrderCalculator()\n        calc.add_item(\"x\", 0.1)\n        calc.add_item(\"y\", 0.2)\n        self.assertAlmostEqual(calc.get_subtotal(), 0.3, places=7)\n\n    def test_apply_discount_normal(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(100.0, 0.1), 90.0)\n\n    def test_apply_discount_zero_discount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(50.0, 0.0), 50.0)\n\n    def test_apply_discount_full_discount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(80.0, 1.0), 0.0)\n\n    def test_apply_discount_over_100_percent_raises_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(100.0, 1.5)\n\n    def test_apply_discount_negative_discount_raises_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(100.0, -0.1)\n\n    def test_apply_discount_non_numeric_discount_raises_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.apply_discount(100.0, \"0.1\")\n\n    def test_apply_discount_zero_subtotal(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(0.0, 0.5), 0.0)\n\n    def test_calculate_shipping_below_threshold(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_shipping(50.0), 10.0)\n\n    def test_calculate_shipping_at_threshold(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_shipping(100.0), 0.0)\n\n    def test_calculate_shipping_above_threshold(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_shipping(150.0), 0.0)\n\n    def test_calculate_shipping_threshold_zero_always_free(self):\n        calc = OrderCalculator(free_shipping_threshold=0.0)\n        self.assertEqual(calc.calculate_shipping(0.0), 0.0)\n        self.assertEqual(calc.calculate_shipping(10.0), 0.0)\n\n    def test_calculate_shipping_negative_subtotal_raises_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_shipping(-10.0)\n\n    def test_calculate_shipping_non_numeric_input_raises_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_shipping(\"free\")\n\n    def test_calculate_tax_normal(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_tax(100.0), 23.0)\n\n    def test_calculate_tax_zero_amount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_tax(0.0), 0.0)\n\n    def test_calculate_tax_negative_amount_raises_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_tax(-5.0)\n\n    def test_calculate_tax_custom_rate(self):\n        calc = OrderCalculator(tax_rate=0.1)\n        self.assertEqual(calc.calculate_tax(100.0), 10.0)\n\n    def test_calculate_tax_non_numeric_input_raises_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_tax(\"100\")\n\n    def test_calculate_total_empty_order_no_discount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_total(), 0.0)\n\n    def test_calculate_total_under_free_shipping_no_discount(self):\n        calc = OrderCalculator()\n        calc.add_item(\"item\", 50.0)\n        self.assertAlmostEqual(calc.calculate_total(), 73.8, places=7)\n\n    def test_calculate_total_over_free_shipping_no_discount(self):\n        calc = OrderCalculator()\n        calc.add_item(\"item\", 150.0)\n        self.assertAlmostEqual(calc.calculate_total(), 150.0*1.23, places=7)\n\n    def test_calculate_total_with_discount(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 50.0)\n        calc.add_item(\"b\", 60.0)\n        self.assertAlmostEqual(calc.calculate_total(0.1), 134.07, places=2)\n\n    def test_calculate_total_discount_to_zero(self):\n        calc = OrderCalculator()\n        calc.add_item(\"item\", 50.0)\n        self.assertAlmostEqual(calc.calculate_total(1.0), 12.3, places=7)\n\n    def test_calculate_total_invalid_discount_raises_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_total(-0.1)\n        with self.assertRaises(ValueError):\n            calc.calculate_total(1.5)\n\n    def test_calculate_total_custom_parameters_combined(self):\n        calc = OrderCalculator(tax_rate=0.2, free_shipping_threshold=50.0, shipping_cost=5.0)\n        calc.add_item(\"a\", 30.0)\n        self.assertAlmostEqual(calc.calculate_total(0.5), 24.0, places=7)\n\n    def test_total_items_empty_order(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.total_items(), 0)\n\n    def test_total_items_after_adds(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0, 3)\n        calc.add_item(\"b\", 2.0, 2)\n        self.assertEqual(calc.total_items(), 5)\n\n    def test_total_items_after_removals(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0, 3)\n        calc.remove_item(\"a\")\n        self.assertEqual(calc.total_items(), 0)\n\n    def test_total_items_large_quantities(self):\n        calc = OrderCalculator()\n        calc.add_item(\"big\", 1.0, 10**6)\n        self.assertEqual(calc.total_items(), 10**6)\n\n    def test_clear_order_resets_state(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n        self.assertEqual(calc.total_items(), 0)\n        self.assertEqual(calc.get_subtotal(), 0.0)\n        self.assertEqual(calc.list_items(), [])\n\n    def test_clear_order_on_empty_does_not_raise(self):\n        calc = OrderCalculator()\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n\n    def test_list_items_empty_order(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.list_items(), [])\n\n    def test_list_items_after_adds(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0)\n        calc.add_item(\"b\", 2.0)\n        self.assertEqual(calc.list_items(), [\"a\", \"b\"])\n\n    def test_list_items_duplicate_adds(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0)\n        calc.add_item(\"a\", 1.0)\n        self.assertEqual(calc.list_items(), [\"a\"])\n\n    def test_list_items_after_removal(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0)\n        calc.add_item(\"b\", 2.0)\n        calc.remove_item(\"a\")\n        self.assertEqual(calc.list_items(), [\"b\"])\n\n    def test_list_items_deterministic_order(self):\n        calc = OrderCalculator()\n        calc.add_item(\"b\", 1.0)\n        calc.add_item(\"a\", 1.0)\n        self.assertEqual(calc.list_items(), [\"b\", \"a\"])\n\n    def test_is_empty_on_init(self):\n        calc = OrderCalculator()\n        self.assertTrue(calc.is_empty())\n\n    def test_is_empty_after_add(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0)\n        self.assertFalse(calc.is_empty())\n\n    def test_is_empty_after_removing_all_items(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0)\n        calc.remove_item(\"a\")\n        self.assertTrue(calc.is_empty())\n\n    def test_is_empty_after_clear(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n\n    def test_full_checkout_workflow(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 50.0)\n        calc.add_item(\"banana\", 60.0)\n        total = calc.calculate_total(0.1)\n        self.assertAlmostEqual(total, 134.07, places=2)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n        self.assertEqual(calc.total_items(), 0)\n        self.assertEqual(calc.get_subtotal(), 0.0)\n        self.assertEqual(calc.list_items(), [])\n\n    def test_mixed_adds_removes_before_total(self):\n        calc = OrderCalculator()\n        calc.add_item(\"widget\", 10.0, 2)\n        calc.add_item(\"gadget\", 5.0)\n        calc.remove_item(\"widget\")\n        calc.add_item(\"doodad\", 20.0, 3)\n        total = calc.calculate_total()\n        self.assertAlmostEqual(total, 92.25, places=2)\n\n    def test_exception_recovery_state_unchanged(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"bad\", -1.0)\n        self.assertTrue(calc.is_empty())\n        self.assertEqual(calc.total_items(), 0)\n        self.assertEqual(calc.get_subtotal(), 0.0)",
            "response_time": 59.65623331069946
          }
        ],
        "final_response": "python\nKopiuj\nEdytuj\nimport unittest\nfrom order_calculator import OrderCalculator\n\nclass TestOrderCalculator(unittest.TestCase):\n    def test_init_defaults(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.tax_rate, 0.23)\n        self.assertEqual(calc.free_shipping_threshold, 100.0)\n        self.assertEqual(calc.shipping_cost, 10.0)\n        self.assertTrue(calc.is_empty())\n        self.assertEqual(calc.total_items(), 0)\n        self.assertEqual(calc.get_subtotal(), 0.0)\n        self.assertEqual(calc.list_items(), [])\n\n    def test_init_custom_params(self):\n        calc = OrderCalculator(tax_rate=0.1, free_shipping_threshold=50.0, shipping_cost=5.0)\n        self.assertEqual(calc.tax_rate, 0.1)\n        self.assertEqual(calc.free_shipping_threshold, 50.0)\n        self.assertEqual(calc.shipping_cost, 5.0)\n\n    def test_init_zero_values(self):\n        calc = OrderCalculator(tax_rate=0.0, free_shipping_threshold=0.0, shipping_cost=0.0)\n        self.assertEqual(calc.tax_rate, 0.0)\n        self.assertEqual(calc.free_shipping_threshold, 0.0)\n        self.assertEqual(calc.shipping_cost, 0.0)\n\n    def test_init_negative_values_raises_value_error(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=-0.1)\n        with self.assertRaises(ValueError):\n            OrderCalculator(free_shipping_threshold=-1.0)\n        with self.assertRaises(ValueError):\n            OrderCalculator(shipping_cost=-5.0)\n\n    def test_add_single_item(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        self.assertEqual(calc.get_subtotal(), 1.0)\n        self.assertEqual(calc.total_items(), 1)\n        self.assertFalse(calc.is_empty())\n        self.assertEqual(calc.list_items(), [\"apple\"])\n\n    def test_add_multiple_quantity(self):\n        calc = OrderCalculator()\n        calc.add_item(\"banana\", 2.0, quantity=5)\n        self.assertEqual(calc.get_subtotal(), 10.0)\n        self.assertEqual(calc.total_items(), 5)\n\n    def test_add_same_item_twice_accumulates_quantity(self):\n        calc = OrderCalculator()\n        calc.add_item(\"orange\", 1.5, quantity=2)\n        calc.add_item(\"orange\", 1.5, quantity=3)\n        self.assertEqual(calc.get_subtotal(), 7.5)\n        self.assertEqual(calc.total_items(), 5)\n\n    def test_add_item_zero_price(self):\n        calc = OrderCalculator()\n        calc.add_item(\"freebie\", 0.0)\n        self.assertEqual(calc.get_subtotal(), 0.0)\n        self.assertIn(\"freebie\", calc.list_items())\n\n    def test_add_item_large_price_and_quantity(self):\n        calc = OrderCalculator()\n        calc.add_item(\"expensive\", 1e6, quantity=1000)\n        self.assertEqual(calc.get_subtotal(), 1e9)\n        self.assertEqual(calc.total_items(), 1000)\n\n    def test_add_item_negative_price_raises_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"bad\", -1.0)\n\n    def test_add_item_non_positive_quantity_raises_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"bad\", 1.0, quantity=0)\n        with self.assertRaises(ValueError):\n            calc.add_item(\"bad\", 1.0, quantity=-5)\n\n    def test_add_item_non_string_name_raises_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(123, 1.0)\n\n    def test_add_item_non_numeric_price_or_quantity_raises_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(\"item\", \"one\", 1)\n        with self.assertRaises(TypeError):\n            calc.add_item(\"item\", 1.0, \"two\")\n\n    def test_remove_existing_item(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.remove_item(\"apple\")\n        self.assertEqual(calc.get_subtotal(), 0.0)\n        self.assertEqual(calc.total_items(), 0)\n        self.assertNotIn(\"apple\", calc.list_items())\n\n    def test_remove_last_item_makes_order_empty(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.remove_item(\"apple\")\n        self.assertTrue(calc.is_empty())\n\n    def test_remove_item_twice_raises_key_error(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.remove_item(\"apple\")\n        with self.assertRaises(KeyError):\n            calc.remove_item(\"apple\")\n\n    def test_remove_non_string_name_raises_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.remove_item(123)\n\n    def test_remove_nonexistent_item_raises_key_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(KeyError):\n            calc.remove_item(\"ghost\")\n\n    def test_get_subtotal_empty_order(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.get_subtotal(), 0.0)\n\n    def test_get_subtotal_after_adds(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0, 2)\n        calc.add_item(\"b\", 2.5, 3)\n        self.assertEqual(calc.get_subtotal(), 1.0*2 + 2.5*3)\n\n    def test_get_subtotal_after_removals(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0, 2)\n        calc.remove_item(\"a\")\n        self.assertEqual(calc.get_subtotal(), 0.0)\n\n    def test_get_subtotal_floating_point_precision(self):\n        calc = OrderCalculator()\n        calc.add_item(\"x\", 0.1)\n        calc.add_item(\"y\", 0.2)\n        self.assertAlmostEqual(calc.get_subtotal(), 0.3, places=7)\n\n    def test_apply_discount_normal(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(100.0, 0.1), 90.0)\n\n    def test_apply_discount_zero_discount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(50.0, 0.0), 50.0)\n\n    def test_apply_discount_full_discount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(80.0, 1.0), 0.0)\n\n    def test_apply_discount_over_100_percent_raises_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(100.0, 1.5)\n\n    def test_apply_discount_negative_discount_raises_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(100.0, -0.1)\n\n    def test_apply_discount_non_numeric_discount_raises_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.apply_discount(100.0, \"0.1\")\n\n    def test_apply_discount_zero_subtotal(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(0.0, 0.5), 0.0)\n\n    def test_calculate_shipping_below_threshold(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_shipping(50.0), 10.0)\n\n    def test_calculate_shipping_at_threshold(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_shipping(100.0), 0.0)\n\n    def test_calculate_shipping_above_threshold(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_shipping(150.0), 0.0)\n\n    def test_calculate_shipping_threshold_zero_always_free(self):\n        calc = OrderCalculator(free_shipping_threshold=0.0)\n        self.assertEqual(calc.calculate_shipping(0.0), 0.0)\n        self.assertEqual(calc.calculate_shipping(10.0), 0.0)\n\n    def test_calculate_shipping_negative_subtotal_raises_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_shipping(-10.0)\n\n    def test_calculate_shipping_non_numeric_input_raises_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_shipping(\"free\")\n\n    def test_calculate_tax_normal(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_tax(100.0), 23.0)\n\n    def test_calculate_tax_zero_amount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_tax(0.0), 0.0)\n\n    def test_calculate_tax_negative_amount_raises_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_tax(-5.0)\n\n    def test_calculate_tax_custom_rate(self):\n        calc = OrderCalculator(tax_rate=0.1)\n        self.assertEqual(calc.calculate_tax(100.0), 10.0)\n\n    def test_calculate_tax_non_numeric_input_raises_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_tax(\"100\")\n\n    def test_calculate_total_empty_order_no_discount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_total(), 0.0)\n\n    def test_calculate_total_under_free_shipping_no_discount(self):\n        calc = OrderCalculator()\n        calc.add_item(\"item\", 50.0)\n        self.assertAlmostEqual(calc.calculate_total(), 73.8, places=7)\n\n    def test_calculate_total_over_free_shipping_no_discount(self):\n        calc = OrderCalculator()\n        calc.add_item(\"item\", 150.0)\n        self.assertAlmostEqual(calc.calculate_total(), 150.0*1.23, places=7)\n\n    def test_calculate_total_with_discount(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 50.0)\n        calc.add_item(\"b\", 60.0)\n        self.assertAlmostEqual(calc.calculate_total(0.1), 134.07, places=2)\n\n    def test_calculate_total_discount_to_zero(self):\n        calc = OrderCalculator()\n        calc.add_item(\"item\", 50.0)\n        self.assertAlmostEqual(calc.calculate_total(1.0), 12.3, places=7)\n\n    def test_calculate_total_invalid_discount_raises_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_total(-0.1)\n        with self.assertRaises(ValueError):\n            calc.calculate_total(1.5)\n\n    def test_calculate_total_custom_parameters_combined(self):\n        calc = OrderCalculator(tax_rate=0.2, free_shipping_threshold=50.0, shipping_cost=5.0)\n        calc.add_item(\"a\", 30.0)\n        self.assertAlmostEqual(calc.calculate_total(0.5), 24.0, places=7)\n\n    def test_total_items_empty_order(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.total_items(), 0)\n\n    def test_total_items_after_adds(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0, 3)\n        calc.add_item(\"b\", 2.0, 2)\n        self.assertEqual(calc.total_items(), 5)\n\n    def test_total_items_after_removals(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0, 3)\n        calc.remove_item(\"a\")\n        self.assertEqual(calc.total_items(), 0)\n\n    def test_total_items_large_quantities(self):\n        calc = OrderCalculator()\n        calc.add_item(\"big\", 1.0, 10**6)\n        self.assertEqual(calc.total_items(), 10**6)\n\n    def test_clear_order_resets_state(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n        self.assertEqual(calc.total_items(), 0)\n        self.assertEqual(calc.get_subtotal(), 0.0)\n        self.assertEqual(calc.list_items(), [])\n\n    def test_clear_order_on_empty_does_not_raise(self):\n        calc = OrderCalculator()\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n\n    def test_list_items_empty_order(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.list_items(), [])\n\n    def test_list_items_after_adds(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0)\n        calc.add_item(\"b\", 2.0)\n        self.assertEqual(calc.list_items(), [\"a\", \"b\"])\n\n    def test_list_items_duplicate_adds(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0)\n        calc.add_item(\"a\", 1.0)\n        self.assertEqual(calc.list_items(), [\"a\"])\n\n    def test_list_items_after_removal(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0)\n        calc.add_item(\"b\", 2.0)\n        calc.remove_item(\"a\")\n        self.assertEqual(calc.list_items(), [\"b\"])\n\n    def test_list_items_deterministic_order(self):\n        calc = OrderCalculator()\n        calc.add_item(\"b\", 1.0)\n        calc.add_item(\"a\", 1.0)\n        self.assertEqual(calc.list_items(), [\"b\", \"a\"])\n\n    def test_is_empty_on_init(self):\n        calc = OrderCalculator()\n        self.assertTrue(calc.is_empty())\n\n    def test_is_empty_after_add(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0)\n        self.assertFalse(calc.is_empty())\n\n    def test_is_empty_after_removing_all_items(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0)\n        calc.remove_item(\"a\")\n        self.assertTrue(calc.is_empty())\n\n    def test_is_empty_after_clear(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n\n    def test_full_checkout_workflow(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 50.0)\n        calc.add_item(\"banana\", 60.0)\n        total = calc.calculate_total(0.1)\n        self.assertAlmostEqual(total, 134.07, places=2)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n        self.assertEqual(calc.total_items(), 0)\n        self.assertEqual(calc.get_subtotal(), 0.0)\n        self.assertEqual(calc.list_items(), [])\n\n    def test_mixed_adds_removes_before_total(self):\n        calc = OrderCalculator()\n        calc.add_item(\"widget\", 10.0, 2)\n        calc.add_item(\"gadget\", 5.0)\n        calc.remove_item(\"widget\")\n        calc.add_item(\"doodad\", 20.0, 3)\n        total = calc.calculate_total()\n        self.assertAlmostEqual(total, 92.25, places=2)\n\n    def test_exception_recovery_state_unchanged(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"bad\", -1.0)\n        self.assertTrue(calc.is_empty())\n        self.assertEqual(calc.total_items(), 0)\n        self.assertEqual(calc.get_subtotal(), 0.0)",
        "total_response_time": 112.75090193748474,
        "strategy": "chain_of_thought_prompting",
        "context_type": "interface"
      }
    },
    "analysis": {
      "compilation": {
        "compilation_success": true,
        "execution_success": false,
        "tests_run": 65,
        "tests_passed": 53,
        "tests_failed": 12,
        "test_errors": [],
        "compilation_errors": []
      },
      "coverage": null,
      "mutation": {
        "total_mutants": 0,
        "killed": 0,
        "survived": 0,
        "timeout": 0,
        "suspicious": 0,
        "skipped": 0,
        "mutation_score": 0.0
      },
      "scenarios": {
        "total_test_methods": 65,
        "covered_scenarios": {
          "init_scenarios": 5,
          "add_item_scenarios": 6,
          "remove_item_scenarios": 1,
          "get_subtotal_scenarios": 6,
          "apply_discount_scenarios": 12,
          "calculate_shipping_scenarios": 5,
          "calculate_tax_scenarios": 5,
          "calculate_total_scenarios": 1,
          "total_items_scenarios": 4,
          "list_items_scenarios": 5,
          "is_empty_scenarios": 3,
          "clear_order_scenarios": 2,
          "corner_cases": 33,
          "performance_tests": 2,
          "precision_tests": 1
        },
        "quality_metrics": {
          "has_setup_teardown": false,
          "uses_assertions": 100,
          "tests_with_multiple_assertions": 17,
          "uses_context_managers": 17,
          "has_edge_case_testing": false,
          "has_error_testing": 17,
          "average_test_length": 5.6923076923076925
        },
        "scenarios_file_found": true,
        "total_defined_scenarios": 54
      },
      "summary": {
        "model": "gpt-o4-mini-high",
        "strategy": "chain_of_thought_prompting",
        "context_type": "interface",
        "timestamp": "2025-07-04T01:05:21.887790",
        "response_time": 112.75090193748474,
        "compilation_success_rate": 100,
        "execution_success_rate": 0,
        "tests_generated": 65,
        "tests_passed": 53,
        "tests_failed": 12,
        "test_success_rate": 81.5,
        "mutation_score": 0.0,
        "mutants_killed": 0,
        "mutants_survived": 0,
        "total_mutants": 0,
        "total_test_methods": 65,
        "covered_scenarios_count": 91,
        "total_defined_scenarios": 54,
        "scenario_coverage_rate": 168.5,
        "total_assertions": 100,
        "tests_with_error_handling": 17,
        "average_test_length": 5.7
      }
    }
  },
  {
    "experiment": {
      "model": "gpt-o4-mini-high",
      "strategy": "chain_of_thought_prompting",
      "context_type": "interface_docstring",
      "timestamp": "2025-07-04T01:07:34.675911",
      "response_time": 85.25155329704285,
      "test_file": "prompts_results\\chain_of_thought_prompting\\interface_docstring\\gpt-o4-mini-high\\tests.py",
      "raw_results": {
        "responses": [
          {
            "step": 1,
            "prompt": "You are a software testing assistant. Your task is to generate a set of unit tests for a Python class provided below.\n\nThe tests should:\n- use the `unittest` framework,\n- cover all public methods,\n- test typical usage as well as edge cases, invalid inputs, and exceptions,\n- be clear, atomic, and minimal.\n\nYou will now analyze the class to prepare relevant test cases.\nDo not write test code yet.\n\nBelow is the interface+docstrings of the class:\n\n```python\nfrom typing import TypedDict, List\n\nclass Item(TypedDict):\n    \"\"\"\n    Represents a single product entry in the order.\n\n:key name: The name of the product.\n    :key price: The price per unit of the product.\n    :key quantity: The number of units of the product.\n    \"\"\"\n\nclass OrderCalculator:\n    def __init__(self, tax_rate=0.23, free_shipping_threshold=100.0, shipping_cost=10.0):\n        \"\"\"\n        Initializes a new OrderCalculator instance.\n        Initializes an empty list of items (each represented as a TypedDict 'Item')\n        and stores the configured tax and shipping parameters.\n\n:param tax_rate: The percentage of tax applied to the final amount, expressed as a float between 0.0 and 1.0 (default is 0.23 for 23%).\n        :param free_shipping_threshold: The minimum order value (after discount) that qualifies for free shipping (default is 100.0).\n        :param shipping_cost: The cost of shipping applied if the order does not meet the free shipping threshold (default is 10.0).\n\n:raises ValueError:\n            - If tax_rate is not in the range [0.0, 1.0].\n            - If free_shipping_threshold is negative.\n            - If shipping_cost is negative.\n        :raises TypeError: If any parameter is of incorrect type.\n        \"\"\"\n\ndef add_item(self, name: str, price: float, quantity: int = 1):\n        \"\"\"\n        Add an item to the order.\n\nIf an item with the same name and price already exists, its quantity is increased.\n\n:param name: the name of the item\n        :param price: the price of the item\n        :param quantity: the quantity of the item (default is 1)\n        :raises ValueError: If name is empty, price <= 0, quantity < 1, or item with same name but different price exists.\n        :raises TypeError: If inputs are of incorrect types.\n        \"\"\"\n\ndef remove_item(self, name: str):\n        \"\"\"\n        Removes an item from the order.\n\n:param name: The name of the item to remove.\n        :raises ValueError: If no item with the given name exists in the order.\n        :raises TypeError: If name is not a string.\n        \"\"\"\n\ndef get_subtotal(self) -> float:\n        \"\"\"\n        Calculates the subtotal (sum of item prices times their quantities) for all items in the order.\n\n:return: The subtotal as a float.\n        :raises ValueError: If the order is empty.\n        \"\"\"\n\ndef apply_discount(self, subtotal: float, discount: float) -> float:\n        \"\"\"\n        Applies a percentage discount to the given subtotal.\n\n:param subtotal: the subtotal amount (must be >= 0)\n        :param discount: the discount rate as a float between 0.0 and 1.0 (e.g. 0.2 = 20%).\n        :return: The discounted subtotal.\n        :raises ValueError: If subtotal < 0 or discount is outside the [0.0, 1.0] range.\n        :raises TypeError: If inputs are of incorrect types.\n        \"\"\"\n\ndef calculate_shipping(self, discounted_subtotal: float) -> float:\n        \"\"\"\n        Calculates the shipping cost based on the discounted subtotal.\n\nIf the discounted subtotal >= free shipping threshold shipping is free (0.0).\n        Otherwise, the standard shipping cost is applied.\n\n:param discounted_subtotal: The subtotal amount after applying discount (must be >= 0.0).\n        :return: The shipping cost as a float (0.0 or self.shipping_cost).\n        :raises TypeError: If input is not a number.\n        \"\"\"\n\ndef calculate_tax(self, amount: float) -> float:\n        \"\"\"\n        Calculates the tax based on the provided amount using the configured tax rate.\n\n:param amount: The amount on which to calculate the tax (must be >= 0.0).\n        :return: The tax as a float.\n        :raises ValueError: If the amount is negative.\n        :raises TypeError: If input is not a number.\n        \"\"\"\n\ndef calculate_total(self, discount: float = 0.0) -> float:\n        \"\"\"\n        Calculates the total cost of the order after applying discount, shipping, and tax.\n\nThis method performs the following steps:\n        1. Calculates the subtotal from all items.\n        2. Applies the given discount.\n        3. Adds shipping cost if necessary.\n        4. Calculates tax on the discounted subtotal + shipping.\n\n:param discount: Discount rate between 0.0 and 1.0 (e.g. 0.2 = 20%).\n        :return: The final total as a float.\n        :raises ValueError:\n            - If the subtotal is negative.\n            - If the discount is invalid.\n            - If the order is empty.\n        :raises TypeError: If input is not a number.\n        \"\"\"\n\ndef total_items(self) -> int:\n        \"\"\"\n        Returns the total quantity of all items in the order.\n\n:return: The sum of the quantities of all items.\n        :return:\n        \"\"\"\n\ndef clear_order(self):\n        \"\"\"\n        Removes all items from the order, resetting it to an empty state.\n        \"\"\"\n\ndef list_items(self) -> List[str]:\n        \"\"\"\n        Returns a list of all unique item names currently in the order.\n\n:return: A list of unique item names (no duplicates).\n        \"\"\"\n\ndef is_empty(self) -> bool:\n        \"\"\"\n        Checks whether the order is currently empty.\n\n:return: True if no items are in the order, False otherwise.\n        \"\"\"\n```",
            "response": "Here\u2019s a comprehensive plan of unit-test scenarios for every public method in OrderCalculator. Each test is atomic (one assertion or logical group), covers both \u201chappy path\u201d and error/edge cases, and will map directly to a unittest.TestCase method.\n1. __init__(\u2026)\nValid default parameters\nAfter calc = OrderCalculator():\ncalc.is_empty() is True\ncalc.list_items() == []\ncalc.total_items() == 0\nCustom valid parameters\ntax_rate=0.1, free_shipping_threshold=50.0, shipping_cost=5.0 produces an instance with those attributes.\nInvalid tax_rate\ntax_rate < 0 and tax_rate > 1.0 \u21d2 ValueError\ntax_rate not a number \u21d2 TypeError\nInvalid free_shipping_threshold\nNegative \u21d2 ValueError\nNon-number \u21d2 TypeError\nInvalid shipping_cost\nNegative \u21d2 ValueError\nNon-number \u21d2 TypeError\n2. add_item(name, price, quantity=1)\nHappy paths\nSingle item, default quantity\nadd_item(\"A\", 10.0) \u21d2 one item in order, subtotal 10.0, total_items() == 1.\nMultiple quantity\nadd_item(\"B\", 5.0, quantity=3) \u21d2 subtotal 15.0, total_items() == 3.\nIdempotent add: same name+price\nAdd \"C\", 2.5, 2 then add \"C\", 2.5, 3 \u21d2 one entry \"C\" with quantity 5.\nDifferent names\nAdd \"X\" and \"Y\" separately \u21d2 list_items() contains both, total_items() sums both quantities.\nError cases\nEmpty name \u21d2 ValueError\nPrice \u2264 0 \u21d2 ValueError\nQuantity < 1 \u21d2 ValueError\nSame name, different price \u21d2 ValueError\nWrong types\nname not str \u21d2 TypeError\nprice not int/float \u21d2 TypeError\nquantity not int \u21d2 TypeError\n3. remove_item(name)\nHappy path\nAfter adding \"A\", remove \"A\" \u21d2 order empty again, is_empty() True.\nNon-existent name \u21d2 ValueError\nWrong type for name \u21d2 TypeError\n4. get_subtotal() \u2192 float\nMultiple items\nE.g. items [(\"A\", 10\u00d72), (\"B\", 5\u00d73)] \u21d2 subtotal 20 + 15 = 35.0.\nEmpty order \u21d2 ValueError\n5. apply_discount(subtotal, discount) \u2192 float\nNo discount (discount=0) \u21d2 unchanged\nFull discount (discount=1.0) \u21d2 zero\nTypical (subtotal=100.0, discount=0.25) \u21d2 75.0\nInvalid subtotal < 0 \u21d2 ValueError\nDiscount < 0 or > 1 \u21d2 ValueError\nWrong types for either \u21d2 TypeError\n6. calculate_shipping(discounted_subtotal) \u2192 float\nBelow threshold (< free_shipping_threshold) \u21d2 returns shipping_cost\nExactly at threshold \u21d2 returns 0.0\nAbove threshold \u21d2 0.0\nWrong type (non-number) \u21d2 TypeError\n(Note: negative subtotal behavior unspecified; we\u2019ll only test for type errors.)\n7. calculate_tax(amount) \u2192 float\nPositive amount (100.0) \u21d2 tax_rate \u00d7 100.0 (e.g. 23.0)\nZero amount \u21d2 0.0\nNegative amount \u21d2 ValueError\nWrong type \u21d2 TypeError\n8. calculate_total(discount=0.0) \u2192 float\nNo discount, free shipping\nE.g. items sum to \u2265 threshold \u21d2 total = subtotal + tax(subtotal).\nWith discount, incurs shipping\nE.g. subtotal=100, discount=0.1 \u21d2 discounted=90 (<100), shipping=10, taxable=100, total=90+10+tax(100).\nEmpty order \u21d2 ValueError\nDiscount < 0 or > 1 \u21d2 ValueError\nWrong type for discount \u21d2 TypeError\n9. total_items() \u2192 int\nAfter multiple adds \u21d2 correct sum\nEmpty order \u21d2 0\n10. clear_order()\nAfter adds: clear \u21d2 is_empty() becomes True, list_items() empty, get_subtotal() raises.\n11. list_items() \u2192 List[str]\nMultiple distinct items \u21d2 returns all names\nDuplicates by repeated add \u21d2 no duplicates in list\nEmpty order \u21d2 []\n12. is_empty() \u2192 bool\nFresh instance \u21d2 True\nAfter add_item \u21d2 False\nAfter clear_order \u21d2 True\nThese scenarios guarantee 100% branch and error\u2010condition coverage of every public method. Once you\u2019re ready, we can translate each of these into concise unittest methods.",
            "response_time": 29.62377953529358
          },
          {
            "step": 2,
            "prompt": "Based on the class above, list all relevant unit test scenarios you would create.\nEach scenario should describe:\n- the method being tested,\n- the type of case (e.g. normal use, invalid input, exception),\n- a short explanation of the intent.\nList as many scenarios as you can think of, covering all aspects of the class.\nDo not write test code yet.\n\n",
            "response": "Here is a comprehensive list of unit\u2010test scenarios, organized by method. Each scenario gives the method under test, the case type, and a brief intent statement.\n__init__\nNormal / default parameters\nVerify that a fresh OrderCalculator() has no items, zero total items, and empty item list.\nNormal / custom parameters\nInitialize with tax_rate=0.1, free_shipping_threshold=50.0, shipping_cost=5.0 and check those attributes.\nException / invalid tax_rate (too low)\nPass tax_rate=-0.01 \u2192 expect ValueError.\nException / invalid tax_rate (too high)\nPass tax_rate=1.5 \u2192 expect ValueError.\nException / tax_rate wrong type\nPass tax_rate=\"0.2\" \u2192 expect TypeError.\nException / negative free_shipping_threshold\nPass free_shipping_threshold=-10 \u2192 expect ValueError.\nException / free_shipping_threshold wrong type\nPass free_shipping_threshold=\"100\" \u2192 expect TypeError.\nException / negative shipping_cost\nPass shipping_cost=-5 \u2192 expect ValueError.\nException / shipping_cost wrong type\nPass shipping_cost=[10] \u2192 expect TypeError.\nadd_item(name, price, quantity=1)\nNormal / single add\nAdd (\"Widget\", 10.0) \u2192 check subtotal, total_items, list_items.\nNormal / quantity >1\nAdd (\"Gadget\", 5.0, 3) \u2192 expect quantity 3 reflected in subtotal and total_items.\nNormal / repeated add same name+price\nAdd (\"X\", 2.0, 2) then (\"X\", 2.0, 4) \u2192 expect a single entry with quantity 6.\nNormal / multiple distinct items\nAdd \"A\" and \"B\" \u2192 list_items contains both, subtotal sums both.\nException / empty name\nname=\"\" \u2192 expect ValueError.\nException / price \u2264 0\nprice=0 or negative \u2192 expect ValueError.\nException / quantity < 1\nquantity=0 \u2192 expect ValueError.\nException / mismatched price for existing name\nAdd (\"Item\", 1.0) then (\"Item\", 2.0) \u2192 expect ValueError.\nException / name wrong type\nname=123 \u2192 expect TypeError.\nException / price wrong type\nprice=\"10\" \u2192 expect TypeError.\nException / quantity wrong type\nquantity=2.5 or \"2\" \u2192 expect TypeError.\nremove_item(name)\nNormal / remove existing\nAfter adding \"A\", remove it \u2192 order becomes empty.\nException / remove non-existent\nRemove \"NoSuch\" \u2192 expect ValueError.\nException / name wrong type\nname= None \u2192 expect TypeError.\nget_subtotal()\nNormal / multiple items\nAdd items summing to known amount \u2192 subtotal matches.\nException / empty order\nOn fresh calculator \u2192 expect ValueError.\napply_discount(subtotal, discount)\nNormal / zero discount\ndiscount=0.0 \u2192 return equal to subtotal.\nNormal / full discount\ndiscount=1.0 \u2192 return 0.0.\nNormal / partial discount\nE.g. (100.0, 0.25) \u2192 return 75.0.\nException / negative subtotal\nsubtotal=-5 \u2192 expect ValueError.\nException / discount < 0\ndiscount=-0.1 \u2192 expect ValueError.\nException / discount > 1\ndiscount=1.2 \u2192 expect ValueError.\nException / subtotal wrong type\nsubtotal=\"50\" \u2192 expect TypeError.\nException / discount wrong type\ndiscount=None \u2192 expect TypeError.\ncalculate_shipping(discounted_subtotal)\nNormal / below threshold\ndiscounted_subtotal < free_shipping_threshold \u2192 return shipping_cost.\nNormal / exactly at threshold\ndiscounted_subtotal == free_shipping_threshold \u2192 return 0.0.\nNormal / above threshold\ndiscounted_subtotal > free_shipping_threshold \u2192 return 0.0.\nException / wrong type\ndiscounted_subtotal=\"100\" \u2192 expect TypeError.\ncalculate_tax(amount)\nNormal / positive amount\namount=100.0 \u2192 return tax_rate * 100.0.\nNormal / zero amount\namount=0.0 \u2192 return 0.0.\nException / negative amount\namount=-1 \u2192 expect ValueError.\nException / wrong type\namount=[50] \u2192 expect TypeError.\ncalculate_total(discount=0.0)\nNormal / no discount, free shipping\nOrder subtotal \u2265 threshold, discount=0 \u2192 total = subtotal + tax(subtotal).\nNormal / discount, shipping applies\nSubtotal=100, discount=0.1 \u2192 discounted=90 (< threshold), shipping added, tax on (90+shipping).\nException / empty order\nFresh calculator without items \u2192 expect ValueError.\nException / discount < 0\ndiscount=-0.1 \u2192 expect ValueError.\nException / discount > 1\ndiscount=1.5 \u2192 expect ValueError.\nException / discount wrong type\ndiscount=\"0.2\" \u2192 expect TypeError.\ntotal_items()\nNormal / after adds\nSum of quantities matches expected.\nNormal / empty\nOn fresh calculator \u2192 return 0.\nclear_order()\nNormal / clear after adds\nAdd items, call clear_order(), then is_empty() True, list_items() empty, get_subtotal() raises.\nlist_items()\nNormal / distinct items\nReturns names of all unique items added.\nNormal / repeated adds deduped\nRe-adding same name+price doesn\u2019t duplicate in list.\nNormal / empty\nReturns [] when no items added.\nis_empty()\nNormal / fresh\nReturns True on new calculator.\nNormal / after add\nReturns False once an item is added.\nNormal / after clear\nReturns True after clear_order().\nThat set of ~60 atomic scenarios will ensure every branch, edge condition, and exception path is tested for full coverage.",
            "response_time": 23.65751600265503
          },
          {
            "step": 3,
            "prompt": "Now, based on the test scenarios you just listed, generate the complete Python unit test suite using the `unittest` framework.\n\nFollow these rules:\n- Include one test method per scenario.\n- Use meaningful test method names.\n- Do not include comments or explanations.\n- Output a valid `.py` file containing only the test class.\n\nThe output must contain only Python code.",
            "response": "python\nKopiuj\nEdytuj\nimport unittest\nfrom order_calculator import OrderCalculator\n\nclass TestOrderCalculator(unittest.TestCase):\n    def test_init_default_parameters(self):\n        calc = OrderCalculator()\n        self.assertTrue(calc.is_empty())\n        self.assertEqual(calc.total_items(), 0)\n        self.assertEqual(calc.list_items(), [])\n\n    def test_init_custom_parameters(self):\n        calc = OrderCalculator(tax_rate=0.1, free_shipping_threshold=50.0, shipping_cost=5.0)\n        self.assertEqual(calc.tax_rate, 0.1)\n        self.assertEqual(calc.free_shipping_threshold, 50.0)\n        self.assertEqual(calc.shipping_cost, 5.0)\n\n    def test_init_invalid_tax_rate_too_low(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=-0.01)\n\n    def test_init_invalid_tax_rate_too_high(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=1.5)\n\n    def test_init_tax_rate_wrong_type(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(tax_rate=\"0.2\")\n\n    def test_init_negative_free_shipping_threshold(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(free_shipping_threshold=-10)\n\n    def test_init_free_shipping_threshold_wrong_type(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(free_shipping_threshold=\"100\")\n\n    def test_init_negative_shipping_cost(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(shipping_cost=-5)\n\n    def test_init_shipping_cost_wrong_type(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(shipping_cost=[10])\n\n    def test_add_item_single_default_quantity(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Widget\", 10.0)\n        self.assertEqual(calc.get_subtotal(), 10.0)\n        self.assertEqual(calc.total_items(), 1)\n        self.assertEqual(calc.list_items(), [\"Widget\"])\n\n    def test_add_item_quantity_greater_than_one(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Gadget\", 5.0, 3)\n        self.assertEqual(calc.get_subtotal(), 15.0)\n        self.assertEqual(calc.total_items(), 3)\n\n    def test_add_item_repeated_same_name_price(self):\n        calc = OrderCalculator()\n        calc.add_item(\"X\", 2.0, 2)\n        calc.add_item(\"X\", 2.0, 4)\n        self.assertEqual(calc.get_subtotal(), 12.0)\n        self.assertEqual(calc.total_items(), 6)\n        self.assertEqual(calc.list_items(), [\"X\"])\n\n    def test_add_multiple_distinct_items(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 1.0, 2)\n        calc.add_item(\"B\", 2.0, 3)\n        self.assertEqual(calc.get_subtotal(), 8.0)\n        self.assertCountEqual(calc.list_items(), [\"A\", \"B\"])\n        self.assertEqual(calc.total_items(), 5)\n\n    def test_add_item_empty_name(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"\", 10.0)\n\n    def test_add_item_price_non_positive(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"Item\", 0)\n\n    def test_add_item_quantity_less_than_one(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"Item\", 1.0, 0)\n\n    def test_add_item_same_name_different_price(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Item\", 1.0)\n        with self.assertRaises(ValueError):\n            calc.add_item(\"Item\", 2.0)\n\n    def test_add_item_name_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(123, 10.0)\n\n    def test_add_item_price_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(\"Item\", \"10\")\n\n    def test_add_item_quantity_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(\"Item\", 1.0, 2.5)\n\n    def test_remove_item_existing(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 1.0)\n        calc.remove_item(\"A\")\n        self.assertTrue(calc.is_empty())\n\n    def test_remove_item_nonexistent(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.remove_item(\"NoSuch\")\n\n    def test_remove_item_name_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.remove_item(None)\n\n    def test_get_subtotal_multiple_items(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 2.0, 2)\n        calc.add_item(\"B\", 3.0, 3)\n        self.assertEqual(calc.get_subtotal(), 13.0)\n\n    def test_get_subtotal_empty_order(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.get_subtotal()\n\n    def test_apply_discount_zero(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(100.0, 0.0), 100.0)\n\n    def test_apply_discount_full(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(100.0, 1.0), 0.0)\n\n    def test_apply_discount_partial(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(100.0, 0.25), 75.0)\n\n    def test_apply_discount_negative_subtotal(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(-5.0, 0.1)\n\n    def test_apply_discount_discount_less_than_zero(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(100.0, -0.1)\n\n    def test_apply_discount_discount_greater_than_one(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(100.0, 1.2)\n\n    def test_apply_discount_subtotal_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.apply_discount(\"50\", 0.1)\n\n    def test_apply_discount_discount_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.apply_discount(50.0, None)\n\n    def test_calculate_shipping_below_threshold(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_shipping(50.0), calc.shipping_cost)\n\n    def test_calculate_shipping_at_threshold(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_shipping(calc.free_shipping_threshold), 0.0)\n\n    def test_calculate_shipping_above_threshold(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_shipping(200.0), 0.0)\n\n    def test_calculate_shipping_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_shipping(\"100\")\n\n    def test_calculate_tax_positive_amount(self):\n        calc = OrderCalculator()\n        self.assertAlmostEqual(calc.calculate_tax(100.0), 23.0)\n\n    def test_calculate_tax_zero_amount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_tax(0.0), 0.0)\n\n    def test_calculate_tax_negative_amount(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_tax(-1.0)\n\n    def test_calculate_tax_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_tax([50])\n\n    def test_calculate_total_no_discount_free_shipping(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 50.0, 2)\n        self.assertAlmostEqual(calc.calculate_total(), 123.0)\n\n    def test_calculate_total_with_discount_shipping_applies(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 50.0, 2)\n        self.assertAlmostEqual(calc.calculate_total(0.1), 123.0)\n\n    def test_calculate_total_empty_order(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_total()\n\n    def test_calculate_total_discount_less_than_zero(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 10.0)\n        with self.assertRaises(ValueError):\n            calc.calculate_total(-0.1)\n\n    def test_calculate_total_discount_greater_than_one(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 10.0)\n        with self.assertRaises(ValueError):\n            calc.calculate_total(1.5)\n\n    def test_calculate_total_discount_wrong_type(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 10.0)\n        with self.assertRaises(TypeError):\n            calc.calculate_total(\"0.2\")\n\n    def test_total_items_after_adds(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 1.0, 2)\n        calc.add_item(\"B\", 2.0, 3)\n        self.assertEqual(calc.total_items(), 5)\n\n    def test_total_items_empty(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.total_items(), 0)\n\n    def test_clear_order(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 1.0)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n        self.assertEqual(calc.list_items(), [])\n        with self.assertRaises(ValueError):\n            calc.get_subtotal()\n\n    def test_list_items_distinct(self):\n        calc = OrderCalculator()\n        calc.add_item(\"X\", 1.0)\n        calc.add_item(\"Y\", 2.0)\n        self.assertCountEqual(calc.list_items(), [\"X\", \"Y\"])\n\n    def test_list_items_repeated_adds_deduped(self):\n        calc = OrderCalculator()\n        calc.add_item(\"X\", 1.0)\n        calc.add_item(\"X\", 1.0)\n        self.assertEqual(calc.list_items(), [\"X\"])\n\n    def test_list_items_empty(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.list_items(), [])\n\n    def test_is_empty_fresh(self):\n        calc = OrderCalculator()\n        self.assertTrue(calc.is_empty())\n\n    def test_is_empty_after_add(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 1.0)\n        self.assertFalse(calc.is_empty())\n\n    def test_is_empty_after_clear(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 1.0)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n\nif __name__ == \"__main__\":\n    unittest.main()",
            "response_time": 31.97025775909424
          }
        ],
        "final_response": "python\nKopiuj\nEdytuj\nimport unittest\nfrom order_calculator import OrderCalculator\n\nclass TestOrderCalculator(unittest.TestCase):\n    def test_init_default_parameters(self):\n        calc = OrderCalculator()\n        self.assertTrue(calc.is_empty())\n        self.assertEqual(calc.total_items(), 0)\n        self.assertEqual(calc.list_items(), [])\n\n    def test_init_custom_parameters(self):\n        calc = OrderCalculator(tax_rate=0.1, free_shipping_threshold=50.0, shipping_cost=5.0)\n        self.assertEqual(calc.tax_rate, 0.1)\n        self.assertEqual(calc.free_shipping_threshold, 50.0)\n        self.assertEqual(calc.shipping_cost, 5.0)\n\n    def test_init_invalid_tax_rate_too_low(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=-0.01)\n\n    def test_init_invalid_tax_rate_too_high(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=1.5)\n\n    def test_init_tax_rate_wrong_type(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(tax_rate=\"0.2\")\n\n    def test_init_negative_free_shipping_threshold(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(free_shipping_threshold=-10)\n\n    def test_init_free_shipping_threshold_wrong_type(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(free_shipping_threshold=\"100\")\n\n    def test_init_negative_shipping_cost(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(shipping_cost=-5)\n\n    def test_init_shipping_cost_wrong_type(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(shipping_cost=[10])\n\n    def test_add_item_single_default_quantity(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Widget\", 10.0)\n        self.assertEqual(calc.get_subtotal(), 10.0)\n        self.assertEqual(calc.total_items(), 1)\n        self.assertEqual(calc.list_items(), [\"Widget\"])\n\n    def test_add_item_quantity_greater_than_one(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Gadget\", 5.0, 3)\n        self.assertEqual(calc.get_subtotal(), 15.0)\n        self.assertEqual(calc.total_items(), 3)\n\n    def test_add_item_repeated_same_name_price(self):\n        calc = OrderCalculator()\n        calc.add_item(\"X\", 2.0, 2)\n        calc.add_item(\"X\", 2.0, 4)\n        self.assertEqual(calc.get_subtotal(), 12.0)\n        self.assertEqual(calc.total_items(), 6)\n        self.assertEqual(calc.list_items(), [\"X\"])\n\n    def test_add_multiple_distinct_items(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 1.0, 2)\n        calc.add_item(\"B\", 2.0, 3)\n        self.assertEqual(calc.get_subtotal(), 8.0)\n        self.assertCountEqual(calc.list_items(), [\"A\", \"B\"])\n        self.assertEqual(calc.total_items(), 5)\n\n    def test_add_item_empty_name(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"\", 10.0)\n\n    def test_add_item_price_non_positive(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"Item\", 0)\n\n    def test_add_item_quantity_less_than_one(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"Item\", 1.0, 0)\n\n    def test_add_item_same_name_different_price(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Item\", 1.0)\n        with self.assertRaises(ValueError):\n            calc.add_item(\"Item\", 2.0)\n\n    def test_add_item_name_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(123, 10.0)\n\n    def test_add_item_price_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(\"Item\", \"10\")\n\n    def test_add_item_quantity_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(\"Item\", 1.0, 2.5)\n\n    def test_remove_item_existing(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 1.0)\n        calc.remove_item(\"A\")\n        self.assertTrue(calc.is_empty())\n\n    def test_remove_item_nonexistent(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.remove_item(\"NoSuch\")\n\n    def test_remove_item_name_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.remove_item(None)\n\n    def test_get_subtotal_multiple_items(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 2.0, 2)\n        calc.add_item(\"B\", 3.0, 3)\n        self.assertEqual(calc.get_subtotal(), 13.0)\n\n    def test_get_subtotal_empty_order(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.get_subtotal()\n\n    def test_apply_discount_zero(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(100.0, 0.0), 100.0)\n\n    def test_apply_discount_full(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(100.0, 1.0), 0.0)\n\n    def test_apply_discount_partial(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(100.0, 0.25), 75.0)\n\n    def test_apply_discount_negative_subtotal(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(-5.0, 0.1)\n\n    def test_apply_discount_discount_less_than_zero(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(100.0, -0.1)\n\n    def test_apply_discount_discount_greater_than_one(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(100.0, 1.2)\n\n    def test_apply_discount_subtotal_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.apply_discount(\"50\", 0.1)\n\n    def test_apply_discount_discount_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.apply_discount(50.0, None)\n\n    def test_calculate_shipping_below_threshold(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_shipping(50.0), calc.shipping_cost)\n\n    def test_calculate_shipping_at_threshold(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_shipping(calc.free_shipping_threshold), 0.0)\n\n    def test_calculate_shipping_above_threshold(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_shipping(200.0), 0.0)\n\n    def test_calculate_shipping_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_shipping(\"100\")\n\n    def test_calculate_tax_positive_amount(self):\n        calc = OrderCalculator()\n        self.assertAlmostEqual(calc.calculate_tax(100.0), 23.0)\n\n    def test_calculate_tax_zero_amount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_tax(0.0), 0.0)\n\n    def test_calculate_tax_negative_amount(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_tax(-1.0)\n\n    def test_calculate_tax_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_tax([50])\n\n    def test_calculate_total_no_discount_free_shipping(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 50.0, 2)\n        self.assertAlmostEqual(calc.calculate_total(), 123.0)\n\n    def test_calculate_total_with_discount_shipping_applies(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 50.0, 2)\n        self.assertAlmostEqual(calc.calculate_total(0.1), 123.0)\n\n    def test_calculate_total_empty_order(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_total()\n\n    def test_calculate_total_discount_less_than_zero(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 10.0)\n        with self.assertRaises(ValueError):\n            calc.calculate_total(-0.1)\n\n    def test_calculate_total_discount_greater_than_one(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 10.0)\n        with self.assertRaises(ValueError):\n            calc.calculate_total(1.5)\n\n    def test_calculate_total_discount_wrong_type(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 10.0)\n        with self.assertRaises(TypeError):\n            calc.calculate_total(\"0.2\")\n\n    def test_total_items_after_adds(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 1.0, 2)\n        calc.add_item(\"B\", 2.0, 3)\n        self.assertEqual(calc.total_items(), 5)\n\n    def test_total_items_empty(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.total_items(), 0)\n\n    def test_clear_order(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 1.0)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n        self.assertEqual(calc.list_items(), [])\n        with self.assertRaises(ValueError):\n            calc.get_subtotal()\n\n    def test_list_items_distinct(self):\n        calc = OrderCalculator()\n        calc.add_item(\"X\", 1.0)\n        calc.add_item(\"Y\", 2.0)\n        self.assertCountEqual(calc.list_items(), [\"X\", \"Y\"])\n\n    def test_list_items_repeated_adds_deduped(self):\n        calc = OrderCalculator()\n        calc.add_item(\"X\", 1.0)\n        calc.add_item(\"X\", 1.0)\n        self.assertEqual(calc.list_items(), [\"X\"])\n\n    def test_list_items_empty(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.list_items(), [])\n\n    def test_is_empty_fresh(self):\n        calc = OrderCalculator()\n        self.assertTrue(calc.is_empty())\n\n    def test_is_empty_after_add(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 1.0)\n        self.assertFalse(calc.is_empty())\n\n    def test_is_empty_after_clear(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 1.0)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n\nif __name__ == \"__main__\":\n    unittest.main()",
        "total_response_time": 85.25155329704285,
        "strategy": "chain_of_thought_prompting",
        "context_type": "interface_docstring"
      }
    },
    "analysis": {
      "compilation": {
        "compilation_success": true,
        "execution_success": true,
        "tests_run": 56,
        "tests_passed": 56,
        "tests_failed": 0,
        "test_errors": [],
        "compilation_errors": []
      },
      "coverage": {
        "statements": 93,
        "missing": 1,
        "coverage_percent": 56,
        "branch_coverage_percent": 0,
        "partial_coverage": 0
      },
      "mutation": {
        "total_mutants": 0,
        "killed": 0,
        "survived": 0,
        "timeout": 0,
        "suspicious": 0,
        "skipped": 0,
        "mutation_score": 0.0
      },
      "scenarios": {
        "total_test_methods": 56,
        "covered_scenarios": {
          "init_scenarios": 9,
          "add_item_scenarios": 10,
          "remove_item_scenarios": 3,
          "get_subtotal_scenarios": 4,
          "apply_discount_scenarios": 11,
          "calculate_shipping_scenarios": 4,
          "calculate_tax_scenarios": 4,
          "calculate_total_scenarios": 1,
          "total_items_scenarios": 2,
          "list_items_scenarios": 3,
          "is_empty_scenarios": 3,
          "clear_order_scenarios": 1,
          "corner_cases": 19,
          "performance_tests": 0,
          "precision_tests": 0
        },
        "quality_metrics": {
          "has_setup_teardown": false,
          "uses_assertions": 69,
          "tests_with_multiple_assertions": 7,
          "uses_context_managers": 30,
          "has_edge_case_testing": false,
          "has_error_testing": 30,
          "average_test_length": 5.160714285714286
        },
        "scenarios_file_found": true,
        "total_defined_scenarios": 54
      },
      "summary": {
        "model": "gpt-o4-mini-high",
        "strategy": "chain_of_thought_prompting",
        "context_type": "interface_docstring",
        "timestamp": "2025-07-04T01:07:34.675911",
        "response_time": 85.25155329704285,
        "compilation_success_rate": 100,
        "execution_success_rate": 100,
        "tests_generated": 56,
        "tests_passed": 56,
        "tests_failed": 0,
        "test_success_rate": 100.0,
        "statement_coverage": 56,
        "branch_coverage": 0,
        "missing_statements": 1,
        "total_statements": 93,
        "mutation_score": 0.0,
        "mutants_killed": 0,
        "mutants_survived": 0,
        "total_mutants": 0,
        "total_test_methods": 56,
        "covered_scenarios_count": 74,
        "total_defined_scenarios": 54,
        "scenario_coverage_rate": 137.0,
        "total_assertions": 69,
        "tests_with_error_handling": 30,
        "average_test_length": 5.2
      }
    }
  },
  {
    "experiment": {
      "model": "gpt-o4-mini-high",
      "strategy": "chain_of_thought_prompting",
      "context_type": "full_context",
      "timestamp": "2025-07-04T01:10:19.249652",
      "response_time": 116.02470517158508,
      "test_file": "prompts_results\\chain_of_thought_prompting\\full_context\\gpt-o4-mini-high\\tests.py",
      "raw_results": {
        "responses": [
          {
            "step": 1,
            "prompt": "You are a software testing assistant. Your task is to generate a set of unit tests for a Python class provided below.\n\nThe tests should:\n- use the `unittest` framework,\n- cover all public methods,\n- test typical usage as well as edge cases, invalid inputs, and exceptions,\n- be clear, atomic, and minimal.\n\nYou will now analyze the class to prepare relevant test cases.\nDo not write test code yet.\n\nBelow is the full implementation of the class:\n\n```python\nfrom typing import TypedDict, List\n\nclass Item(TypedDict):\n    \"\"\"\n    Represents a single product entry in the order.\n\n:key name: The name of the product.\n    :key price: The price per unit of the product.\n    :key quantity: The number of units of the product.\n    \"\"\"\n    name: str\n    price: float\n    quantity: int\n\nclass OrderCalculator:\n    def __init__(self, tax_rate=0.23, free_shipping_threshold=100.0, shipping_cost=10.0):\n        \"\"\"\n        Initializes a new OrderCalculator instance.\n        Initializes an empty list of items (each represented as a TypedDict 'Item')\n        and stores the configured tax and shipping parameters.\n\n:param tax_rate: The percentage of tax applied to the final amount, expressed as a float between 0.0 and 1.0 (default is 0.23 for 23%).\n        :param free_shipping_threshold: The minimum order value (after discount) that qualifies for free shipping (default is 100.0).\n        :param shipping_cost: The cost of shipping applied if the order does not meet the free shipping threshold (default is 10.0).\n\n:raises ValueError:\n            - If tax_rate is not in the range [0.0, 1.0].\n            - If free_shipping_threshold is negative.\n            - If shipping_cost is negative.\n        :raises TypeError: If any parameter is of incorrect type.\n        \"\"\"\n        if not isinstance(tax_rate, (float, int)):\n            raise TypeError(\"Tax rate must be a float or int.\")\n        if not isinstance(free_shipping_threshold, (float, int)):\n            raise TypeError(\"Free shipping threshold must be a float or int.\")\n        if not isinstance(shipping_cost, (float, int)):\n            raise TypeError(\"Shipping cost must be a float or int.\")\n        if not 0.0 <= tax_rate <= 1.0:\n            raise ValueError(\"Tax rate must be between 0.0 and 1.0.\")\n        if free_shipping_threshold < 0.0:\n            raise ValueError(\"Free shipping threshold cannot be negative.\")\n        if shipping_cost < 0.0:\n            raise ValueError(\"Shipping cost cannot be negative.\")\n\nself.items: List[Item] = []\n        self.tax_rate = tax_rate\n        self.free_shipping_threshold = free_shipping_threshold\n        self.shipping_cost = shipping_cost\n\ndef add_item(self, name: str, price: float, quantity: int = 1):\n        \"\"\"\n        Add an item to the order.\n\nIf an item with the same name and price already exists, its quantity is increased.\n\n:param name: the name of the item\n        :param price: the price of the item\n        :param quantity: the quantity of the item (default is 1)\n        :raises ValueError: If name is empty, price <= 0, quantity < 1, or item with same name but different price exists.\n        :raises TypeError: If inputs are of incorrect types.\n        \"\"\"\n        if not isinstance(name, str):\n            raise TypeError(\"Item name must be a string.\")\n        if not isinstance(price, (float, int)):\n            raise TypeError(\"Price must be a number.\")\n        if not isinstance(quantity, int):\n            raise TypeError(\"Quantity must be an integer.\")\n        if not name:\n            raise ValueError(\"Item name cannot be empty.\")\n        if quantity < 1:\n            raise ValueError(\"Quantity must be at least 1.\")\n        if price <= 0:\n            raise ValueError(\"Price must be greater than 0.\")\n\nfor item in self.items:\n            if item[\"name\"] == name:\n                if item[\"price\"] != price:\n                    raise ValueError(\"Item with the same name but different price already exists.\")\n                item[\"quantity\"] += quantity\n                return\n\nself.items.append({\n            \"name\": name,\n            \"price\": price,\n            \"quantity\": quantity\n        })\n\ndef remove_item(self, name: str):\n        \"\"\"\n        Removes an item from the order.\n\n:param name: The name of the item to remove.\n        :raises ValueError: If no item with the given name exists in the order.\n        :raises TypeError: If name is not a string.\n        \"\"\"\n        if not isinstance(name, str):\n            raise TypeError(\"Item name must be a string.\")\n        if not any(item[\"name\"] == name for item in self.items):\n            raise ValueError(f\"Item with name '{name}' does not exist in the order.\")\n\nself.items = [item for item in self.items if item[\"name\"] != name]\n\ndef get_subtotal(self) -> float:\n        \"\"\"\n        Calculates the subtotal (sum of item prices times their quantities) for all items in the order.\n\n:return: The subtotal as a float.\n        :raises ValueError: If the order is empty.\n        \"\"\"\n        if not self.items:\n            raise ValueError(\"Cannot calculate subtotal on empty order.\")\n        return sum(item[\"price\"] * item[\"quantity\"] for item in self.items)\n\ndef apply_discount(self, subtotal: float, discount: float) -> float:\n        \"\"\"\n        Applies a percentage discount to the given subtotal.\n\n:param subtotal: the subtotal amount (must be >= 0)\n        :param discount: the discount rate as a float between 0.0 and 1.0 (e.g. 0.2 = 20%).\n        :return: The discounted subtotal.\n        :raises ValueError: If subtotal < 0 or discount is outside the [0.0, 1.0] range.\n        :raises TypeError: If inputs are of incorrect types.\n        \"\"\"\n        if not isinstance(subtotal, (float, int)):\n            raise TypeError(\"Subtotal must be a number.\")\n        if not isinstance(discount, (float, int)):\n            raise TypeError(\"Discount must be a number.\")\n        if not 0.0 <= discount <= 1.0:\n            raise ValueError(\"Discount must be between 0.0 and 1.0.\")\n        if subtotal < 0.0:\n            raise ValueError(\"Cannot apply discount on negative subtotal.\")\n        return subtotal * (1 - discount)\n\ndef calculate_shipping(self, discounted_subtotal: float) -> float:\n        \"\"\"\n        Calculates the shipping cost based on the discounted subtotal.\n\nIf the discounted subtotal >= free shipping threshold shipping is free (0.0).\n        Otherwise, the standard shipping cost is applied.\n\n:param discounted_subtotal: The subtotal amount after applying discount (must be >= 0.0).\n        :return: The shipping cost as a float (0.0 or self.shipping_cost).\n        :raises TypeError: If input is not a number.\n        \"\"\"\n        if not isinstance(discounted_subtotal, (float, int)):\n            raise TypeError(\"Discounted subtotal must be a number.\")\n        if discounted_subtotal >= self.free_shipping_threshold:\n            return 0.0\n        return self.shipping_cost\n\ndef calculate_tax(self, amount: float) -> float:\n        \"\"\"\n        Calculates the tax based on the provided amount using the configured tax rate.\n\n:param amount: The amount on which to calculate the tax (must be >= 0.0).\n        :return: The tax as a float.\n        :raises ValueError: If the amount is negative.\n        :raises TypeError: If input is not a number.\n        \"\"\"\n        if not isinstance(amount, (float, int)):\n            raise TypeError(\"Amount must be a number.\")\n        if amount < 0.0:\n            raise ValueError(\"Cannot calculate tax on negative amount.\")\n        return amount * self.tax_rate\n\ndef calculate_total(self, discount: float = 0.0) -> float:\n        \"\"\"\n        Calculates the total cost of the order after applying discount, shipping, and tax.\n\nThis method performs the following steps:\n        1. Calculates the subtotal from all items.\n        2. Applies the given discount.\n        3. Adds shipping cost if necessary.\n        4. Calculates tax on the discounted subtotal + shipping.\n\n:param discount: Discount rate between 0.0 and 1.0 (e.g. 0.2 = 20%).\n        :return: The final total as a float.\n        :raises ValueError:\n            - If the subtotal is negative.\n            - If the discount is invalid.\n            - If the order is empty.\n        :raises TypeError: If input is not a number.\n        \"\"\"\n        if not isinstance(discount, (float, int)):\n            raise TypeError(\"Discount must be a number.\")\n\nsubtotal = self.get_subtotal()\n        if subtotal < 0.0:\n            raise ValueError(\"Cannot calculate total on negative subtotal.\")\n        discounted_subtotal = self.apply_discount(subtotal, discount)\n        shipping_cost = self.calculate_shipping(discounted_subtotal)\n        tax = self.calculate_tax(discounted_subtotal + shipping_cost)\n        return discounted_subtotal + shipping_cost + tax\n\ndef total_items(self) -> int:\n        \"\"\"\n        Returns the total quantity of all items in the order.\n\n:return: The sum of the quantities of all items.\n        :return:\n        \"\"\"\n        return sum(item[\"quantity\"] for item in self.items)\n\ndef clear_order(self):\n        \"\"\"\n        Removes all items from the order, resetting it to an empty state.\n        \"\"\"\n        self.items = []\n\ndef list_items(self) -> List[str]:\n        \"\"\"\n        Returns a list of all unique item names currently in the order.\n\n:return: A list of unique item names (no duplicates).\n        \"\"\"\n        return list(set(item[\"name\"] for item in self.items))\n\ndef is_empty(self) -> bool:\n        \"\"\"\n        Checks whether the order is currently empty.\n\n:return: True if no items are in the order, False otherwise.\n        \"\"\"\n        return len(self.items) == 0\n```",
            "response": "Here\u2019s a breakdown of the public methods and the test cases you\u2019ll want to cover. Each bullet is one atomic scenario\u2014tests should be small and focused.\n1. __init__\nValid parameters\nDefault ctor: no args \u2192 creates empty order, correct defaults.\nCustom valid values (e.g. tax_rate=0, free_shipping_threshold=0, shipping_cost=0).\nType errors\ntax_rate non-numeric (e.g. \"0.2\").\nfree_shipping_threshold non-numeric.\nshipping_cost non-numeric.\nValue errors\ntax_rate < 0 or > 1.\nfree_shipping_threshold negative.\nshipping_cost negative.\n2. add_item(name, price, quantity=1)\nTypical usage\nAdd a single item with default quantity.\nAdd multiple different items.\nQuantity accumulation\nAdd the same (name, price) twice \u2192 quantity sums.\nConflict\nAdd same name but different price \u2192 raises ValueError.\nType checks\nname not a str.\nprice not a number.\nquantity not an int.\nValue checks\nEmpty name.\nprice \u2264 0.\nquantity < 1.\n3. remove_item(name)\nTypical usage\nRemove existing item.\nType error\nname not a str.\nMissing item\nRemove non-existent name \u2192 raises ValueError.\nIdempotence\nAfter removal, order no longer contains that name.\n4. get_subtotal()\nTypical usage\nWith several items \u2192 correct sum of price \u00d7 quantity.\nEmpty order\nOn empty items \u2192 raises ValueError.\n5. apply_discount(subtotal, discount)\nTypical usage\nNo discount (0.0), full discount (1.0), mid-range discount (e.g. 0.2).\nType errors\nsubtotal non-numeric.\ndiscount non-numeric.\nValue errors\nsubtotal negative.\ndiscount < 0 or > 1.\n6. calculate_shipping(discounted_subtotal)\nTypical usage\nBelow threshold \u2192 returns shipping_cost.\nAt threshold \u2192 returns 0.0.\nAbove threshold \u2192 returns 0.0.\nType error\ndiscounted_subtotal non-numeric.\n7. calculate_tax(amount)\nTypical usage\nZero amount \u2192 returns 0.0.\nPositive amount \u2192 amount \u00d7 tax_rate.\nType error\namount non-numeric.\nValue error\nNegative amount.\n8. calculate_total(discount=0.0)\nThis method wires together subtotal, discount, shipping and tax. Test each branch:\nTypical \u201cno discount, below threshold\u201d\nSmall order \u2192 include shipping + tax.\n\u201cNo discount, free shipping\u201d\nLarge order \u2192 no shipping, just tax.\n\u201cWith discount, shipping still applies\u201d\nDiscount reduces just below free-ship threshold.\n\u201cWith discount, free shipping\u201d\nDiscounted subtotal \u2265 threshold \u2192 no shipping.\nType error\ndiscount non-numeric.\nValue error\ndiscount < 0 or > 1 (propagates from apply_discount).\nEmpty order \u2192 propagates from get_subtotal.\n9. total_items()\nTypical usage\nSum of quantities across multiple items.\nEmpty order\nReturns 0.\n10. clear_order()\nTypical usage\nAfter adding items, clear_order() \u2192 items empty.\n11. list_items()\nTypical usage\nReturns unique names even if duplicates were added.\nEmpty order\nReturns empty list.\n12. is_empty()\nEmpty\nOn new or cleared order \u2192 True.\nNon-empty\nAfter any add_item \u2192 False.\nWith these scenarios in hand, you can now write minimal, clear unittest.TestCase methods\u2014one per bullet\u2014asserting the correct return values or that the proper exception is raised.",
            "response_time": 23.782429218292236
          },
          {
            "step": 2,
            "prompt": "Based on the class above, list all relevant unit test scenarios you would create.\nEach scenario should describe:\n- the method being tested,\n- the type of case (e.g. normal use, invalid input, exception),\n- a short explanation of the intent.\nList as many scenarios as you can think of, covering all aspects of the class.\nDo not write test code yet.\n\n",
            "response": "Below is a comprehensive list of unit-test scenarios, grouped by method. Each scenario states the method under test, the case type, and a brief intent.\n__init__\nMethod: __init__\nCase: Normal use (defaults)\nIntent: Verify an instance with no args has tax_rate=0.23, free_shipping_threshold=100.0, shipping_cost=10.0, and an empty items list.\nMethod: __init__\nCase: Normal use (custom zero values)\nIntent: tax_rate=0.0, free_shipping_threshold=0.0, shipping_cost=0.0 all accepted and stored.\nMethod: __init__\nCase: Type error\nIntent: Passing tax_rate=\"0.2\" raises TypeError.\nMethod: __init__\nCase: Type error\nIntent: Passing free_shipping_threshold=\"100\" raises TypeError.\nMethod: __init__\nCase: Type error\nIntent: Passing shipping_cost=[10] raises TypeError.\nMethod: __init__\nCase: Value error\nIntent: tax_rate=-0.1 or tax_rate=1.1 raises ValueError.\nMethod: __init__\nCase: Value error\nIntent: free_shipping_threshold=-5.0 raises ValueError.\nMethod: __init__\nCase: Value error\nIntent: shipping_cost=-1.0 raises ValueError.\nadd_item(name, price, quantity)\nMethod: add_item\nCase: Normal use\nIntent: Add a single item (quantity default) \u2192 appears in items.\nMethod: add_item\nCase: Normal use\nIntent: Add two different items \u2192 both present.\nMethod: add_item\nCase: Normal use (quantity >1)\nIntent: Add with quantity=3 \u2192 item\u2019s quantity is 3.\nMethod: add_item\nCase: Accumulation\nIntent: Add same (name, price) twice \u2192 second call increments existing quantity.\nMethod: add_item\nCase: Conflict\nIntent: Add same name but different price \u2192 raises ValueError.\nMethod: add_item\nCase: Type error\nIntent: name=123 raises TypeError.\nMethod: add_item\nCase: Type error\nIntent: price=\"9.99\" raises TypeError.\nMethod: add_item\nCase: Type error\nIntent: quantity=2.5 raises TypeError.\nMethod: add_item\nCase: Value error\nIntent: name=\"\" raises ValueError.\nMethod: add_item\nCase: Value error\nIntent: price=0 or negative raises ValueError.\nMethod: add_item\nCase: Value error\nIntent: quantity=0 or negative raises ValueError.\nremove_item(name)\nMethod: remove_item\nCase: Normal use\nIntent: Remove an existing item \u2192 no longer in items.\nMethod: remove_item\nCase: Type error\nIntent: name=42 raises TypeError.\nMethod: remove_item\nCase: Missing item\nIntent: Remove non-existent name raises ValueError.\nMethod: remove_item\nCase: Idempotence\nIntent: After removal, calling is_empty() or list_items() reflects the change.\nget_subtotal()\nMethod: get_subtotal\nCase: Normal use\nIntent: Multiple items \u2192 returns correct sum of price \u00d7 quantity.\nMethod: get_subtotal\nCase: Empty order\nIntent: No items \u2192 raises ValueError.\napply_discount(subtotal, discount)\nMethod: apply_discount\nCase: No discount\nIntent: discount=0.0 returns same subtotal.\nMethod: apply_discount\nCase: Full discount\nIntent: discount=1.0 returns 0.0.\nMethod: apply_discount\nCase: Mid-range discount\nIntent: discount=0.25 returns subtotal \u00d7 0.75.\nMethod: apply_discount\nCase: Type error\nIntent: subtotal=\"50\" raises TypeError.\nMethod: apply_discount\nCase: Type error\nIntent: discount=None raises TypeError.\nMethod: apply_discount\nCase: Value error\nIntent: discount=-0.1 or 1.1 raises ValueError.\nMethod: apply_discount\nCase: Value error\nIntent: subtotal<0 raises ValueError.\ncalculate_shipping(discounted_subtotal)\nMethod: calculate_shipping\nCase: Below threshold\nIntent: discounted_subtotal < free_shipping_threshold returns shipping_cost.\nMethod: calculate_shipping\nCase: At threshold\nIntent: discounted_subtotal == free_shipping_threshold returns 0.0.\nMethod: calculate_shipping\nCase: Above threshold\nIntent: discounted_subtotal > free_shipping_threshold returns 0.0.\nMethod: calculate_shipping\nCase: Type error\nIntent: discounted_subtotal=\"20\" raises TypeError.\ncalculate_tax(amount)\nMethod: calculate_tax\nCase: Zero amount\nIntent: amount=0 returns 0.0.\nMethod: calculate_tax\nCase: Positive amount\nIntent: Returns amount \u00d7 tax_rate.\nMethod: calculate_tax\nCase: Negative amount\nIntent: amount<0 raises ValueError.\nMethod: calculate_tax\nCase: Type error\nIntent: amount=[100] raises TypeError.\ncalculate_total(discount)\nMethod: calculate_total\nCase: Normal, no discount, below free-ship\nIntent: Small order \u2192 shipping + tax included.\nMethod: calculate_total\nCase: Normal, no discount, free-ship\nIntent: Large order \u2192 shipping = 0, only tax.\nMethod: calculate_total\nCase: Discount but still below threshold\nIntent: Discounted subtotal < threshold \u2192 shipping + tax.\nMethod: calculate_total\nCase: Discount yielding free-ship\nIntent: Discounted subtotal \u2265 threshold \u2192 no shipping.\nMethod: calculate_total\nCase: Type error\nIntent: discount=\"0.1\" raises TypeError.\nMethod: calculate_total\nCase: Value error (invalid discount)\nIntent: discount<0 or >1 propagates ValueError.\nMethod: calculate_total\nCase: Value error (empty order)\nIntent: No items \u2192 raises ValueError via get_subtotal.\ntotal_items()\nMethod: total_items\nCase: Normal use\nIntent: Sum of all quantity values across items.\nMethod: total_items\nCase: Empty order\nIntent: Returns 0.\nclear_order()\nMethod: clear_order\nCase: Normal use\nIntent: After adding items, clear_order() makes is_empty() \u2192 True.\nMethod: clear_order\nCase: Idempotence\nIntent: Calling on an already empty order leaves it empty.\nlist_items()\nMethod: list_items\nCase: Normal use\nIntent: Returns all unique names, order unimportant.\nMethod: list_items\nCase: Duplicates\nIntent: If same name added twice, appears only once.\nMethod: list_items\nCase: Empty order\nIntent: Returns empty list.\nis_empty()\nMethod: is_empty\nCase: New order\nIntent: Immediately after construction, returns True.\nMethod: is_empty\nCase: After add\nIntent: After any add_item, returns False.\nMethod: is_empty\nCase: After clear\nIntent: After clear_order(), returns True.\nWith these 57 granular scenarios, you\u2019ll fully exercise every public method, both happy paths and error conditions.",
            "response_time": 32.87498068809509
          },
          {
            "step": 3,
            "prompt": "Now, based on the test scenarios you just listed, generate the complete Python unit test suite using the `unittest` framework.\n\nFollow these rules:\n- Include one test method per scenario.\n- Use meaningful test method names.\n- Do not include comments or explanations.\n- Output a valid `.py` file containing only the test class.\n\nThe output must contain only Python code.",
            "response": "python\nKopiuj\nEdytuj\nimport unittest\nfrom order_calculator import OrderCalculator\n\nclass TestOrderCalculator(unittest.TestCase):\n\n    def test_init_default(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.tax_rate, 0.23)\n        self.assertEqual(calc.free_shipping_threshold, 100.0)\n        self.assertEqual(calc.shipping_cost, 10.0)\n        self.assertEqual(calc.items, [])\n\n    def test_init_custom_zero_values(self):\n        calc = OrderCalculator(tax_rate=0.0, free_shipping_threshold=0.0, shipping_cost=0.0)\n        self.assertEqual(calc.tax_rate, 0.0)\n        self.assertEqual(calc.free_shipping_threshold, 0.0)\n        self.assertEqual(calc.shipping_cost, 0.0)\n        self.assertEqual(calc.items, [])\n\n    def test_init_tax_rate_type_error(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(tax_rate=\"0.2\")\n\n    def test_init_free_shipping_threshold_type_error(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(free_shipping_threshold=\"100\")\n\n    def test_init_shipping_cost_type_error(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(shipping_cost=[10])\n\n    def test_init_tax_rate_value_error(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=-0.1)\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=1.1)\n\n    def test_init_free_shipping_threshold_negative(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(free_shipping_threshold=-5.0)\n\n    def test_init_shipping_cost_negative(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(shipping_cost=-1.0)\n\n    def test_add_item_single_default_quantity(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        self.assertEqual(len(calc.items), 1)\n        item = calc.items[0]\n        self.assertEqual(item[\"name\"], \"apple\")\n        self.assertEqual(item[\"price\"], 1.0)\n        self.assertEqual(item[\"quantity\"], 1)\n\n    def test_add_item_multiple_different_items(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.add_item(\"banana\", 2.0, 2)\n        self.assertEqual(len(calc.items), 2)\n\n    def test_add_item_with_quantity(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0, 3)\n        self.assertEqual(calc.items[0][\"quantity\"], 3)\n\n    def test_add_item_accumulate_quantity(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0, 2)\n        calc.add_item(\"apple\", 1.0, 3)\n        self.assertEqual(calc.items[0][\"quantity\"], 5)\n\n    def test_add_item_conflicting_price(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        with self.assertRaises(ValueError):\n            calc.add_item(\"apple\", 2.0)\n\n    def test_add_item_name_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(123, 1.0)\n\n    def test_add_item_price_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(\"apple\", \"1.0\")\n\n    def test_add_item_quantity_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(\"apple\", 1.0, 2.5)\n\n    def test_add_item_empty_name(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"\", 1.0)\n\n    def test_add_item_non_positive_price(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"apple\", 0)\n\n    def test_add_item_invalid_quantity(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"apple\", 1.0, 0)\n\n    def test_remove_existing_item(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.remove_item(\"apple\")\n        self.assertEqual(calc.items, [])\n\n    def test_remove_item_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.remove_item(123)\n\n    def test_remove_nonexistent_item(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.remove_item(\"apple\")\n\n    def test_remove_item_updates_state(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.add_item(\"banana\", 2.0)\n        calc.remove_item(\"apple\")\n        names = [item[\"name\"] for item in calc.items]\n        self.assertNotIn(\"apple\", names)\n\n    def test_get_subtotal_with_items(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 2.0, 3)\n        calc.add_item(\"banana\", 1.5, 2)\n        self.assertEqual(calc.get_subtotal(), 9.0)\n\n    def test_get_subtotal_empty_order(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.get_subtotal()\n\n    def test_apply_discount_no_discount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(100.0, 0.0), 100.0)\n\n    def test_apply_discount_full_discount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(100.0, 1.0), 0.0)\n\n    def test_apply_discount_mid_discount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(80.0, 0.25), 60.0)\n\n    def test_apply_discount_subtotal_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.apply_discount(\"80\", 0.2)\n\n    def test_apply_discount_discount_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.apply_discount(80.0, None)\n\n    def test_apply_discount_discount_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(80.0, -0.1)\n        with self.assertRaises(ValueError):\n            calc.apply_discount(80.0, 1.1)\n\n    def test_apply_discount_negative_subtotal(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(-10.0, 0.2)\n\n    def test_calculate_shipping_below_threshold(self):\n        calc = OrderCalculator(free_shipping_threshold=50.0, shipping_cost=5.0)\n        self.assertEqual(calc.calculate_shipping(49.99), 5.0)\n\n    def test_calculate_shipping_at_threshold(self):\n        calc = OrderCalculator(free_shipping_threshold=50.0, shipping_cost=5.0)\n        self.assertEqual(calc.calculate_shipping(50.0), 0.0)\n\n    def test_calculate_shipping_above_threshold(self):\n        calc = OrderCalculator(free_shipping_threshold=50.0, shipping_cost=5.0)\n        self.assertEqual(calc.calculate_shipping(100.0), 0.0)\n\n    def test_calculate_shipping_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_shipping(\"50\")\n\n    def test_calculate_tax_zero_amount(self):\n        calc = OrderCalculator(tax_rate=0.1)\n        self.assertEqual(calc.calculate_tax(0.0), 0.0)\n\n    def test_calculate_tax_positive_amount(self):\n        calc = OrderCalculator(tax_rate=0.1)\n        self.assertEqual(calc.calculate_tax(200.0), 20.0)\n\n    def test_calculate_tax_negative_amount(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_tax(-5.0)\n\n    def test_calculate_tax_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_tax([100])\n\n    def test_calculate_total_no_discount_below_threshold(self):\n        calc = OrderCalculator(tax_rate=0.1, free_shipping_threshold=100.0, shipping_cost=10.0)\n        calc.add_item(\"apple\", 10.0, 2)\n        self.assertEqual(calc.calculate_total(0.0), 33.0)\n\n    def test_calculate_total_no_discount_free_shipping(self):\n        calc = OrderCalculator(tax_rate=0.1, free_shipping_threshold=20.0, shipping_cost=10.0)\n        calc.add_item(\"apple\", 10.0, 2)\n        self.assertEqual(calc.calculate_total(0.0), 22.0)\n\n    def test_calculate_total_with_discount_below_threshold(self):\n        calc = OrderCalculator(tax_rate=0.1, free_shipping_threshold=50.0, shipping_cost=5.0)\n        calc.add_item(\"apple\", 10.0, 5)\n        self.assertEqual(calc.calculate_total(0.2), 49.5)\n\n    def test_calculate_total_with_discount_free_shipping(self):\n        calc = OrderCalculator(tax_rate=0.1, free_shipping_threshold=30.0, shipping_cost=5.0)\n        calc.add_item(\"apple\", 10.0, 5)\n        self.assertEqual(calc.calculate_total(0.4), 33.0)\n\n    def test_calculate_total_discount_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_total(\"0.1\")\n\n    def test_calculate_total_invalid_discount_value(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        with self.assertRaises(ValueError):\n            calc.calculate_total(-0.1)\n        with self.assertRaises(ValueError):\n            calc.calculate_total(1.1)\n\n    def test_calculate_total_empty_order(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_total(0.0)\n\n    def test_total_items_multiple(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0, 2)\n        calc.add_item(\"banana\", 2.0, 3)\n        self.assertEqual(calc.total_items(), 5)\n\n    def test_total_items_empty_order(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.total_items(), 0)\n\n    def test_clear_order_after_adding(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n\n    def test_clear_order_idempotent(self):\n        calc = OrderCalculator()\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n\n    def test_list_items_unique(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.add_item(\"banana\", 2.0)\n        self.assertCountEqual(calc.list_items(), [\"apple\", \"banana\"])\n\n    def test_list_items_duplicates(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.add_item(\"apple\", 1.0)\n        self.assertCountEqual(calc.list_items(), [\"apple\"])\n\n    def test_list_items_empty(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.list_items(), [])\n\n    def test_is_empty_new_order(self):\n        calc = OrderCalculator()\n        self.assertTrue(calc.is_empty())\n\n    def test_is_empty_after_add(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        self.assertFalse(calc.is_empty())\n\n    def test_is_empty_after_clear(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())",
            "response_time": 59.367295265197754
          }
        ],
        "final_response": "python\nKopiuj\nEdytuj\nimport unittest\nfrom order_calculator import OrderCalculator\n\nclass TestOrderCalculator(unittest.TestCase):\n\n    def test_init_default(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.tax_rate, 0.23)\n        self.assertEqual(calc.free_shipping_threshold, 100.0)\n        self.assertEqual(calc.shipping_cost, 10.0)\n        self.assertEqual(calc.items, [])\n\n    def test_init_custom_zero_values(self):\n        calc = OrderCalculator(tax_rate=0.0, free_shipping_threshold=0.0, shipping_cost=0.0)\n        self.assertEqual(calc.tax_rate, 0.0)\n        self.assertEqual(calc.free_shipping_threshold, 0.0)\n        self.assertEqual(calc.shipping_cost, 0.0)\n        self.assertEqual(calc.items, [])\n\n    def test_init_tax_rate_type_error(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(tax_rate=\"0.2\")\n\n    def test_init_free_shipping_threshold_type_error(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(free_shipping_threshold=\"100\")\n\n    def test_init_shipping_cost_type_error(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(shipping_cost=[10])\n\n    def test_init_tax_rate_value_error(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=-0.1)\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=1.1)\n\n    def test_init_free_shipping_threshold_negative(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(free_shipping_threshold=-5.0)\n\n    def test_init_shipping_cost_negative(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(shipping_cost=-1.0)\n\n    def test_add_item_single_default_quantity(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        self.assertEqual(len(calc.items), 1)\n        item = calc.items[0]\n        self.assertEqual(item[\"name\"], \"apple\")\n        self.assertEqual(item[\"price\"], 1.0)\n        self.assertEqual(item[\"quantity\"], 1)\n\n    def test_add_item_multiple_different_items(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.add_item(\"banana\", 2.0, 2)\n        self.assertEqual(len(calc.items), 2)\n\n    def test_add_item_with_quantity(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0, 3)\n        self.assertEqual(calc.items[0][\"quantity\"], 3)\n\n    def test_add_item_accumulate_quantity(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0, 2)\n        calc.add_item(\"apple\", 1.0, 3)\n        self.assertEqual(calc.items[0][\"quantity\"], 5)\n\n    def test_add_item_conflicting_price(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        with self.assertRaises(ValueError):\n            calc.add_item(\"apple\", 2.0)\n\n    def test_add_item_name_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(123, 1.0)\n\n    def test_add_item_price_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(\"apple\", \"1.0\")\n\n    def test_add_item_quantity_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(\"apple\", 1.0, 2.5)\n\n    def test_add_item_empty_name(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"\", 1.0)\n\n    def test_add_item_non_positive_price(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"apple\", 0)\n\n    def test_add_item_invalid_quantity(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"apple\", 1.0, 0)\n\n    def test_remove_existing_item(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.remove_item(\"apple\")\n        self.assertEqual(calc.items, [])\n\n    def test_remove_item_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.remove_item(123)\n\n    def test_remove_nonexistent_item(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.remove_item(\"apple\")\n\n    def test_remove_item_updates_state(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.add_item(\"banana\", 2.0)\n        calc.remove_item(\"apple\")\n        names = [item[\"name\"] for item in calc.items]\n        self.assertNotIn(\"apple\", names)\n\n    def test_get_subtotal_with_items(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 2.0, 3)\n        calc.add_item(\"banana\", 1.5, 2)\n        self.assertEqual(calc.get_subtotal(), 9.0)\n\n    def test_get_subtotal_empty_order(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.get_subtotal()\n\n    def test_apply_discount_no_discount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(100.0, 0.0), 100.0)\n\n    def test_apply_discount_full_discount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(100.0, 1.0), 0.0)\n\n    def test_apply_discount_mid_discount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(80.0, 0.25), 60.0)\n\n    def test_apply_discount_subtotal_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.apply_discount(\"80\", 0.2)\n\n    def test_apply_discount_discount_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.apply_discount(80.0, None)\n\n    def test_apply_discount_discount_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(80.0, -0.1)\n        with self.assertRaises(ValueError):\n            calc.apply_discount(80.0, 1.1)\n\n    def test_apply_discount_negative_subtotal(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(-10.0, 0.2)\n\n    def test_calculate_shipping_below_threshold(self):\n        calc = OrderCalculator(free_shipping_threshold=50.0, shipping_cost=5.0)\n        self.assertEqual(calc.calculate_shipping(49.99), 5.0)\n\n    def test_calculate_shipping_at_threshold(self):\n        calc = OrderCalculator(free_shipping_threshold=50.0, shipping_cost=5.0)\n        self.assertEqual(calc.calculate_shipping(50.0), 0.0)\n\n    def test_calculate_shipping_above_threshold(self):\n        calc = OrderCalculator(free_shipping_threshold=50.0, shipping_cost=5.0)\n        self.assertEqual(calc.calculate_shipping(100.0), 0.0)\n\n    def test_calculate_shipping_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_shipping(\"50\")\n\n    def test_calculate_tax_zero_amount(self):\n        calc = OrderCalculator(tax_rate=0.1)\n        self.assertEqual(calc.calculate_tax(0.0), 0.0)\n\n    def test_calculate_tax_positive_amount(self):\n        calc = OrderCalculator(tax_rate=0.1)\n        self.assertEqual(calc.calculate_tax(200.0), 20.0)\n\n    def test_calculate_tax_negative_amount(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_tax(-5.0)\n\n    def test_calculate_tax_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_tax([100])\n\n    def test_calculate_total_no_discount_below_threshold(self):\n        calc = OrderCalculator(tax_rate=0.1, free_shipping_threshold=100.0, shipping_cost=10.0)\n        calc.add_item(\"apple\", 10.0, 2)\n        self.assertEqual(calc.calculate_total(0.0), 33.0)\n\n    def test_calculate_total_no_discount_free_shipping(self):\n        calc = OrderCalculator(tax_rate=0.1, free_shipping_threshold=20.0, shipping_cost=10.0)\n        calc.add_item(\"apple\", 10.0, 2)\n        self.assertEqual(calc.calculate_total(0.0), 22.0)\n\n    def test_calculate_total_with_discount_below_threshold(self):\n        calc = OrderCalculator(tax_rate=0.1, free_shipping_threshold=50.0, shipping_cost=5.0)\n        calc.add_item(\"apple\", 10.0, 5)\n        self.assertEqual(calc.calculate_total(0.2), 49.5)\n\n    def test_calculate_total_with_discount_free_shipping(self):\n        calc = OrderCalculator(tax_rate=0.1, free_shipping_threshold=30.0, shipping_cost=5.0)\n        calc.add_item(\"apple\", 10.0, 5)\n        self.assertEqual(calc.calculate_total(0.4), 33.0)\n\n    def test_calculate_total_discount_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_total(\"0.1\")\n\n    def test_calculate_total_invalid_discount_value(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        with self.assertRaises(ValueError):\n            calc.calculate_total(-0.1)\n        with self.assertRaises(ValueError):\n            calc.calculate_total(1.1)\n\n    def test_calculate_total_empty_order(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_total(0.0)\n\n    def test_total_items_multiple(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0, 2)\n        calc.add_item(\"banana\", 2.0, 3)\n        self.assertEqual(calc.total_items(), 5)\n\n    def test_total_items_empty_order(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.total_items(), 0)\n\n    def test_clear_order_after_adding(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n\n    def test_clear_order_idempotent(self):\n        calc = OrderCalculator()\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n\n    def test_list_items_unique(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.add_item(\"banana\", 2.0)\n        self.assertCountEqual(calc.list_items(), [\"apple\", \"banana\"])\n\n    def test_list_items_duplicates(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.add_item(\"apple\", 1.0)\n        self.assertCountEqual(calc.list_items(), [\"apple\"])\n\n    def test_list_items_empty(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.list_items(), [])\n\n    def test_is_empty_new_order(self):\n        calc = OrderCalculator()\n        self.assertTrue(calc.is_empty())\n\n    def test_is_empty_after_add(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        self.assertFalse(calc.is_empty())\n\n    def test_is_empty_after_clear(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())",
        "total_response_time": 116.02470517158508,
        "strategy": "chain_of_thought_prompting",
        "context_type": "full_context"
      }
    },
    "analysis": {
      "compilation": {
        "compilation_success": true,
        "execution_success": true,
        "tests_run": 57,
        "tests_passed": 57,
        "tests_failed": 0,
        "test_errors": [],
        "compilation_errors": []
      },
      "coverage": {
        "statements": 93,
        "missing": 1,
        "coverage_percent": 56,
        "branch_coverage_percent": 0,
        "partial_coverage": 0
      },
      "mutation": {
        "total_mutants": 0,
        "killed": 0,
        "survived": 0,
        "timeout": 0,
        "suspicious": 0,
        "skipped": 0,
        "mutation_score": 0.0
      },
      "scenarios": {
        "total_test_methods": 57,
        "covered_scenarios": {
          "init_scenarios": 8,
          "add_item_scenarios": 11,
          "remove_item_scenarios": 2,
          "get_subtotal_scenarios": 4,
          "apply_discount_scenarios": 11,
          "calculate_shipping_scenarios": 4,
          "calculate_tax_scenarios": 4,
          "calculate_total_scenarios": 1,
          "total_items_scenarios": 2,
          "list_items_scenarios": 3,
          "is_empty_scenarios": 3,
          "clear_order_scenarios": 2,
          "corner_cases": 31,
          "performance_tests": 0,
          "precision_tests": 0
        },
        "quality_metrics": {
          "has_setup_teardown": false,
          "uses_assertions": 69,
          "tests_with_multiple_assertions": 6,
          "uses_context_managers": 26,
          "has_edge_case_testing": false,
          "has_error_testing": 26,
          "average_test_length": 5.175438596491228
        },
        "scenarios_file_found": true,
        "total_defined_scenarios": 54
      },
      "summary": {
        "model": "gpt-o4-mini-high",
        "strategy": "chain_of_thought_prompting",
        "context_type": "full_context",
        "timestamp": "2025-07-04T01:10:19.249652",
        "response_time": 116.02470517158508,
        "compilation_success_rate": 100,
        "execution_success_rate": 100,
        "tests_generated": 57,
        "tests_passed": 57,
        "tests_failed": 0,
        "test_success_rate": 100.0,
        "statement_coverage": 56,
        "branch_coverage": 0,
        "missing_statements": 1,
        "total_statements": 93,
        "mutation_score": 0.0,
        "mutants_killed": 0,
        "mutants_survived": 0,
        "total_mutants": 0,
        "total_test_methods": 57,
        "covered_scenarios_count": 86,
        "total_defined_scenarios": 54,
        "scenario_coverage_rate": 159.3,
        "total_assertions": 69,
        "tests_with_error_handling": 26,
        "average_test_length": 5.2
      }
    }
  }
]