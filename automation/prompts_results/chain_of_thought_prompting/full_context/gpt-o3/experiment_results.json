{
  "model": "o3",
  "strategy": "chain_of_thought_prompting",
  "context_type": "full_context",
  "timestamp": "2025-07-03T01:10:29.278837",
  "response_time": 137.94447588920593,
  "test_file": "prompts_results\\chain_of_thought_prompting\\full_context\\gpt-o3\\tests.py",
  "raw_results": {
    "responses": [
      {
        "step": 1,
        "prompt": "You are a software testing assistant. Your task is to generate a set of unit tests for a Python class provided below.\n\nThe tests should:\n- use the `unittest` framework,\n- cover all public methods,\n- test typical usage as well as edge cases, invalid inputs, and exceptions,\n- be clear, atomic, and minimal.\n\nYou will now analyze the class to prepare relevant test cases.\nDo not write test code yet.\n\nBelow is the full implementation of the class:\n\n```python\nfrom typing import TypedDict, List\n\nclass Item(TypedDict):\n    \"\"\"\n    Represents a single product entry in the order.\n\n:key name: The name of the product.\n    :key price: The price per unit of the product.\n    :key quantity: The number of units of the product.\n    \"\"\"\n    name: str\n    price: float\n    quantity: int\n\nclass OrderCalculator:\n    def __init__(self, tax_rate=0.23, free_shipping_threshold=100.0, shipping_cost=10.0):\n        \"\"\"\n        Initializes a new OrderCalculator instance.\n        Initializes an empty list of items (each represented as a TypedDict 'Item')\n        and stores the configured tax and shipping parameters.\n\n:param tax_rate: The percentage of tax applied to the final amount, expressed as a float between 0.0 and 1.0 (default is 0.23 for 23%).\n        :param free_shipping_threshold: The minimum order value (after discount) that qualifies for free shipping (default is 100.0).\n        :param shipping_cost: The cost of shipping applied if the order does not meet the free shipping threshold (default is 10.0).\n\n:raises ValueError:\n            - If tax_rate is not in the range [0.0, 1.0].\n            - If free_shipping_threshold is negative.\n            - If shipping_cost is negative.\n        :raises TypeError: If any parameter is of incorrect type.\n        \"\"\"\n        if not isinstance(tax_rate, (float, int)):\n            raise TypeError(\"Tax rate must be a float or int.\")\n        if not isinstance(free_shipping_threshold, (float, int)):\n            raise TypeError(\"Free shipping threshold must be a float or int.\")\n        if not isinstance(shipping_cost, (float, int)):\n            raise TypeError(\"Shipping cost must be a float or int.\")\n        if not 0.0 <= tax_rate <= 1.0:\n            raise ValueError(\"Tax rate must be between 0.0 and 1.0.\")\n        if free_shipping_threshold < 0.0:\n            raise ValueError(\"Free shipping threshold cannot be negative.\")\n        if shipping_cost < 0.0:\n            raise ValueError(\"Shipping cost cannot be negative.\")\n\nself.items: List[Item] = []\n        self.tax_rate = tax_rate\n        self.free_shipping_threshold = free_shipping_threshold\n        self.shipping_cost = shipping_cost\n\ndef add_item(self, name: str, price: float, quantity: int = 1):\n        \"\"\"\n        Add an item to the order.\n\nIf an item with the same name and price already exists, its quantity is increased.\n\n:param name: the name of the item\n        :param price: the price of the item\n        :param quantity: the quantity of the item (default is 1)\n        :raises ValueError: If name is empty, price <= 0, quantity < 1, or item with same name but different price exists.\n        :raises TypeError: If inputs are of incorrect types.\n        \"\"\"\n        if not isinstance(name, str):\n            raise TypeError(\"Item name must be a string.\")\n        if not isinstance(price, (float, int)):\n            raise TypeError(\"Price must be a number.\")\n        if not isinstance(quantity, int):\n            raise TypeError(\"Quantity must be an integer.\")\n        if not name:\n            raise ValueError(\"Item name cannot be empty.\")\n        if quantity < 1:\n            raise ValueError(\"Quantity must be at least 1.\")\n        if price <= 0:\n            raise ValueError(\"Price must be greater than 0.\")\n\nfor item in self.items:\n            if item[\"name\"] == name:\n                if item[\"price\"] != price:\n                    raise ValueError(\"Item with the same name but different price already exists.\")\n                item[\"quantity\"] += quantity\n                return\n\nself.items.append({\n            \"name\": name,\n            \"price\": price,\n            \"quantity\": quantity\n        })\n\ndef remove_item(self, name: str):\n        \"\"\"\n        Removes an item from the order.\n\n:param name: The name of the item to remove.\n        :raises ValueError: If no item with the given name exists in the order.\n        :raises TypeError: If name is not a string.\n        \"\"\"\n        if not isinstance(name, str):\n            raise TypeError(\"Item name must be a string.\")\n        if not any(item[\"name\"] == name for item in self.items):\n            raise ValueError(f\"Item with name '{name}' does not exist in the order.\")\n\nself.items = [item for item in self.items if item[\"name\"] != name]\n\ndef get_subtotal(self) -> float:\n        \"\"\"\n        Calculates the subtotal (sum of item prices times their quantities) for all items in the order.\n\n:return: The subtotal as a float.\n        :raises ValueError: If the order is empty.\n        \"\"\"\n        if not self.items:\n            raise ValueError(\"Cannot calculate subtotal on empty order.\")\n        return sum(item[\"price\"] * item[\"quantity\"] for item in self.items)\n\ndef apply_discount(self, subtotal: float, discount: float) -> float:\n        \"\"\"\n        Applies a percentage discount to the given subtotal.\n\n:param subtotal: the subtotal amount (must be >= 0)\n        :param discount: the discount rate as a float between 0.0 and 1.0 (e.g. 0.2 = 20%).\n        :return: The discounted subtotal.\n        :raises ValueError: If subtotal < 0 or discount is outside the [0.0, 1.0] range.\n        :raises TypeError: If inputs are of incorrect types.\n        \"\"\"\n        if not isinstance(subtotal, (float, int)):\n            raise TypeError(\"Subtotal must be a number.\")\n        if not isinstance(discount, (float, int)):\n            raise TypeError(\"Discount must be a number.\")\n        if not 0.0 <= discount <= 1.0:\n            raise ValueError(\"Discount must be between 0.0 and 1.0.\")\n        if subtotal < 0.0:\n            raise ValueError(\"Cannot apply discount on negative subtotal.\")\n        return subtotal * (1 - discount)\n\ndef calculate_shipping(self, discounted_subtotal: float) -> float:\n        \"\"\"\n        Calculates the shipping cost based on the discounted subtotal.\n\nIf the discounted subtotal >= free shipping threshold shipping is free (0.0).\n        Otherwise, the standard shipping cost is applied.\n\n:param discounted_subtotal: The subtotal amount after applying discount (must be >= 0.0).\n        :return: The shipping cost as a float (0.0 or self.shipping_cost).\n        :raises TypeError: If input is not a number.\n        \"\"\"\n        if not isinstance(discounted_subtotal, (float, int)):\n            raise TypeError(\"Discounted subtotal must be a number.\")\n        if discounted_subtotal >= self.free_shipping_threshold:\n            return 0.0\n        return self.shipping_cost\n\ndef calculate_tax(self, amount: float) -> float:\n        \"\"\"\n        Calculates the tax based on the provided amount using the configured tax rate.\n\n:param amount: The amount on which to calculate the tax (must be >= 0.0).\n        :return: The tax as a float.\n        :raises ValueError: If the amount is negative.\n        :raises TypeError: If input is not a number.\n        \"\"\"\n        if not isinstance(amount, (float, int)):\n            raise TypeError(\"Amount must be a number.\")\n        if amount < 0.0:\n            raise ValueError(\"Cannot calculate tax on negative amount.\")\n        return amount * self.tax_rate\n\ndef calculate_total(self, discount: float = 0.0) -> float:\n        \"\"\"\n        Calculates the total cost of the order after applying discount, shipping, and tax.\n\nThis method performs the following steps:\n        1. Calculates the subtotal from all items.\n        2. Applies the given discount.\n        3. Adds shipping cost if necessary.\n        4. Calculates tax on the discounted subtotal + shipping.\n\n:param discount: Discount rate between 0.0 and 1.0 (e.g. 0.2 = 20%).\n        :return: The final total as a float.\n        :raises ValueError:\n            - If the subtotal is negative.\n            - If the discount is invalid.\n            - If the order is empty.\n        :raises TypeError: If input is not a number.\n        \"\"\"\n        if not isinstance(discount, (float, int)):\n            raise TypeError(\"Discount must be a number.\")\n\nsubtotal = self.get_subtotal()\n        if subtotal < 0.0:\n            raise ValueError(\"Cannot calculate total on negative subtotal.\")\n        discounted_subtotal = self.apply_discount(subtotal, discount)\n        shipping_cost = self.calculate_shipping(discounted_subtotal)\n        tax = self.calculate_tax(discounted_subtotal + shipping_cost)\n        return discounted_subtotal + shipping_cost + tax\n\ndef total_items(self) -> int:\n        \"\"\"\n        Returns the total quantity of all items in the order.\n\n:return: The sum of the quantities of all items.\n        :return:\n        \"\"\"\n        return sum(item[\"quantity\"] for item in self.items)\n\ndef clear_order(self):\n        \"\"\"\n        Removes all items from the order, resetting it to an empty state.\n        \"\"\"\n        self.items = []\n\ndef list_items(self) -> List[str]:\n        \"\"\"\n        Returns a list of all unique item names currently in the order.\n\n:return: A list of unique item names (no duplicates).\n        \"\"\"\n        return list(set(item[\"name\"] for item in self.items))\n\ndef is_empty(self) -> bool:\n        \"\"\"\n        Checks whether the order is currently empty.\n\n:return: True if no items are in the order, False otherwise.\n        \"\"\"\n        return len(self.items) == 0\n```",
        "response": "Below is a test-design checklist you can use as a blueprint when writing the actual unittest test-case code.\nEach entry is:\npgsql\nKopiuj\nEdytuj\n[Test-function name]  →  Target method(s)\nScenario & intention\nMain assertion(s) / expected exception\nAll tests are atomic (one logical assertion each) and together cover every public method, all normal flows, boundary conditions, and error paths.\n1 Constructor (__init__)\ntest_init_defaults_valid → __init__\nDefault ctor; resulting attributes match defaults and is_empty() is True.\ntest_init_custom_valid → __init__\nNon-default but valid parameters (e.g. tax_rate=0.15, free_shipping_threshold=50, shipping_cost=5).\nAssert fields store the supplied values.\ntest_init_invalid_tax_rate_range → __init__\ntax_rate outside [0.0,1.0] (e.g. 1.2) ⇒ ValueError.\ntest_init_invalid_negative_threshold → __init__\nfree_shipping_threshold=-1 ⇒ ValueError.\ntest_init_invalid_negative_shipping_cost → __init__\nshipping_cost=-0.01 ⇒ ValueError.\ntest_init_type_error_params → __init__\nPass a string for any numeric arg (e.g. '0.2') ⇒ TypeError.\n2 Item addition (add_item)\ntest_add_item_fresh → add_item\nAdd a new item and assert contents of items, total_items()==quantity, list_items()==[name].\ntest_add_item_duplicate_same_price_increments → add_item\nAdd identical name+price twice; quantity should cumulate.\ntest_add_item_duplicate_different_price_error → add_item\nSecond add with same name but different price ⇒ ValueError.\ntest_add_item_invalid_empty_name → add_item\nEmpty string name ⇒ ValueError.\ntest_add_item_invalid_price_nonpositive → add_item\nPrice ≤ 0 ⇒ ValueError.\ntest_add_item_invalid_quantity_less_than_one → add_item\nQuantity 0 ⇒ ValueError.\ntest_add_item_type_errors → add_item\nNon-str name or non-int quantity or non-numeric price ⇒ TypeError (three separate atomic tests).\n3 Item removal (remove_item)\ntest_remove_item_existing → remove_item\nRemove an existing item; afterwards it’s not in items and total_items() decreased.\ntest_remove_item_nonexistent_error → remove_item\nRemoving unknown name ⇒ ValueError.\ntest_remove_item_type_error → remove_item\nNon-str name ⇒ TypeError.\n4 Subtotal (get_subtotal)\ntest_get_subtotal_correct_calculation → get_subtotal\nMultiple items, mixed quantities; assert AlmostEqual to manual sum.\ntest_get_subtotal_empty_order_error → get_subtotal\nOn brand-new calculator ⇒ ValueError.\n5 Discount (apply_discount)\ntest_apply_discount_standard → apply_discount\nTypical (subtotal=100, discount=0.2) ⇒ returns 80.\ntest_apply_discount_zero_discount → apply_discount\nDiscount 0 returns unchanged subtotal.\ntest_apply_discount_full_discount → apply_discount\nDiscount 1 returns 0.\ntest_apply_discount_invalid_discount_range → apply_discount\nDiscount > 1 or < 0 ⇒ ValueError. (two atomic tests)\ntest_apply_discount_negative_subtotal_error → apply_discount\nSubtotal < 0 ⇒ ValueError.\ntest_apply_discount_type_errors → apply_discount\nNon-numeric args ⇒ TypeError (two tests).\n6 Shipping (calculate_shipping)\ntest_calculate_shipping_free_threshold → calculate_shipping\ndiscounted_subtotal == free_shipping_threshold ⇒ 0.\ntest_calculate_shipping_below_threshold → calculate_shipping\nSlightly below threshold ⇒ equals configured shipping_cost.\ntest_calculate_shipping_negative_value → calculate_shipping\nNegative subtotal still treated “below threshold”; returns shipping_cost.\ntest_calculate_shipping_type_error → calculate_shipping\nNon-numeric input ⇒ TypeError.\n7 Tax (calculate_tax)\ntest_calculate_tax_standard → calculate_tax\nKnown amount; assert AlmostEqual.\ntest_calculate_tax_zero_amount → calculate_tax\nAmount 0 returns 0.\ntest_calculate_tax_negative_amount_error → calculate_tax\nAmount < 0 ⇒ ValueError.\ntest_calculate_tax_type_error → calculate_tax\nNon-numeric arg ⇒ TypeError.\n8 Total (calculate_total)\ntest_calculate_total_no_discount_with_shipping → calculate_total\nOrder whose subtotal < threshold; verify result = (subtotal + shipping) * (1+tax_rate).\ntest_calculate_total_with_discount_free_shipping → calculate_total\nDiscount drops subtotal but still ≥ threshold → free shipping, correct total computed.\ntest_calculate_total_full_discount_only_tax_on_shipping → calculate_total\nDiscount 1 causes product subtotal 0; only shipping + tax on shipping.\ntest_calculate_total_empty_order_error → calculate_total\nBrand-new calculator ⇒ ValueError (propagated from get_subtotal).\ntest_calculate_total_invalid_discount_range → calculate_total\nDiscount > 1 ⇒ ValueError.\ntest_calculate_total_type_error_discount → calculate_total\nNon-numeric discount ⇒ TypeError.\n9 Utility helpers\ntest_total_items_counts_quantities → total_items\nEnsure sum equals individual quantities.\ntest_clear_order_empties_state → clear_order\nAfter calling, is_empty() True and items == [].\ntest_list_items_unique_names → list_items\nAdd duplicate names (same item) and distinct names; returned list has no duplicates.\ntest_is_empty_flag → is_empty\nConfirm transition False→True after clearing.\nNotes for implementation\nUse assertAlmostEqual for float results; two decimal places is fine unless more precision needed.\nKeep one assertion per test to stay atomic.\nUse setUp() to provide a fresh OrderCalculator where convenient, but still construct explicitly in constructor tests.\nWhere an exception is expected, wrap with with self.assertRaises(ExpectedException):.\nStick to small numbers for clarity (e.g. prices 10.0, 20.0).\nWhen building integrated-path totals, compute the expected result manually inside the test for readability.",
        "response_time": 45.577107191085815
      },
      {
        "step": 2,
        "prompt": "Based on the class above, list all relevant unit test scenarios you would create.\nEach scenario should describe:\n- the method being tested,\n- the type of case (e.g. normal use, invalid input, exception),\n- a short explanation of the intent.\nList as many scenarios as you can think of, covering all aspects of the class.\nDo not write test code yet.\n\n",
        "response": "Comprehensive unit-test scenario catalogue for OrderCalculator\nFor every public method I list (1) the scenario name, (2) case type, and (3) its intent.\nUse these as a checklist before writing actual unittest code.\n1 __init__\nDefault-params happy path – Normal – ensure defaults are stored and order starts empty.\nCustom-params happy path – Normal – verify non-default values persist.\nTax rate < 0 – Invalid value – expect ValueError.\nTax rate > 1 – Invalid value – expect ValueError.\nFree-shipping threshold negative – Invalid value – expect ValueError.\nShipping cost negative – Invalid value – expect ValueError.\nTax rate wrong type – Type error – pass string or list, expect TypeError.\nThreshold wrong type – Type error – expect TypeError.\nShipping cost wrong type – Type error – expect TypeError.\n2 add_item\nAdd brand-new item – Normal – item appears, quantity correct.\nAdd same item again (same price) – Normal – quantity increments, no duplicate entry.\nAdd item same name, diff price – Invalid value – expect ValueError.\nName empty string – Invalid value – expect ValueError.\nPrice zero – Invalid value – expect ValueError.\nPrice negative – Invalid value – expect ValueError.\nQuantity zero – Invalid value – expect ValueError.\nQuantity negative – Invalid value – expect ValueError.\nName wrong type – Type error – e.g. None, expect TypeError.\nPrice wrong type – Type error – e.g. \"9.99\", expect TypeError.\nQuantity wrong type – Type error – e.g. 1.5, expect TypeError.\n3 remove_item\nRemove existing item – Normal – item gone, totals adjust.\nRemove non-existent item – Invalid value – expect ValueError.\nName wrong type – Type error – expect TypeError.\n4 get_subtotal\nSubtotal with multiple items – Normal – verify arithmetic.\nSubtotal with empty order – Invalid state – expect ValueError.\n5 apply_discount\nTypical discount (20 %) – Normal – returns expected amount.\nZero discount – Boundary – returns unchanged subtotal.\nFull discount (1.0) – Boundary – returns 0.\nDiscount < 0 – Invalid value – expect ValueError.\nDiscount > 1 – Invalid value – expect ValueError.\nSubtotal negative – Invalid value – expect ValueError.\nSubtotal wrong type – Type error – expect TypeError.\nDiscount wrong type – Type error – expect TypeError.\n6 calculate_shipping\nSubtotal above threshold – Normal – returns 0.\nSubtotal equal to threshold – Boundary – returns 0.\nSubtotal just below threshold – Boundary – returns configured shipping_cost.\nSubtotal far below threshold (e.g. 0) – Normal – returns shipping_cost.\nInput wrong type – Type error – expect TypeError.\n7 calculate_tax\nTypical amount – Normal – tax = amount × tax_rate.\nAmount zero – Boundary – returns 0.\nAmount negative – Invalid value – expect ValueError.\nAmount wrong type – Type error – expect TypeError.\n8 calculate_total\n(Relies on several helpers; craft setups accordingly.)\nNo discount, needs shipping – Normal – (subtotal + shipping) * (1+tax_rate) verified.\nDiscount but still free shipping – Normal – discount lowers price yet ≥ threshold; shipping 0.\nDiscount triggers shipping cost – Normal – discounted subtotal < threshold; shipping added.\nFull discount (1.0) – pay only shipping + tax on shipping – Boundary – result equals shipping + tax_on_shipping.\nEmpty order – Invalid state – expects ValueError via get_subtotal.\nDiscount < 0 or > 1 – Invalid value – expect ValueError.\nDiscount wrong type – Type error – expect TypeError.\n9 total_items\nCounts quantities accurately – Normal – after several additions.\nZero when empty – Boundary – returns 0 on fresh calculator.\n10 clear_order\nClears items list – Normal – after call, is_empty() true and items empty.\n11 list_items\nUnique names only – Normal – duplicate additions appear once in list.\nEmpty list when order empty – Boundary – returns [].\n12 is_empty\nTrue on new instance – Normal.\nFalse after adding item – State change.\nTrue again after clearing – State change back.\nCross-method integration (optional higher-level smoke tests)\nAdd–remove–total flow – validate that adding and then removing the last item returns system to original empty, raising on subtotal.\nComplex order end-to-end – multiple items, discount, border-line shipping, verify final total matches manual calc.\nThese scenarios collectively exercise every branch, edge, and failure mode of the public API.",
        "response_time": 32.81166386604309
      },
      {
        "step": 3,
        "prompt": "Now, based on the test scenarios you just listed, generate the complete Python unit test suite using the `unittest` framework.\n\nFollow these rules:\n- Include one test method per scenario.\n- Use meaningful test method names.\n- Do not include comments or explanations.\n- Output a valid `.py` file containing only the test class.\n\nThe output must contain only Python code.",
        "response": "python\nKopiuj\nEdytuj\nimport unittest\nfrom order_calculator import OrderCalculator\n\n\nclass TestOrderCalculator(unittest.TestCase):\n    def setUp(self):\n        self.calc = OrderCalculator()\n\n    # __init__\n    def test_init_defaults_valid(self):\n        self.assertTrue(self.calc.is_empty())\n\n    def test_init_custom_valid(self):\n        calc = OrderCalculator(tax_rate=0.15, free_shipping_threshold=50, shipping_cost=5)\n        self.assertEqual((calc.tax_rate, calc.free_shipping_threshold, calc.shipping_cost), (0.15, 50, 5))\n\n    def test_init_invalid_tax_rate_below_zero(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=-0.01)\n\n    def test_init_invalid_tax_rate_above_one(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=1.01)\n\n    def test_init_invalid_negative_threshold(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(free_shipping_threshold=-1)\n\n    def test_init_invalid_negative_shipping(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(shipping_cost=-0.01)\n\n    def test_init_invalid_tax_rate_type(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(tax_rate=\"0.2\")\n\n    def test_init_invalid_threshold_type(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(free_shipping_threshold=\"100\")\n\n    def test_init_invalid_shipping_type(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(shipping_cost=\"10\")\n\n    # add_item\n    def test_add_item_fresh(self):\n        self.calc.add_item(\"Book\", 10.0, 2)\n        self.assertEqual(self.calc.total_items(), 2)\n\n    def test_add_item_duplicate_same_price_increments(self):\n        self.calc.add_item(\"Pen\", 2.0, 1)\n        self.calc.add_item(\"Pen\", 2.0, 3)\n        self.assertEqual(self.calc.total_items(), 4)\n\n    def test_add_item_duplicate_different_price_error(self):\n        self.calc.add_item(\"Notebook\", 5.0)\n        with self.assertRaises(ValueError):\n            self.calc.add_item(\"Notebook\", 6.0)\n\n    def test_add_item_empty_name_error(self):\n        with self.assertRaises(ValueError):\n            self.calc.add_item(\"\", 1.0)\n\n    def test_add_item_price_zero_error(self):\n        with self.assertRaises(ValueError):\n            self.calc.add_item(\"Eraser\", 0.0)\n\n    def test_add_item_price_negative_error(self):\n        with self.assertRaises(ValueError):\n            self.calc.add_item(\"Eraser\", -1.0)\n\n    def test_add_item_quantity_zero_error(self):\n        with self.assertRaises(ValueError):\n            self.calc.add_item(\"Stapler\", 3.0, 0)\n\n    def test_add_item_quantity_negative_error(self):\n        with self.assertRaises(ValueError):\n            self.calc.add_item(\"Stapler\", 3.0, -1)\n\n    def test_add_item_name_type_error(self):\n        with self.assertRaises(TypeError):\n            self.calc.add_item(123, 1.0)\n\n    def test_add_item_price_type_error(self):\n        with self.assertRaises(TypeError):\n            self.calc.add_item(\"Glue\", \"1.0\")\n\n    def test_add_item_quantity_type_error(self):\n        with self.assertRaises(TypeError):\n            self.calc.add_item(\"Glue\", 1.0, 1.5)\n\n    # remove_item\n    def test_remove_item_existing(self):\n        self.calc.add_item(\"Clip\", 1.0)\n        self.calc.remove_item(\"Clip\")\n        self.assertTrue(self.calc.is_empty())\n\n    def test_remove_item_nonexistent_error(self):\n        with self.assertRaises(ValueError):\n            self.calc.remove_item(\"Ghost\")\n\n    def test_remove_item_name_type_error(self):\n        with self.assertRaises(TypeError):\n            self.calc.remove_item(123)\n\n    # get_subtotal\n    def test_get_subtotal_multiple_items(self):\n        self.calc.add_item(\"A\", 2.0, 2)\n        self.calc.add_item(\"B\", 3.0, 1)\n        self.assertAlmostEqual(self.calc.get_subtotal(), 7.0, places=2)\n\n    def test_get_subtotal_empty_error(self):\n        with self.assertRaises(ValueError):\n            self.calc.get_subtotal()\n\n    # apply_discount\n    def test_apply_discount_standard(self):\n        self.assertAlmostEqual(self.calc.apply_discount(100, 0.2), 80.0, places=2)\n\n    def test_apply_discount_zero(self):\n        self.assertAlmostEqual(self.calc.apply_discount(50, 0.0), 50.0, places=2)\n\n    def test_apply_discount_full(self):\n        self.assertAlmostEqual(self.calc.apply_discount(50, 1.0), 0.0, places=2)\n\n    def test_apply_discount_discount_negative_error(self):\n        with self.assertRaises(ValueError):\n            self.calc.apply_discount(50, -0.1)\n\n    def test_apply_discount_discount_above_one_error(self):\n        with self.assertRaises(ValueError):\n            self.calc.apply_discount(50, 1.1)\n\n    def test_apply_discount_subtotal_negative_error(self):\n        with self.assertRaises(ValueError):\n            self.calc.apply_discount(-10, 0.2)\n\n    def test_apply_discount_subtotal_type_error(self):\n        with self.assertRaises(TypeError):\n            self.calc.apply_discount(\"50\", 0.2)\n\n    def test_apply_discount_discount_type_error(self):\n        with self.assertRaises(TypeError):\n            self.calc.apply_discount(50, \"0.2\")\n\n    # calculate_shipping\n    def test_calculate_shipping_above_threshold(self):\n        self.assertEqual(self.calc.calculate_shipping(150), 0.0)\n\n    def test_calculate_shipping_equal_threshold(self):\n        self.assertEqual(self.calc.calculate_shipping(100), 0.0)\n\n    def test_calculate_shipping_below_threshold(self):\n        self.assertEqual(self.calc.calculate_shipping(99.99), 10.0)\n\n    def test_calculate_shipping_zero(self):\n        self.assertEqual(self.calc.calculate_shipping(0), 10.0)\n\n    def test_calculate_shipping_type_error(self):\n        with self.assertRaises(TypeError):\n            self.calc.calculate_shipping(\"50\")\n\n    # calculate_tax\n    def test_calculate_tax_standard(self):\n        self.assertAlmostEqual(self.calc.calculate_tax(100), 23.0, places=2)\n\n    def test_calculate_tax_zero(self):\n        self.assertAlmostEqual(self.calc.calculate_tax(0), 0.0, places=2)\n\n    def test_calculate_tax_negative_error(self):\n        with self.assertRaises(ValueError):\n            self.calc.calculate_tax(-1)\n\n    def test_calculate_tax_type_error(self):\n        with self.assertRaises(TypeError):\n            self.calc.calculate_tax(\"10\")\n\n    # calculate_total\n    def test_calculate_total_no_discount_with_shipping(self):\n        self.calc.add_item(\"X\", 40, 2)\n        total = self.calc.calculate_total()\n        expected = 90 + 20.7\n        self.assertAlmostEqual(total, expected, places=2)\n\n    def test_calculate_total_discount_free_shipping(self):\n        self.calc.add_item(\"Y\", 60, 2)\n        total = self.calc.calculate_total(0.1)\n        discounted = 120 * 0.9\n        expected = discounted + discounted * 0.23\n        self.assertAlmostEqual(total, expected, places=2)\n\n    def test_calculate_total_discount_triggers_shipping(self):\n        self.calc.add_item(\"Z\", 60, 2)\n        total = self.calc.calculate_total(0.3)\n        discounted = 120 * 0.7\n        expected = discounted + 10 + (discounted + 10) * 0.23\n        self.assertAlmostEqual(total, expected, places=2)\n\n    def test_calculate_total_full_discount(self):\n        self.calc.add_item(\"W\", 50, 1)\n        total = self.calc.calculate_total(1)\n        expected = 10 + 10 * 0.23\n        self.assertAlmostEqual(total, expected, places=2)\n\n    def test_calculate_total_empty_error(self):\n        with self.assertRaises(ValueError):\n            self.calc.calculate_total()\n\n    def test_calculate_total_discount_negative_error(self):\n        self.calc.add_item(\"A\", 10)\n        with self.assertRaises(ValueError):\n            self.calc.calculate_total(-0.1)\n\n    def test_calculate_total_discount_above_one_error(self):\n        self.calc.add_item(\"A\", 10)\n        with self.assertRaises(ValueError):\n            self.calc.calculate_total(1.1)\n\n    def test_calculate_total_discount_type_error(self):\n        self.calc.add_item(\"A\", 10)\n        with self.assertRaises(TypeError):\n            self.calc.calculate_total(\"0.2\")\n\n    # total_items\n    def test_total_items_counts(self):\n        self.calc.add_item(\"A\", 1, 3)\n        self.calc.add_item(\"B\", 2, 2)\n        self.assertEqual(self.calc.total_items(), 5)\n\n    def test_total_items_zero_when_empty(self):\n        self.assertEqual(self.calc.total_items(), 0)\n\n    # clear_order\n    def test_clear_order(self):\n        self.calc.add_item(\"A\", 1)\n        self.calc.clear_order()\n        self.assertTrue(self.calc.is_empty())\n\n    # list_items\n    def test_list_items_unique(self):\n        self.calc.add_item(\"A\", 1)\n        self.calc.add_item(\"A\", 1)\n        self.calc.add_item(\"B\", 1)\n        self.assertSetEqual(set(self.calc.list_items()), {\"A\", \"B\"})\n\n    def test_list_items_empty(self):\n        self.assertEqual(self.calc.list_items(), [])\n\n    # is_empty\n    def test_is_empty_true_on_new(self):\n        self.assertTrue(self.calc.is_empty())\n\n    def test_is_empty_false_after_add(self):\n        self.calc.add_item(\"A\", 1)\n        self.assertFalse(self.calc.is_empty())\n\n    def test_is_empty_true_after_clear(self):\n        self.calc.add_item(\"A\", 1)\n        self.calc.clear_order()\n        self.assertTrue(self.calc.is_empty())\n\n    # integration\n    def test_add_remove_total_flow(self):\n        self.calc.add_item(\"A\", 10)\n        self.calc.remove_item(\"A\")\n        with self.assertRaises(ValueError):\n            self.calc.get_subtotal()\n\n    def test_complex_order_total(self):\n        self.calc.add_item(\"A\", 30, 2)\n        self.calc.add_item(\"B\", 20, 1)\n        subtotal = 80\n        discounted = subtotal * 0.85\n        shipping = 0\n        tax = discounted * 0.23\n        expected = discounted + tax\n        total = self.calc.calculate_total(0.15)\n        self.assertAlmostEqual(total, expected, places=2)\n\n\nif __name__ == \"__main__\":\n    unittest.main()",
        "response_time": 59.555704832077026
      }
    ],
    "final_response": "python\nKopiuj\nEdytuj\nimport unittest\nfrom order_calculator import OrderCalculator\n\n\nclass TestOrderCalculator(unittest.TestCase):\n    def setUp(self):\n        self.calc = OrderCalculator()\n\n    # __init__\n    def test_init_defaults_valid(self):\n        self.assertTrue(self.calc.is_empty())\n\n    def test_init_custom_valid(self):\n        calc = OrderCalculator(tax_rate=0.15, free_shipping_threshold=50, shipping_cost=5)\n        self.assertEqual((calc.tax_rate, calc.free_shipping_threshold, calc.shipping_cost), (0.15, 50, 5))\n\n    def test_init_invalid_tax_rate_below_zero(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=-0.01)\n\n    def test_init_invalid_tax_rate_above_one(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=1.01)\n\n    def test_init_invalid_negative_threshold(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(free_shipping_threshold=-1)\n\n    def test_init_invalid_negative_shipping(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(shipping_cost=-0.01)\n\n    def test_init_invalid_tax_rate_type(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(tax_rate=\"0.2\")\n\n    def test_init_invalid_threshold_type(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(free_shipping_threshold=\"100\")\n\n    def test_init_invalid_shipping_type(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(shipping_cost=\"10\")\n\n    # add_item\n    def test_add_item_fresh(self):\n        self.calc.add_item(\"Book\", 10.0, 2)\n        self.assertEqual(self.calc.total_items(), 2)\n\n    def test_add_item_duplicate_same_price_increments(self):\n        self.calc.add_item(\"Pen\", 2.0, 1)\n        self.calc.add_item(\"Pen\", 2.0, 3)\n        self.assertEqual(self.calc.total_items(), 4)\n\n    def test_add_item_duplicate_different_price_error(self):\n        self.calc.add_item(\"Notebook\", 5.0)\n        with self.assertRaises(ValueError):\n            self.calc.add_item(\"Notebook\", 6.0)\n\n    def test_add_item_empty_name_error(self):\n        with self.assertRaises(ValueError):\n            self.calc.add_item(\"\", 1.0)\n\n    def test_add_item_price_zero_error(self):\n        with self.assertRaises(ValueError):\n            self.calc.add_item(\"Eraser\", 0.0)\n\n    def test_add_item_price_negative_error(self):\n        with self.assertRaises(ValueError):\n            self.calc.add_item(\"Eraser\", -1.0)\n\n    def test_add_item_quantity_zero_error(self):\n        with self.assertRaises(ValueError):\n            self.calc.add_item(\"Stapler\", 3.0, 0)\n\n    def test_add_item_quantity_negative_error(self):\n        with self.assertRaises(ValueError):\n            self.calc.add_item(\"Stapler\", 3.0, -1)\n\n    def test_add_item_name_type_error(self):\n        with self.assertRaises(TypeError):\n            self.calc.add_item(123, 1.0)\n\n    def test_add_item_price_type_error(self):\n        with self.assertRaises(TypeError):\n            self.calc.add_item(\"Glue\", \"1.0\")\n\n    def test_add_item_quantity_type_error(self):\n        with self.assertRaises(TypeError):\n            self.calc.add_item(\"Glue\", 1.0, 1.5)\n\n    # remove_item\n    def test_remove_item_existing(self):\n        self.calc.add_item(\"Clip\", 1.0)\n        self.calc.remove_item(\"Clip\")\n        self.assertTrue(self.calc.is_empty())\n\n    def test_remove_item_nonexistent_error(self):\n        with self.assertRaises(ValueError):\n            self.calc.remove_item(\"Ghost\")\n\n    def test_remove_item_name_type_error(self):\n        with self.assertRaises(TypeError):\n            self.calc.remove_item(123)\n\n    # get_subtotal\n    def test_get_subtotal_multiple_items(self):\n        self.calc.add_item(\"A\", 2.0, 2)\n        self.calc.add_item(\"B\", 3.0, 1)\n        self.assertAlmostEqual(self.calc.get_subtotal(), 7.0, places=2)\n\n    def test_get_subtotal_empty_error(self):\n        with self.assertRaises(ValueError):\n            self.calc.get_subtotal()\n\n    # apply_discount\n    def test_apply_discount_standard(self):\n        self.assertAlmostEqual(self.calc.apply_discount(100, 0.2), 80.0, places=2)\n\n    def test_apply_discount_zero(self):\n        self.assertAlmostEqual(self.calc.apply_discount(50, 0.0), 50.0, places=2)\n\n    def test_apply_discount_full(self):\n        self.assertAlmostEqual(self.calc.apply_discount(50, 1.0), 0.0, places=2)\n\n    def test_apply_discount_discount_negative_error(self):\n        with self.assertRaises(ValueError):\n            self.calc.apply_discount(50, -0.1)\n\n    def test_apply_discount_discount_above_one_error(self):\n        with self.assertRaises(ValueError):\n            self.calc.apply_discount(50, 1.1)\n\n    def test_apply_discount_subtotal_negative_error(self):\n        with self.assertRaises(ValueError):\n            self.calc.apply_discount(-10, 0.2)\n\n    def test_apply_discount_subtotal_type_error(self):\n        with self.assertRaises(TypeError):\n            self.calc.apply_discount(\"50\", 0.2)\n\n    def test_apply_discount_discount_type_error(self):\n        with self.assertRaises(TypeError):\n            self.calc.apply_discount(50, \"0.2\")\n\n    # calculate_shipping\n    def test_calculate_shipping_above_threshold(self):\n        self.assertEqual(self.calc.calculate_shipping(150), 0.0)\n\n    def test_calculate_shipping_equal_threshold(self):\n        self.assertEqual(self.calc.calculate_shipping(100), 0.0)\n\n    def test_calculate_shipping_below_threshold(self):\n        self.assertEqual(self.calc.calculate_shipping(99.99), 10.0)\n\n    def test_calculate_shipping_zero(self):\n        self.assertEqual(self.calc.calculate_shipping(0), 10.0)\n\n    def test_calculate_shipping_type_error(self):\n        with self.assertRaises(TypeError):\n            self.calc.calculate_shipping(\"50\")\n\n    # calculate_tax\n    def test_calculate_tax_standard(self):\n        self.assertAlmostEqual(self.calc.calculate_tax(100), 23.0, places=2)\n\n    def test_calculate_tax_zero(self):\n        self.assertAlmostEqual(self.calc.calculate_tax(0), 0.0, places=2)\n\n    def test_calculate_tax_negative_error(self):\n        with self.assertRaises(ValueError):\n            self.calc.calculate_tax(-1)\n\n    def test_calculate_tax_type_error(self):\n        with self.assertRaises(TypeError):\n            self.calc.calculate_tax(\"10\")\n\n    # calculate_total\n    def test_calculate_total_no_discount_with_shipping(self):\n        self.calc.add_item(\"X\", 40, 2)\n        total = self.calc.calculate_total()\n        expected = 90 + 20.7\n        self.assertAlmostEqual(total, expected, places=2)\n\n    def test_calculate_total_discount_free_shipping(self):\n        self.calc.add_item(\"Y\", 60, 2)\n        total = self.calc.calculate_total(0.1)\n        discounted = 120 * 0.9\n        expected = discounted + discounted * 0.23\n        self.assertAlmostEqual(total, expected, places=2)\n\n    def test_calculate_total_discount_triggers_shipping(self):\n        self.calc.add_item(\"Z\", 60, 2)\n        total = self.calc.calculate_total(0.3)\n        discounted = 120 * 0.7\n        expected = discounted + 10 + (discounted + 10) * 0.23\n        self.assertAlmostEqual(total, expected, places=2)\n\n    def test_calculate_total_full_discount(self):\n        self.calc.add_item(\"W\", 50, 1)\n        total = self.calc.calculate_total(1)\n        expected = 10 + 10 * 0.23\n        self.assertAlmostEqual(total, expected, places=2)\n\n    def test_calculate_total_empty_error(self):\n        with self.assertRaises(ValueError):\n            self.calc.calculate_total()\n\n    def test_calculate_total_discount_negative_error(self):\n        self.calc.add_item(\"A\", 10)\n        with self.assertRaises(ValueError):\n            self.calc.calculate_total(-0.1)\n\n    def test_calculate_total_discount_above_one_error(self):\n        self.calc.add_item(\"A\", 10)\n        with self.assertRaises(ValueError):\n            self.calc.calculate_total(1.1)\n\n    def test_calculate_total_discount_type_error(self):\n        self.calc.add_item(\"A\", 10)\n        with self.assertRaises(TypeError):\n            self.calc.calculate_total(\"0.2\")\n\n    # total_items\n    def test_total_items_counts(self):\n        self.calc.add_item(\"A\", 1, 3)\n        self.calc.add_item(\"B\", 2, 2)\n        self.assertEqual(self.calc.total_items(), 5)\n\n    def test_total_items_zero_when_empty(self):\n        self.assertEqual(self.calc.total_items(), 0)\n\n    # clear_order\n    def test_clear_order(self):\n        self.calc.add_item(\"A\", 1)\n        self.calc.clear_order()\n        self.assertTrue(self.calc.is_empty())\n\n    # list_items\n    def test_list_items_unique(self):\n        self.calc.add_item(\"A\", 1)\n        self.calc.add_item(\"A\", 1)\n        self.calc.add_item(\"B\", 1)\n        self.assertSetEqual(set(self.calc.list_items()), {\"A\", \"B\"})\n\n    def test_list_items_empty(self):\n        self.assertEqual(self.calc.list_items(), [])\n\n    # is_empty\n    def test_is_empty_true_on_new(self):\n        self.assertTrue(self.calc.is_empty())\n\n    def test_is_empty_false_after_add(self):\n        self.calc.add_item(\"A\", 1)\n        self.assertFalse(self.calc.is_empty())\n\n    def test_is_empty_true_after_clear(self):\n        self.calc.add_item(\"A\", 1)\n        self.calc.clear_order()\n        self.assertTrue(self.calc.is_empty())\n\n    # integration\n    def test_add_remove_total_flow(self):\n        self.calc.add_item(\"A\", 10)\n        self.calc.remove_item(\"A\")\n        with self.assertRaises(ValueError):\n            self.calc.get_subtotal()\n\n    def test_complex_order_total(self):\n        self.calc.add_item(\"A\", 30, 2)\n        self.calc.add_item(\"B\", 20, 1)\n        subtotal = 80\n        discounted = subtotal * 0.85\n        shipping = 0\n        tax = discounted * 0.23\n        expected = discounted + tax\n        total = self.calc.calculate_total(0.15)\n        self.assertAlmostEqual(total, expected, places=2)\n\n\nif __name__ == \"__main__\":\n    unittest.main()",
    "total_response_time": 137.94447588920593,
    "strategy": "chain_of_thought_prompting",
    "context_type": "full_context"
  }
}