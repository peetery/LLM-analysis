{
  "model": "gpt-o4-mini-high",
  "strategy": "chain_of_thought_prompting",
  "context_type": "full_context",
  "timestamp": "2025-07-04T01:10:19.249652",
  "response_time": 116.02470517158508,
  "test_file": "prompts_results\\chain_of_thought_prompting\\full_context\\gpt-o4-mini-high\\tests.py",
  "raw_results": {
    "responses": [
      {
        "step": 1,
        "prompt": "You are a software testing assistant. Your task is to generate a set of unit tests for a Python class provided below.\n\nThe tests should:\n- use the `unittest` framework,\n- cover all public methods,\n- test typical usage as well as edge cases, invalid inputs, and exceptions,\n- be clear, atomic, and minimal.\n\nYou will now analyze the class to prepare relevant test cases.\nDo not write test code yet.\n\nBelow is the full implementation of the class:\n\n```python\nfrom typing import TypedDict, List\n\nclass Item(TypedDict):\n    \"\"\"\n    Represents a single product entry in the order.\n\n:key name: The name of the product.\n    :key price: The price per unit of the product.\n    :key quantity: The number of units of the product.\n    \"\"\"\n    name: str\n    price: float\n    quantity: int\n\nclass OrderCalculator:\n    def __init__(self, tax_rate=0.23, free_shipping_threshold=100.0, shipping_cost=10.0):\n        \"\"\"\n        Initializes a new OrderCalculator instance.\n        Initializes an empty list of items (each represented as a TypedDict 'Item')\n        and stores the configured tax and shipping parameters.\n\n:param tax_rate: The percentage of tax applied to the final amount, expressed as a float between 0.0 and 1.0 (default is 0.23 for 23%).\n        :param free_shipping_threshold: The minimum order value (after discount) that qualifies for free shipping (default is 100.0).\n        :param shipping_cost: The cost of shipping applied if the order does not meet the free shipping threshold (default is 10.0).\n\n:raises ValueError:\n            - If tax_rate is not in the range [0.0, 1.0].\n            - If free_shipping_threshold is negative.\n            - If shipping_cost is negative.\n        :raises TypeError: If any parameter is of incorrect type.\n        \"\"\"\n        if not isinstance(tax_rate, (float, int)):\n            raise TypeError(\"Tax rate must be a float or int.\")\n        if not isinstance(free_shipping_threshold, (float, int)):\n            raise TypeError(\"Free shipping threshold must be a float or int.\")\n        if not isinstance(shipping_cost, (float, int)):\n            raise TypeError(\"Shipping cost must be a float or int.\")\n        if not 0.0 <= tax_rate <= 1.0:\n            raise ValueError(\"Tax rate must be between 0.0 and 1.0.\")\n        if free_shipping_threshold < 0.0:\n            raise ValueError(\"Free shipping threshold cannot be negative.\")\n        if shipping_cost < 0.0:\n            raise ValueError(\"Shipping cost cannot be negative.\")\n\nself.items: List[Item] = []\n        self.tax_rate = tax_rate\n        self.free_shipping_threshold = free_shipping_threshold\n        self.shipping_cost = shipping_cost\n\ndef add_item(self, name: str, price: float, quantity: int = 1):\n        \"\"\"\n        Add an item to the order.\n\nIf an item with the same name and price already exists, its quantity is increased.\n\n:param name: the name of the item\n        :param price: the price of the item\n        :param quantity: the quantity of the item (default is 1)\n        :raises ValueError: If name is empty, price <= 0, quantity < 1, or item with same name but different price exists.\n        :raises TypeError: If inputs are of incorrect types.\n        \"\"\"\n        if not isinstance(name, str):\n            raise TypeError(\"Item name must be a string.\")\n        if not isinstance(price, (float, int)):\n            raise TypeError(\"Price must be a number.\")\n        if not isinstance(quantity, int):\n            raise TypeError(\"Quantity must be an integer.\")\n        if not name:\n            raise ValueError(\"Item name cannot be empty.\")\n        if quantity < 1:\n            raise ValueError(\"Quantity must be at least 1.\")\n        if price <= 0:\n            raise ValueError(\"Price must be greater than 0.\")\n\nfor item in self.items:\n            if item[\"name\"] == name:\n                if item[\"price\"] != price:\n                    raise ValueError(\"Item with the same name but different price already exists.\")\n                item[\"quantity\"] += quantity\n                return\n\nself.items.append({\n            \"name\": name,\n            \"price\": price,\n            \"quantity\": quantity\n        })\n\ndef remove_item(self, name: str):\n        \"\"\"\n        Removes an item from the order.\n\n:param name: The name of the item to remove.\n        :raises ValueError: If no item with the given name exists in the order.\n        :raises TypeError: If name is not a string.\n        \"\"\"\n        if not isinstance(name, str):\n            raise TypeError(\"Item name must be a string.\")\n        if not any(item[\"name\"] == name for item in self.items):\n            raise ValueError(f\"Item with name '{name}' does not exist in the order.\")\n\nself.items = [item for item in self.items if item[\"name\"] != name]\n\ndef get_subtotal(self) -> float:\n        \"\"\"\n        Calculates the subtotal (sum of item prices times their quantities) for all items in the order.\n\n:return: The subtotal as a float.\n        :raises ValueError: If the order is empty.\n        \"\"\"\n        if not self.items:\n            raise ValueError(\"Cannot calculate subtotal on empty order.\")\n        return sum(item[\"price\"] * item[\"quantity\"] for item in self.items)\n\ndef apply_discount(self, subtotal: float, discount: float) -> float:\n        \"\"\"\n        Applies a percentage discount to the given subtotal.\n\n:param subtotal: the subtotal amount (must be >= 0)\n        :param discount: the discount rate as a float between 0.0 and 1.0 (e.g. 0.2 = 20%).\n        :return: The discounted subtotal.\n        :raises ValueError: If subtotal < 0 or discount is outside the [0.0, 1.0] range.\n        :raises TypeError: If inputs are of incorrect types.\n        \"\"\"\n        if not isinstance(subtotal, (float, int)):\n            raise TypeError(\"Subtotal must be a number.\")\n        if not isinstance(discount, (float, int)):\n            raise TypeError(\"Discount must be a number.\")\n        if not 0.0 <= discount <= 1.0:\n            raise ValueError(\"Discount must be between 0.0 and 1.0.\")\n        if subtotal < 0.0:\n            raise ValueError(\"Cannot apply discount on negative subtotal.\")\n        return subtotal * (1 - discount)\n\ndef calculate_shipping(self, discounted_subtotal: float) -> float:\n        \"\"\"\n        Calculates the shipping cost based on the discounted subtotal.\n\nIf the discounted subtotal >= free shipping threshold shipping is free (0.0).\n        Otherwise, the standard shipping cost is applied.\n\n:param discounted_subtotal: The subtotal amount after applying discount (must be >= 0.0).\n        :return: The shipping cost as a float (0.0 or self.shipping_cost).\n        :raises TypeError: If input is not a number.\n        \"\"\"\n        if not isinstance(discounted_subtotal, (float, int)):\n            raise TypeError(\"Discounted subtotal must be a number.\")\n        if discounted_subtotal >= self.free_shipping_threshold:\n            return 0.0\n        return self.shipping_cost\n\ndef calculate_tax(self, amount: float) -> float:\n        \"\"\"\n        Calculates the tax based on the provided amount using the configured tax rate.\n\n:param amount: The amount on which to calculate the tax (must be >= 0.0).\n        :return: The tax as a float.\n        :raises ValueError: If the amount is negative.\n        :raises TypeError: If input is not a number.\n        \"\"\"\n        if not isinstance(amount, (float, int)):\n            raise TypeError(\"Amount must be a number.\")\n        if amount < 0.0:\n            raise ValueError(\"Cannot calculate tax on negative amount.\")\n        return amount * self.tax_rate\n\ndef calculate_total(self, discount: float = 0.0) -> float:\n        \"\"\"\n        Calculates the total cost of the order after applying discount, shipping, and tax.\n\nThis method performs the following steps:\n        1. Calculates the subtotal from all items.\n        2. Applies the given discount.\n        3. Adds shipping cost if necessary.\n        4. Calculates tax on the discounted subtotal + shipping.\n\n:param discount: Discount rate between 0.0 and 1.0 (e.g. 0.2 = 20%).\n        :return: The final total as a float.\n        :raises ValueError:\n            - If the subtotal is negative.\n            - If the discount is invalid.\n            - If the order is empty.\n        :raises TypeError: If input is not a number.\n        \"\"\"\n        if not isinstance(discount, (float, int)):\n            raise TypeError(\"Discount must be a number.\")\n\nsubtotal = self.get_subtotal()\n        if subtotal < 0.0:\n            raise ValueError(\"Cannot calculate total on negative subtotal.\")\n        discounted_subtotal = self.apply_discount(subtotal, discount)\n        shipping_cost = self.calculate_shipping(discounted_subtotal)\n        tax = self.calculate_tax(discounted_subtotal + shipping_cost)\n        return discounted_subtotal + shipping_cost + tax\n\ndef total_items(self) -> int:\n        \"\"\"\n        Returns the total quantity of all items in the order.\n\n:return: The sum of the quantities of all items.\n        :return:\n        \"\"\"\n        return sum(item[\"quantity\"] for item in self.items)\n\ndef clear_order(self):\n        \"\"\"\n        Removes all items from the order, resetting it to an empty state.\n        \"\"\"\n        self.items = []\n\ndef list_items(self) -> List[str]:\n        \"\"\"\n        Returns a list of all unique item names currently in the order.\n\n:return: A list of unique item names (no duplicates).\n        \"\"\"\n        return list(set(item[\"name\"] for item in self.items))\n\ndef is_empty(self) -> bool:\n        \"\"\"\n        Checks whether the order is currently empty.\n\n:return: True if no items are in the order, False otherwise.\n        \"\"\"\n        return len(self.items) == 0\n```",
        "response": "Here’s a breakdown of the public methods and the test cases you’ll want to cover. Each bullet is one atomic scenario—tests should be small and focused.\n1. __init__\nValid parameters\nDefault ctor: no args → creates empty order, correct defaults.\nCustom valid values (e.g. tax_rate=0, free_shipping_threshold=0, shipping_cost=0).\nType errors\ntax_rate non-numeric (e.g. \"0.2\").\nfree_shipping_threshold non-numeric.\nshipping_cost non-numeric.\nValue errors\ntax_rate < 0 or > 1.\nfree_shipping_threshold negative.\nshipping_cost negative.\n2. add_item(name, price, quantity=1)\nTypical usage\nAdd a single item with default quantity.\nAdd multiple different items.\nQuantity accumulation\nAdd the same (name, price) twice → quantity sums.\nConflict\nAdd same name but different price → raises ValueError.\nType checks\nname not a str.\nprice not a number.\nquantity not an int.\nValue checks\nEmpty name.\nprice ≤ 0.\nquantity < 1.\n3. remove_item(name)\nTypical usage\nRemove existing item.\nType error\nname not a str.\nMissing item\nRemove non-existent name → raises ValueError.\nIdempotence\nAfter removal, order no longer contains that name.\n4. get_subtotal()\nTypical usage\nWith several items → correct sum of price × quantity.\nEmpty order\nOn empty items → raises ValueError.\n5. apply_discount(subtotal, discount)\nTypical usage\nNo discount (0.0), full discount (1.0), mid-range discount (e.g. 0.2).\nType errors\nsubtotal non-numeric.\ndiscount non-numeric.\nValue errors\nsubtotal negative.\ndiscount < 0 or > 1.\n6. calculate_shipping(discounted_subtotal)\nTypical usage\nBelow threshold → returns shipping_cost.\nAt threshold → returns 0.0.\nAbove threshold → returns 0.0.\nType error\ndiscounted_subtotal non-numeric.\n7. calculate_tax(amount)\nTypical usage\nZero amount → returns 0.0.\nPositive amount → amount × tax_rate.\nType error\namount non-numeric.\nValue error\nNegative amount.\n8. calculate_total(discount=0.0)\nThis method wires together subtotal, discount, shipping and tax. Test each branch:\nTypical “no discount, below threshold”\nSmall order → include shipping + tax.\n“No discount, free shipping”\nLarge order → no shipping, just tax.\n“With discount, shipping still applies”\nDiscount reduces just below free-ship threshold.\n“With discount, free shipping”\nDiscounted subtotal ≥ threshold → no shipping.\nType error\ndiscount non-numeric.\nValue error\ndiscount < 0 or > 1 (propagates from apply_discount).\nEmpty order → propagates from get_subtotal.\n9. total_items()\nTypical usage\nSum of quantities across multiple items.\nEmpty order\nReturns 0.\n10. clear_order()\nTypical usage\nAfter adding items, clear_order() → items empty.\n11. list_items()\nTypical usage\nReturns unique names even if duplicates were added.\nEmpty order\nReturns empty list.\n12. is_empty()\nEmpty\nOn new or cleared order → True.\nNon-empty\nAfter any add_item → False.\nWith these scenarios in hand, you can now write minimal, clear unittest.TestCase methods—one per bullet—asserting the correct return values or that the proper exception is raised.",
        "response_time": 23.782429218292236
      },
      {
        "step": 2,
        "prompt": "Based on the class above, list all relevant unit test scenarios you would create.\nEach scenario should describe:\n- the method being tested,\n- the type of case (e.g. normal use, invalid input, exception),\n- a short explanation of the intent.\nList as many scenarios as you can think of, covering all aspects of the class.\nDo not write test code yet.\n\n",
        "response": "Below is a comprehensive list of unit-test scenarios, grouped by method. Each scenario states the method under test, the case type, and a brief intent.\n__init__\nMethod: __init__\nCase: Normal use (defaults)\nIntent: Verify an instance with no args has tax_rate=0.23, free_shipping_threshold=100.0, shipping_cost=10.0, and an empty items list.\nMethod: __init__\nCase: Normal use (custom zero values)\nIntent: tax_rate=0.0, free_shipping_threshold=0.0, shipping_cost=0.0 all accepted and stored.\nMethod: __init__\nCase: Type error\nIntent: Passing tax_rate=\"0.2\" raises TypeError.\nMethod: __init__\nCase: Type error\nIntent: Passing free_shipping_threshold=\"100\" raises TypeError.\nMethod: __init__\nCase: Type error\nIntent: Passing shipping_cost=[10] raises TypeError.\nMethod: __init__\nCase: Value error\nIntent: tax_rate=-0.1 or tax_rate=1.1 raises ValueError.\nMethod: __init__\nCase: Value error\nIntent: free_shipping_threshold=-5.0 raises ValueError.\nMethod: __init__\nCase: Value error\nIntent: shipping_cost=-1.0 raises ValueError.\nadd_item(name, price, quantity)\nMethod: add_item\nCase: Normal use\nIntent: Add a single item (quantity default) → appears in items.\nMethod: add_item\nCase: Normal use\nIntent: Add two different items → both present.\nMethod: add_item\nCase: Normal use (quantity >1)\nIntent: Add with quantity=3 → item’s quantity is 3.\nMethod: add_item\nCase: Accumulation\nIntent: Add same (name, price) twice → second call increments existing quantity.\nMethod: add_item\nCase: Conflict\nIntent: Add same name but different price → raises ValueError.\nMethod: add_item\nCase: Type error\nIntent: name=123 raises TypeError.\nMethod: add_item\nCase: Type error\nIntent: price=\"9.99\" raises TypeError.\nMethod: add_item\nCase: Type error\nIntent: quantity=2.5 raises TypeError.\nMethod: add_item\nCase: Value error\nIntent: name=\"\" raises ValueError.\nMethod: add_item\nCase: Value error\nIntent: price=0 or negative raises ValueError.\nMethod: add_item\nCase: Value error\nIntent: quantity=0 or negative raises ValueError.\nremove_item(name)\nMethod: remove_item\nCase: Normal use\nIntent: Remove an existing item → no longer in items.\nMethod: remove_item\nCase: Type error\nIntent: name=42 raises TypeError.\nMethod: remove_item\nCase: Missing item\nIntent: Remove non-existent name raises ValueError.\nMethod: remove_item\nCase: Idempotence\nIntent: After removal, calling is_empty() or list_items() reflects the change.\nget_subtotal()\nMethod: get_subtotal\nCase: Normal use\nIntent: Multiple items → returns correct sum of price × quantity.\nMethod: get_subtotal\nCase: Empty order\nIntent: No items → raises ValueError.\napply_discount(subtotal, discount)\nMethod: apply_discount\nCase: No discount\nIntent: discount=0.0 returns same subtotal.\nMethod: apply_discount\nCase: Full discount\nIntent: discount=1.0 returns 0.0.\nMethod: apply_discount\nCase: Mid-range discount\nIntent: discount=0.25 returns subtotal × 0.75.\nMethod: apply_discount\nCase: Type error\nIntent: subtotal=\"50\" raises TypeError.\nMethod: apply_discount\nCase: Type error\nIntent: discount=None raises TypeError.\nMethod: apply_discount\nCase: Value error\nIntent: discount=-0.1 or 1.1 raises ValueError.\nMethod: apply_discount\nCase: Value error\nIntent: subtotal<0 raises ValueError.\ncalculate_shipping(discounted_subtotal)\nMethod: calculate_shipping\nCase: Below threshold\nIntent: discounted_subtotal < free_shipping_threshold returns shipping_cost.\nMethod: calculate_shipping\nCase: At threshold\nIntent: discounted_subtotal == free_shipping_threshold returns 0.0.\nMethod: calculate_shipping\nCase: Above threshold\nIntent: discounted_subtotal > free_shipping_threshold returns 0.0.\nMethod: calculate_shipping\nCase: Type error\nIntent: discounted_subtotal=\"20\" raises TypeError.\ncalculate_tax(amount)\nMethod: calculate_tax\nCase: Zero amount\nIntent: amount=0 returns 0.0.\nMethod: calculate_tax\nCase: Positive amount\nIntent: Returns amount × tax_rate.\nMethod: calculate_tax\nCase: Negative amount\nIntent: amount<0 raises ValueError.\nMethod: calculate_tax\nCase: Type error\nIntent: amount=[100] raises TypeError.\ncalculate_total(discount)\nMethod: calculate_total\nCase: Normal, no discount, below free-ship\nIntent: Small order → shipping + tax included.\nMethod: calculate_total\nCase: Normal, no discount, free-ship\nIntent: Large order → shipping = 0, only tax.\nMethod: calculate_total\nCase: Discount but still below threshold\nIntent: Discounted subtotal < threshold → shipping + tax.\nMethod: calculate_total\nCase: Discount yielding free-ship\nIntent: Discounted subtotal ≥ threshold → no shipping.\nMethod: calculate_total\nCase: Type error\nIntent: discount=\"0.1\" raises TypeError.\nMethod: calculate_total\nCase: Value error (invalid discount)\nIntent: discount<0 or >1 propagates ValueError.\nMethod: calculate_total\nCase: Value error (empty order)\nIntent: No items → raises ValueError via get_subtotal.\ntotal_items()\nMethod: total_items\nCase: Normal use\nIntent: Sum of all quantity values across items.\nMethod: total_items\nCase: Empty order\nIntent: Returns 0.\nclear_order()\nMethod: clear_order\nCase: Normal use\nIntent: After adding items, clear_order() makes is_empty() → True.\nMethod: clear_order\nCase: Idempotence\nIntent: Calling on an already empty order leaves it empty.\nlist_items()\nMethod: list_items\nCase: Normal use\nIntent: Returns all unique names, order unimportant.\nMethod: list_items\nCase: Duplicates\nIntent: If same name added twice, appears only once.\nMethod: list_items\nCase: Empty order\nIntent: Returns empty list.\nis_empty()\nMethod: is_empty\nCase: New order\nIntent: Immediately after construction, returns True.\nMethod: is_empty\nCase: After add\nIntent: After any add_item, returns False.\nMethod: is_empty\nCase: After clear\nIntent: After clear_order(), returns True.\nWith these 57 granular scenarios, you’ll fully exercise every public method, both happy paths and error conditions.",
        "response_time": 32.87498068809509
      },
      {
        "step": 3,
        "prompt": "Now, based on the test scenarios you just listed, generate the complete Python unit test suite using the `unittest` framework.\n\nFollow these rules:\n- Include one test method per scenario.\n- Use meaningful test method names.\n- Do not include comments or explanations.\n- Output a valid `.py` file containing only the test class.\n\nThe output must contain only Python code.",
        "response": "python\nKopiuj\nEdytuj\nimport unittest\nfrom order_calculator import OrderCalculator\n\nclass TestOrderCalculator(unittest.TestCase):\n\n    def test_init_default(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.tax_rate, 0.23)\n        self.assertEqual(calc.free_shipping_threshold, 100.0)\n        self.assertEqual(calc.shipping_cost, 10.0)\n        self.assertEqual(calc.items, [])\n\n    def test_init_custom_zero_values(self):\n        calc = OrderCalculator(tax_rate=0.0, free_shipping_threshold=0.0, shipping_cost=0.0)\n        self.assertEqual(calc.tax_rate, 0.0)\n        self.assertEqual(calc.free_shipping_threshold, 0.0)\n        self.assertEqual(calc.shipping_cost, 0.0)\n        self.assertEqual(calc.items, [])\n\n    def test_init_tax_rate_type_error(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(tax_rate=\"0.2\")\n\n    def test_init_free_shipping_threshold_type_error(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(free_shipping_threshold=\"100\")\n\n    def test_init_shipping_cost_type_error(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(shipping_cost=[10])\n\n    def test_init_tax_rate_value_error(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=-0.1)\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=1.1)\n\n    def test_init_free_shipping_threshold_negative(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(free_shipping_threshold=-5.0)\n\n    def test_init_shipping_cost_negative(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(shipping_cost=-1.0)\n\n    def test_add_item_single_default_quantity(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        self.assertEqual(len(calc.items), 1)\n        item = calc.items[0]\n        self.assertEqual(item[\"name\"], \"apple\")\n        self.assertEqual(item[\"price\"], 1.0)\n        self.assertEqual(item[\"quantity\"], 1)\n\n    def test_add_item_multiple_different_items(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.add_item(\"banana\", 2.0, 2)\n        self.assertEqual(len(calc.items), 2)\n\n    def test_add_item_with_quantity(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0, 3)\n        self.assertEqual(calc.items[0][\"quantity\"], 3)\n\n    def test_add_item_accumulate_quantity(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0, 2)\n        calc.add_item(\"apple\", 1.0, 3)\n        self.assertEqual(calc.items[0][\"quantity\"], 5)\n\n    def test_add_item_conflicting_price(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        with self.assertRaises(ValueError):\n            calc.add_item(\"apple\", 2.0)\n\n    def test_add_item_name_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(123, 1.0)\n\n    def test_add_item_price_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(\"apple\", \"1.0\")\n\n    def test_add_item_quantity_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(\"apple\", 1.0, 2.5)\n\n    def test_add_item_empty_name(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"\", 1.0)\n\n    def test_add_item_non_positive_price(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"apple\", 0)\n\n    def test_add_item_invalid_quantity(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"apple\", 1.0, 0)\n\n    def test_remove_existing_item(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.remove_item(\"apple\")\n        self.assertEqual(calc.items, [])\n\n    def test_remove_item_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.remove_item(123)\n\n    def test_remove_nonexistent_item(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.remove_item(\"apple\")\n\n    def test_remove_item_updates_state(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.add_item(\"banana\", 2.0)\n        calc.remove_item(\"apple\")\n        names = [item[\"name\"] for item in calc.items]\n        self.assertNotIn(\"apple\", names)\n\n    def test_get_subtotal_with_items(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 2.0, 3)\n        calc.add_item(\"banana\", 1.5, 2)\n        self.assertEqual(calc.get_subtotal(), 9.0)\n\n    def test_get_subtotal_empty_order(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.get_subtotal()\n\n    def test_apply_discount_no_discount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(100.0, 0.0), 100.0)\n\n    def test_apply_discount_full_discount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(100.0, 1.0), 0.0)\n\n    def test_apply_discount_mid_discount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(80.0, 0.25), 60.0)\n\n    def test_apply_discount_subtotal_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.apply_discount(\"80\", 0.2)\n\n    def test_apply_discount_discount_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.apply_discount(80.0, None)\n\n    def test_apply_discount_discount_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(80.0, -0.1)\n        with self.assertRaises(ValueError):\n            calc.apply_discount(80.0, 1.1)\n\n    def test_apply_discount_negative_subtotal(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(-10.0, 0.2)\n\n    def test_calculate_shipping_below_threshold(self):\n        calc = OrderCalculator(free_shipping_threshold=50.0, shipping_cost=5.0)\n        self.assertEqual(calc.calculate_shipping(49.99), 5.0)\n\n    def test_calculate_shipping_at_threshold(self):\n        calc = OrderCalculator(free_shipping_threshold=50.0, shipping_cost=5.0)\n        self.assertEqual(calc.calculate_shipping(50.0), 0.0)\n\n    def test_calculate_shipping_above_threshold(self):\n        calc = OrderCalculator(free_shipping_threshold=50.0, shipping_cost=5.0)\n        self.assertEqual(calc.calculate_shipping(100.0), 0.0)\n\n    def test_calculate_shipping_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_shipping(\"50\")\n\n    def test_calculate_tax_zero_amount(self):\n        calc = OrderCalculator(tax_rate=0.1)\n        self.assertEqual(calc.calculate_tax(0.0), 0.0)\n\n    def test_calculate_tax_positive_amount(self):\n        calc = OrderCalculator(tax_rate=0.1)\n        self.assertEqual(calc.calculate_tax(200.0), 20.0)\n\n    def test_calculate_tax_negative_amount(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_tax(-5.0)\n\n    def test_calculate_tax_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_tax([100])\n\n    def test_calculate_total_no_discount_below_threshold(self):\n        calc = OrderCalculator(tax_rate=0.1, free_shipping_threshold=100.0, shipping_cost=10.0)\n        calc.add_item(\"apple\", 10.0, 2)\n        self.assertEqual(calc.calculate_total(0.0), 33.0)\n\n    def test_calculate_total_no_discount_free_shipping(self):\n        calc = OrderCalculator(tax_rate=0.1, free_shipping_threshold=20.0, shipping_cost=10.0)\n        calc.add_item(\"apple\", 10.0, 2)\n        self.assertEqual(calc.calculate_total(0.0), 22.0)\n\n    def test_calculate_total_with_discount_below_threshold(self):\n        calc = OrderCalculator(tax_rate=0.1, free_shipping_threshold=50.0, shipping_cost=5.0)\n        calc.add_item(\"apple\", 10.0, 5)\n        self.assertEqual(calc.calculate_total(0.2), 49.5)\n\n    def test_calculate_total_with_discount_free_shipping(self):\n        calc = OrderCalculator(tax_rate=0.1, free_shipping_threshold=30.0, shipping_cost=5.0)\n        calc.add_item(\"apple\", 10.0, 5)\n        self.assertEqual(calc.calculate_total(0.4), 33.0)\n\n    def test_calculate_total_discount_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_total(\"0.1\")\n\n    def test_calculate_total_invalid_discount_value(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        with self.assertRaises(ValueError):\n            calc.calculate_total(-0.1)\n        with self.assertRaises(ValueError):\n            calc.calculate_total(1.1)\n\n    def test_calculate_total_empty_order(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_total(0.0)\n\n    def test_total_items_multiple(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0, 2)\n        calc.add_item(\"banana\", 2.0, 3)\n        self.assertEqual(calc.total_items(), 5)\n\n    def test_total_items_empty_order(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.total_items(), 0)\n\n    def test_clear_order_after_adding(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n\n    def test_clear_order_idempotent(self):\n        calc = OrderCalculator()\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n\n    def test_list_items_unique(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.add_item(\"banana\", 2.0)\n        self.assertCountEqual(calc.list_items(), [\"apple\", \"banana\"])\n\n    def test_list_items_duplicates(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.add_item(\"apple\", 1.0)\n        self.assertCountEqual(calc.list_items(), [\"apple\"])\n\n    def test_list_items_empty(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.list_items(), [])\n\n    def test_is_empty_new_order(self):\n        calc = OrderCalculator()\n        self.assertTrue(calc.is_empty())\n\n    def test_is_empty_after_add(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        self.assertFalse(calc.is_empty())\n\n    def test_is_empty_after_clear(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())",
        "response_time": 59.367295265197754
      }
    ],
    "final_response": "python\nKopiuj\nEdytuj\nimport unittest\nfrom order_calculator import OrderCalculator\n\nclass TestOrderCalculator(unittest.TestCase):\n\n    def test_init_default(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.tax_rate, 0.23)\n        self.assertEqual(calc.free_shipping_threshold, 100.0)\n        self.assertEqual(calc.shipping_cost, 10.0)\n        self.assertEqual(calc.items, [])\n\n    def test_init_custom_zero_values(self):\n        calc = OrderCalculator(tax_rate=0.0, free_shipping_threshold=0.0, shipping_cost=0.0)\n        self.assertEqual(calc.tax_rate, 0.0)\n        self.assertEqual(calc.free_shipping_threshold, 0.0)\n        self.assertEqual(calc.shipping_cost, 0.0)\n        self.assertEqual(calc.items, [])\n\n    def test_init_tax_rate_type_error(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(tax_rate=\"0.2\")\n\n    def test_init_free_shipping_threshold_type_error(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(free_shipping_threshold=\"100\")\n\n    def test_init_shipping_cost_type_error(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(shipping_cost=[10])\n\n    def test_init_tax_rate_value_error(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=-0.1)\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=1.1)\n\n    def test_init_free_shipping_threshold_negative(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(free_shipping_threshold=-5.0)\n\n    def test_init_shipping_cost_negative(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(shipping_cost=-1.0)\n\n    def test_add_item_single_default_quantity(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        self.assertEqual(len(calc.items), 1)\n        item = calc.items[0]\n        self.assertEqual(item[\"name\"], \"apple\")\n        self.assertEqual(item[\"price\"], 1.0)\n        self.assertEqual(item[\"quantity\"], 1)\n\n    def test_add_item_multiple_different_items(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.add_item(\"banana\", 2.0, 2)\n        self.assertEqual(len(calc.items), 2)\n\n    def test_add_item_with_quantity(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0, 3)\n        self.assertEqual(calc.items[0][\"quantity\"], 3)\n\n    def test_add_item_accumulate_quantity(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0, 2)\n        calc.add_item(\"apple\", 1.0, 3)\n        self.assertEqual(calc.items[0][\"quantity\"], 5)\n\n    def test_add_item_conflicting_price(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        with self.assertRaises(ValueError):\n            calc.add_item(\"apple\", 2.0)\n\n    def test_add_item_name_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(123, 1.0)\n\n    def test_add_item_price_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(\"apple\", \"1.0\")\n\n    def test_add_item_quantity_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(\"apple\", 1.0, 2.5)\n\n    def test_add_item_empty_name(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"\", 1.0)\n\n    def test_add_item_non_positive_price(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"apple\", 0)\n\n    def test_add_item_invalid_quantity(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"apple\", 1.0, 0)\n\n    def test_remove_existing_item(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.remove_item(\"apple\")\n        self.assertEqual(calc.items, [])\n\n    def test_remove_item_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.remove_item(123)\n\n    def test_remove_nonexistent_item(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.remove_item(\"apple\")\n\n    def test_remove_item_updates_state(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.add_item(\"banana\", 2.0)\n        calc.remove_item(\"apple\")\n        names = [item[\"name\"] for item in calc.items]\n        self.assertNotIn(\"apple\", names)\n\n    def test_get_subtotal_with_items(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 2.0, 3)\n        calc.add_item(\"banana\", 1.5, 2)\n        self.assertEqual(calc.get_subtotal(), 9.0)\n\n    def test_get_subtotal_empty_order(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.get_subtotal()\n\n    def test_apply_discount_no_discount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(100.0, 0.0), 100.0)\n\n    def test_apply_discount_full_discount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(100.0, 1.0), 0.0)\n\n    def test_apply_discount_mid_discount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(80.0, 0.25), 60.0)\n\n    def test_apply_discount_subtotal_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.apply_discount(\"80\", 0.2)\n\n    def test_apply_discount_discount_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.apply_discount(80.0, None)\n\n    def test_apply_discount_discount_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(80.0, -0.1)\n        with self.assertRaises(ValueError):\n            calc.apply_discount(80.0, 1.1)\n\n    def test_apply_discount_negative_subtotal(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(-10.0, 0.2)\n\n    def test_calculate_shipping_below_threshold(self):\n        calc = OrderCalculator(free_shipping_threshold=50.0, shipping_cost=5.0)\n        self.assertEqual(calc.calculate_shipping(49.99), 5.0)\n\n    def test_calculate_shipping_at_threshold(self):\n        calc = OrderCalculator(free_shipping_threshold=50.0, shipping_cost=5.0)\n        self.assertEqual(calc.calculate_shipping(50.0), 0.0)\n\n    def test_calculate_shipping_above_threshold(self):\n        calc = OrderCalculator(free_shipping_threshold=50.0, shipping_cost=5.0)\n        self.assertEqual(calc.calculate_shipping(100.0), 0.0)\n\n    def test_calculate_shipping_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_shipping(\"50\")\n\n    def test_calculate_tax_zero_amount(self):\n        calc = OrderCalculator(tax_rate=0.1)\n        self.assertEqual(calc.calculate_tax(0.0), 0.0)\n\n    def test_calculate_tax_positive_amount(self):\n        calc = OrderCalculator(tax_rate=0.1)\n        self.assertEqual(calc.calculate_tax(200.0), 20.0)\n\n    def test_calculate_tax_negative_amount(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_tax(-5.0)\n\n    def test_calculate_tax_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_tax([100])\n\n    def test_calculate_total_no_discount_below_threshold(self):\n        calc = OrderCalculator(tax_rate=0.1, free_shipping_threshold=100.0, shipping_cost=10.0)\n        calc.add_item(\"apple\", 10.0, 2)\n        self.assertEqual(calc.calculate_total(0.0), 33.0)\n\n    def test_calculate_total_no_discount_free_shipping(self):\n        calc = OrderCalculator(tax_rate=0.1, free_shipping_threshold=20.0, shipping_cost=10.0)\n        calc.add_item(\"apple\", 10.0, 2)\n        self.assertEqual(calc.calculate_total(0.0), 22.0)\n\n    def test_calculate_total_with_discount_below_threshold(self):\n        calc = OrderCalculator(tax_rate=0.1, free_shipping_threshold=50.0, shipping_cost=5.0)\n        calc.add_item(\"apple\", 10.0, 5)\n        self.assertEqual(calc.calculate_total(0.2), 49.5)\n\n    def test_calculate_total_with_discount_free_shipping(self):\n        calc = OrderCalculator(tax_rate=0.1, free_shipping_threshold=30.0, shipping_cost=5.0)\n        calc.add_item(\"apple\", 10.0, 5)\n        self.assertEqual(calc.calculate_total(0.4), 33.0)\n\n    def test_calculate_total_discount_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_total(\"0.1\")\n\n    def test_calculate_total_invalid_discount_value(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        with self.assertRaises(ValueError):\n            calc.calculate_total(-0.1)\n        with self.assertRaises(ValueError):\n            calc.calculate_total(1.1)\n\n    def test_calculate_total_empty_order(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_total(0.0)\n\n    def test_total_items_multiple(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0, 2)\n        calc.add_item(\"banana\", 2.0, 3)\n        self.assertEqual(calc.total_items(), 5)\n\n    def test_total_items_empty_order(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.total_items(), 0)\n\n    def test_clear_order_after_adding(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n\n    def test_clear_order_idempotent(self):\n        calc = OrderCalculator()\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n\n    def test_list_items_unique(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.add_item(\"banana\", 2.0)\n        self.assertCountEqual(calc.list_items(), [\"apple\", \"banana\"])\n\n    def test_list_items_duplicates(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.add_item(\"apple\", 1.0)\n        self.assertCountEqual(calc.list_items(), [\"apple\"])\n\n    def test_list_items_empty(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.list_items(), [])\n\n    def test_is_empty_new_order(self):\n        calc = OrderCalculator()\n        self.assertTrue(calc.is_empty())\n\n    def test_is_empty_after_add(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        self.assertFalse(calc.is_empty())\n\n    def test_is_empty_after_clear(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())",
    "total_response_time": 116.02470517158508,
    "strategy": "chain_of_thought_prompting",
    "context_type": "full_context"
  }
}