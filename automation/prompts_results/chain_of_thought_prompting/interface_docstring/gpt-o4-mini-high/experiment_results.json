{
  "model": "gpt-o4-mini-high",
  "strategy": "chain_of_thought_prompting",
  "context_type": "interface_docstring",
  "timestamp": "2025-07-04T01:07:34.675911",
  "response_time": 85.25155329704285,
  "test_file": "prompts_results\\chain_of_thought_prompting\\interface_docstring\\gpt-o4-mini-high\\tests.py",
  "raw_results": {
    "responses": [
      {
        "step": 1,
        "prompt": "You are a software testing assistant. Your task is to generate a set of unit tests for a Python class provided below.\n\nThe tests should:\n- use the `unittest` framework,\n- cover all public methods,\n- test typical usage as well as edge cases, invalid inputs, and exceptions,\n- be clear, atomic, and minimal.\n\nYou will now analyze the class to prepare relevant test cases.\nDo not write test code yet.\n\nBelow is the interface+docstrings of the class:\n\n```python\nfrom typing import TypedDict, List\n\nclass Item(TypedDict):\n    \"\"\"\n    Represents a single product entry in the order.\n\n:key name: The name of the product.\n    :key price: The price per unit of the product.\n    :key quantity: The number of units of the product.\n    \"\"\"\n\nclass OrderCalculator:\n    def __init__(self, tax_rate=0.23, free_shipping_threshold=100.0, shipping_cost=10.0):\n        \"\"\"\n        Initializes a new OrderCalculator instance.\n        Initializes an empty list of items (each represented as a TypedDict 'Item')\n        and stores the configured tax and shipping parameters.\n\n:param tax_rate: The percentage of tax applied to the final amount, expressed as a float between 0.0 and 1.0 (default is 0.23 for 23%).\n        :param free_shipping_threshold: The minimum order value (after discount) that qualifies for free shipping (default is 100.0).\n        :param shipping_cost: The cost of shipping applied if the order does not meet the free shipping threshold (default is 10.0).\n\n:raises ValueError:\n            - If tax_rate is not in the range [0.0, 1.0].\n            - If free_shipping_threshold is negative.\n            - If shipping_cost is negative.\n        :raises TypeError: If any parameter is of incorrect type.\n        \"\"\"\n\ndef add_item(self, name: str, price: float, quantity: int = 1):\n        \"\"\"\n        Add an item to the order.\n\nIf an item with the same name and price already exists, its quantity is increased.\n\n:param name: the name of the item\n        :param price: the price of the item\n        :param quantity: the quantity of the item (default is 1)\n        :raises ValueError: If name is empty, price <= 0, quantity < 1, or item with same name but different price exists.\n        :raises TypeError: If inputs are of incorrect types.\n        \"\"\"\n\ndef remove_item(self, name: str):\n        \"\"\"\n        Removes an item from the order.\n\n:param name: The name of the item to remove.\n        :raises ValueError: If no item with the given name exists in the order.\n        :raises TypeError: If name is not a string.\n        \"\"\"\n\ndef get_subtotal(self) -> float:\n        \"\"\"\n        Calculates the subtotal (sum of item prices times their quantities) for all items in the order.\n\n:return: The subtotal as a float.\n        :raises ValueError: If the order is empty.\n        \"\"\"\n\ndef apply_discount(self, subtotal: float, discount: float) -> float:\n        \"\"\"\n        Applies a percentage discount to the given subtotal.\n\n:param subtotal: the subtotal amount (must be >= 0)\n        :param discount: the discount rate as a float between 0.0 and 1.0 (e.g. 0.2 = 20%).\n        :return: The discounted subtotal.\n        :raises ValueError: If subtotal < 0 or discount is outside the [0.0, 1.0] range.\n        :raises TypeError: If inputs are of incorrect types.\n        \"\"\"\n\ndef calculate_shipping(self, discounted_subtotal: float) -> float:\n        \"\"\"\n        Calculates the shipping cost based on the discounted subtotal.\n\nIf the discounted subtotal >= free shipping threshold shipping is free (0.0).\n        Otherwise, the standard shipping cost is applied.\n\n:param discounted_subtotal: The subtotal amount after applying discount (must be >= 0.0).\n        :return: The shipping cost as a float (0.0 or self.shipping_cost).\n        :raises TypeError: If input is not a number.\n        \"\"\"\n\ndef calculate_tax(self, amount: float) -> float:\n        \"\"\"\n        Calculates the tax based on the provided amount using the configured tax rate.\n\n:param amount: The amount on which to calculate the tax (must be >= 0.0).\n        :return: The tax as a float.\n        :raises ValueError: If the amount is negative.\n        :raises TypeError: If input is not a number.\n        \"\"\"\n\ndef calculate_total(self, discount: float = 0.0) -> float:\n        \"\"\"\n        Calculates the total cost of the order after applying discount, shipping, and tax.\n\nThis method performs the following steps:\n        1. Calculates the subtotal from all items.\n        2. Applies the given discount.\n        3. Adds shipping cost if necessary.\n        4. Calculates tax on the discounted subtotal + shipping.\n\n:param discount: Discount rate between 0.0 and 1.0 (e.g. 0.2 = 20%).\n        :return: The final total as a float.\n        :raises ValueError:\n            - If the subtotal is negative.\n            - If the discount is invalid.\n            - If the order is empty.\n        :raises TypeError: If input is not a number.\n        \"\"\"\n\ndef total_items(self) -> int:\n        \"\"\"\n        Returns the total quantity of all items in the order.\n\n:return: The sum of the quantities of all items.\n        :return:\n        \"\"\"\n\ndef clear_order(self):\n        \"\"\"\n        Removes all items from the order, resetting it to an empty state.\n        \"\"\"\n\ndef list_items(self) -> List[str]:\n        \"\"\"\n        Returns a list of all unique item names currently in the order.\n\n:return: A list of unique item names (no duplicates).\n        \"\"\"\n\ndef is_empty(self) -> bool:\n        \"\"\"\n        Checks whether the order is currently empty.\n\n:return: True if no items are in the order, False otherwise.\n        \"\"\"\n```",
        "response": "Here’s a comprehensive plan of unit-test scenarios for every public method in OrderCalculator. Each test is atomic (one assertion or logical group), covers both “happy path” and error/edge cases, and will map directly to a unittest.TestCase method.\n1. __init__(…)\nValid default parameters\nAfter calc = OrderCalculator():\ncalc.is_empty() is True\ncalc.list_items() == []\ncalc.total_items() == 0\nCustom valid parameters\ntax_rate=0.1, free_shipping_threshold=50.0, shipping_cost=5.0 produces an instance with those attributes.\nInvalid tax_rate\ntax_rate < 0 and tax_rate > 1.0 ⇒ ValueError\ntax_rate not a number ⇒ TypeError\nInvalid free_shipping_threshold\nNegative ⇒ ValueError\nNon-number ⇒ TypeError\nInvalid shipping_cost\nNegative ⇒ ValueError\nNon-number ⇒ TypeError\n2. add_item(name, price, quantity=1)\nHappy paths\nSingle item, default quantity\nadd_item(\"A\", 10.0) ⇒ one item in order, subtotal 10.0, total_items() == 1.\nMultiple quantity\nadd_item(\"B\", 5.0, quantity=3) ⇒ subtotal 15.0, total_items() == 3.\nIdempotent add: same name+price\nAdd \"C\", 2.5, 2 then add \"C\", 2.5, 3 ⇒ one entry \"C\" with quantity 5.\nDifferent names\nAdd \"X\" and \"Y\" separately ⇒ list_items() contains both, total_items() sums both quantities.\nError cases\nEmpty name ⇒ ValueError\nPrice ≤ 0 ⇒ ValueError\nQuantity < 1 ⇒ ValueError\nSame name, different price ⇒ ValueError\nWrong types\nname not str ⇒ TypeError\nprice not int/float ⇒ TypeError\nquantity not int ⇒ TypeError\n3. remove_item(name)\nHappy path\nAfter adding \"A\", remove \"A\" ⇒ order empty again, is_empty() True.\nNon-existent name ⇒ ValueError\nWrong type for name ⇒ TypeError\n4. get_subtotal() → float\nMultiple items\nE.g. items [(\"A\", 10×2), (\"B\", 5×3)] ⇒ subtotal 20 + 15 = 35.0.\nEmpty order ⇒ ValueError\n5. apply_discount(subtotal, discount) → float\nNo discount (discount=0) ⇒ unchanged\nFull discount (discount=1.0) ⇒ zero\nTypical (subtotal=100.0, discount=0.25) ⇒ 75.0\nInvalid subtotal < 0 ⇒ ValueError\nDiscount < 0 or > 1 ⇒ ValueError\nWrong types for either ⇒ TypeError\n6. calculate_shipping(discounted_subtotal) → float\nBelow threshold (< free_shipping_threshold) ⇒ returns shipping_cost\nExactly at threshold ⇒ returns 0.0\nAbove threshold ⇒ 0.0\nWrong type (non-number) ⇒ TypeError\n(Note: negative subtotal behavior unspecified; we’ll only test for type errors.)\n7. calculate_tax(amount) → float\nPositive amount (100.0) ⇒ tax_rate × 100.0 (e.g. 23.0)\nZero amount ⇒ 0.0\nNegative amount ⇒ ValueError\nWrong type ⇒ TypeError\n8. calculate_total(discount=0.0) → float\nNo discount, free shipping\nE.g. items sum to ≥ threshold ⇒ total = subtotal + tax(subtotal).\nWith discount, incurs shipping\nE.g. subtotal=100, discount=0.1 ⇒ discounted=90 (<100), shipping=10, taxable=100, total=90+10+tax(100).\nEmpty order ⇒ ValueError\nDiscount < 0 or > 1 ⇒ ValueError\nWrong type for discount ⇒ TypeError\n9. total_items() → int\nAfter multiple adds ⇒ correct sum\nEmpty order ⇒ 0\n10. clear_order()\nAfter adds: clear ⇒ is_empty() becomes True, list_items() empty, get_subtotal() raises.\n11. list_items() → List[str]\nMultiple distinct items ⇒ returns all names\nDuplicates by repeated add ⇒ no duplicates in list\nEmpty order ⇒ []\n12. is_empty() → bool\nFresh instance ⇒ True\nAfter add_item ⇒ False\nAfter clear_order ⇒ True\nThese scenarios guarantee 100% branch and error‐condition coverage of every public method. Once you’re ready, we can translate each of these into concise unittest methods.",
        "response_time": 29.62377953529358
      },
      {
        "step": 2,
        "prompt": "Based on the class above, list all relevant unit test scenarios you would create.\nEach scenario should describe:\n- the method being tested,\n- the type of case (e.g. normal use, invalid input, exception),\n- a short explanation of the intent.\nList as many scenarios as you can think of, covering all aspects of the class.\nDo not write test code yet.\n\n",
        "response": "Here is a comprehensive list of unit‐test scenarios, organized by method. Each scenario gives the method under test, the case type, and a brief intent statement.\n__init__\nNormal / default parameters\nVerify that a fresh OrderCalculator() has no items, zero total items, and empty item list.\nNormal / custom parameters\nInitialize with tax_rate=0.1, free_shipping_threshold=50.0, shipping_cost=5.0 and check those attributes.\nException / invalid tax_rate (too low)\nPass tax_rate=-0.01 → expect ValueError.\nException / invalid tax_rate (too high)\nPass tax_rate=1.5 → expect ValueError.\nException / tax_rate wrong type\nPass tax_rate=\"0.2\" → expect TypeError.\nException / negative free_shipping_threshold\nPass free_shipping_threshold=-10 → expect ValueError.\nException / free_shipping_threshold wrong type\nPass free_shipping_threshold=\"100\" → expect TypeError.\nException / negative shipping_cost\nPass shipping_cost=-5 → expect ValueError.\nException / shipping_cost wrong type\nPass shipping_cost=[10] → expect TypeError.\nadd_item(name, price, quantity=1)\nNormal / single add\nAdd (\"Widget\", 10.0) → check subtotal, total_items, list_items.\nNormal / quantity >1\nAdd (\"Gadget\", 5.0, 3) → expect quantity 3 reflected in subtotal and total_items.\nNormal / repeated add same name+price\nAdd (\"X\", 2.0, 2) then (\"X\", 2.0, 4) → expect a single entry with quantity 6.\nNormal / multiple distinct items\nAdd \"A\" and \"B\" → list_items contains both, subtotal sums both.\nException / empty name\nname=\"\" → expect ValueError.\nException / price ≤ 0\nprice=0 or negative → expect ValueError.\nException / quantity < 1\nquantity=0 → expect ValueError.\nException / mismatched price for existing name\nAdd (\"Item\", 1.0) then (\"Item\", 2.0) → expect ValueError.\nException / name wrong type\nname=123 → expect TypeError.\nException / price wrong type\nprice=\"10\" → expect TypeError.\nException / quantity wrong type\nquantity=2.5 or \"2\" → expect TypeError.\nremove_item(name)\nNormal / remove existing\nAfter adding \"A\", remove it → order becomes empty.\nException / remove non-existent\nRemove \"NoSuch\" → expect ValueError.\nException / name wrong type\nname= None → expect TypeError.\nget_subtotal()\nNormal / multiple items\nAdd items summing to known amount → subtotal matches.\nException / empty order\nOn fresh calculator → expect ValueError.\napply_discount(subtotal, discount)\nNormal / zero discount\ndiscount=0.0 → return equal to subtotal.\nNormal / full discount\ndiscount=1.0 → return 0.0.\nNormal / partial discount\nE.g. (100.0, 0.25) → return 75.0.\nException / negative subtotal\nsubtotal=-5 → expect ValueError.\nException / discount < 0\ndiscount=-0.1 → expect ValueError.\nException / discount > 1\ndiscount=1.2 → expect ValueError.\nException / subtotal wrong type\nsubtotal=\"50\" → expect TypeError.\nException / discount wrong type\ndiscount=None → expect TypeError.\ncalculate_shipping(discounted_subtotal)\nNormal / below threshold\ndiscounted_subtotal < free_shipping_threshold → return shipping_cost.\nNormal / exactly at threshold\ndiscounted_subtotal == free_shipping_threshold → return 0.0.\nNormal / above threshold\ndiscounted_subtotal > free_shipping_threshold → return 0.0.\nException / wrong type\ndiscounted_subtotal=\"100\" → expect TypeError.\ncalculate_tax(amount)\nNormal / positive amount\namount=100.0 → return tax_rate * 100.0.\nNormal / zero amount\namount=0.0 → return 0.0.\nException / negative amount\namount=-1 → expect ValueError.\nException / wrong type\namount=[50] → expect TypeError.\ncalculate_total(discount=0.0)\nNormal / no discount, free shipping\nOrder subtotal ≥ threshold, discount=0 → total = subtotal + tax(subtotal).\nNormal / discount, shipping applies\nSubtotal=100, discount=0.1 → discounted=90 (< threshold), shipping added, tax on (90+shipping).\nException / empty order\nFresh calculator without items → expect ValueError.\nException / discount < 0\ndiscount=-0.1 → expect ValueError.\nException / discount > 1\ndiscount=1.5 → expect ValueError.\nException / discount wrong type\ndiscount=\"0.2\" → expect TypeError.\ntotal_items()\nNormal / after adds\nSum of quantities matches expected.\nNormal / empty\nOn fresh calculator → return 0.\nclear_order()\nNormal / clear after adds\nAdd items, call clear_order(), then is_empty() True, list_items() empty, get_subtotal() raises.\nlist_items()\nNormal / distinct items\nReturns names of all unique items added.\nNormal / repeated adds deduped\nRe-adding same name+price doesn’t duplicate in list.\nNormal / empty\nReturns [] when no items added.\nis_empty()\nNormal / fresh\nReturns True on new calculator.\nNormal / after add\nReturns False once an item is added.\nNormal / after clear\nReturns True after clear_order().\nThat set of ~60 atomic scenarios will ensure every branch, edge condition, and exception path is tested for full coverage.",
        "response_time": 23.65751600265503
      },
      {
        "step": 3,
        "prompt": "Now, based on the test scenarios you just listed, generate the complete Python unit test suite using the `unittest` framework.\n\nFollow these rules:\n- Include one test method per scenario.\n- Use meaningful test method names.\n- Do not include comments or explanations.\n- Output a valid `.py` file containing only the test class.\n\nThe output must contain only Python code.",
        "response": "python\nKopiuj\nEdytuj\nimport unittest\nfrom order_calculator import OrderCalculator\n\nclass TestOrderCalculator(unittest.TestCase):\n    def test_init_default_parameters(self):\n        calc = OrderCalculator()\n        self.assertTrue(calc.is_empty())\n        self.assertEqual(calc.total_items(), 0)\n        self.assertEqual(calc.list_items(), [])\n\n    def test_init_custom_parameters(self):\n        calc = OrderCalculator(tax_rate=0.1, free_shipping_threshold=50.0, shipping_cost=5.0)\n        self.assertEqual(calc.tax_rate, 0.1)\n        self.assertEqual(calc.free_shipping_threshold, 50.0)\n        self.assertEqual(calc.shipping_cost, 5.0)\n\n    def test_init_invalid_tax_rate_too_low(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=-0.01)\n\n    def test_init_invalid_tax_rate_too_high(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=1.5)\n\n    def test_init_tax_rate_wrong_type(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(tax_rate=\"0.2\")\n\n    def test_init_negative_free_shipping_threshold(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(free_shipping_threshold=-10)\n\n    def test_init_free_shipping_threshold_wrong_type(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(free_shipping_threshold=\"100\")\n\n    def test_init_negative_shipping_cost(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(shipping_cost=-5)\n\n    def test_init_shipping_cost_wrong_type(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(shipping_cost=[10])\n\n    def test_add_item_single_default_quantity(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Widget\", 10.0)\n        self.assertEqual(calc.get_subtotal(), 10.0)\n        self.assertEqual(calc.total_items(), 1)\n        self.assertEqual(calc.list_items(), [\"Widget\"])\n\n    def test_add_item_quantity_greater_than_one(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Gadget\", 5.0, 3)\n        self.assertEqual(calc.get_subtotal(), 15.0)\n        self.assertEqual(calc.total_items(), 3)\n\n    def test_add_item_repeated_same_name_price(self):\n        calc = OrderCalculator()\n        calc.add_item(\"X\", 2.0, 2)\n        calc.add_item(\"X\", 2.0, 4)\n        self.assertEqual(calc.get_subtotal(), 12.0)\n        self.assertEqual(calc.total_items(), 6)\n        self.assertEqual(calc.list_items(), [\"X\"])\n\n    def test_add_multiple_distinct_items(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 1.0, 2)\n        calc.add_item(\"B\", 2.0, 3)\n        self.assertEqual(calc.get_subtotal(), 8.0)\n        self.assertCountEqual(calc.list_items(), [\"A\", \"B\"])\n        self.assertEqual(calc.total_items(), 5)\n\n    def test_add_item_empty_name(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"\", 10.0)\n\n    def test_add_item_price_non_positive(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"Item\", 0)\n\n    def test_add_item_quantity_less_than_one(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"Item\", 1.0, 0)\n\n    def test_add_item_same_name_different_price(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Item\", 1.0)\n        with self.assertRaises(ValueError):\n            calc.add_item(\"Item\", 2.0)\n\n    def test_add_item_name_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(123, 10.0)\n\n    def test_add_item_price_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(\"Item\", \"10\")\n\n    def test_add_item_quantity_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(\"Item\", 1.0, 2.5)\n\n    def test_remove_item_existing(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 1.0)\n        calc.remove_item(\"A\")\n        self.assertTrue(calc.is_empty())\n\n    def test_remove_item_nonexistent(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.remove_item(\"NoSuch\")\n\n    def test_remove_item_name_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.remove_item(None)\n\n    def test_get_subtotal_multiple_items(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 2.0, 2)\n        calc.add_item(\"B\", 3.0, 3)\n        self.assertEqual(calc.get_subtotal(), 13.0)\n\n    def test_get_subtotal_empty_order(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.get_subtotal()\n\n    def test_apply_discount_zero(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(100.0, 0.0), 100.0)\n\n    def test_apply_discount_full(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(100.0, 1.0), 0.0)\n\n    def test_apply_discount_partial(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(100.0, 0.25), 75.0)\n\n    def test_apply_discount_negative_subtotal(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(-5.0, 0.1)\n\n    def test_apply_discount_discount_less_than_zero(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(100.0, -0.1)\n\n    def test_apply_discount_discount_greater_than_one(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(100.0, 1.2)\n\n    def test_apply_discount_subtotal_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.apply_discount(\"50\", 0.1)\n\n    def test_apply_discount_discount_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.apply_discount(50.0, None)\n\n    def test_calculate_shipping_below_threshold(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_shipping(50.0), calc.shipping_cost)\n\n    def test_calculate_shipping_at_threshold(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_shipping(calc.free_shipping_threshold), 0.0)\n\n    def test_calculate_shipping_above_threshold(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_shipping(200.0), 0.0)\n\n    def test_calculate_shipping_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_shipping(\"100\")\n\n    def test_calculate_tax_positive_amount(self):\n        calc = OrderCalculator()\n        self.assertAlmostEqual(calc.calculate_tax(100.0), 23.0)\n\n    def test_calculate_tax_zero_amount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_tax(0.0), 0.0)\n\n    def test_calculate_tax_negative_amount(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_tax(-1.0)\n\n    def test_calculate_tax_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_tax([50])\n\n    def test_calculate_total_no_discount_free_shipping(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 50.0, 2)\n        self.assertAlmostEqual(calc.calculate_total(), 123.0)\n\n    def test_calculate_total_with_discount_shipping_applies(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 50.0, 2)\n        self.assertAlmostEqual(calc.calculate_total(0.1), 123.0)\n\n    def test_calculate_total_empty_order(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_total()\n\n    def test_calculate_total_discount_less_than_zero(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 10.0)\n        with self.assertRaises(ValueError):\n            calc.calculate_total(-0.1)\n\n    def test_calculate_total_discount_greater_than_one(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 10.0)\n        with self.assertRaises(ValueError):\n            calc.calculate_total(1.5)\n\n    def test_calculate_total_discount_wrong_type(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 10.0)\n        with self.assertRaises(TypeError):\n            calc.calculate_total(\"0.2\")\n\n    def test_total_items_after_adds(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 1.0, 2)\n        calc.add_item(\"B\", 2.0, 3)\n        self.assertEqual(calc.total_items(), 5)\n\n    def test_total_items_empty(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.total_items(), 0)\n\n    def test_clear_order(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 1.0)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n        self.assertEqual(calc.list_items(), [])\n        with self.assertRaises(ValueError):\n            calc.get_subtotal()\n\n    def test_list_items_distinct(self):\n        calc = OrderCalculator()\n        calc.add_item(\"X\", 1.0)\n        calc.add_item(\"Y\", 2.0)\n        self.assertCountEqual(calc.list_items(), [\"X\", \"Y\"])\n\n    def test_list_items_repeated_adds_deduped(self):\n        calc = OrderCalculator()\n        calc.add_item(\"X\", 1.0)\n        calc.add_item(\"X\", 1.0)\n        self.assertEqual(calc.list_items(), [\"X\"])\n\n    def test_list_items_empty(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.list_items(), [])\n\n    def test_is_empty_fresh(self):\n        calc = OrderCalculator()\n        self.assertTrue(calc.is_empty())\n\n    def test_is_empty_after_add(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 1.0)\n        self.assertFalse(calc.is_empty())\n\n    def test_is_empty_after_clear(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 1.0)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n\nif __name__ == \"__main__\":\n    unittest.main()",
        "response_time": 31.97025775909424
      }
    ],
    "final_response": "python\nKopiuj\nEdytuj\nimport unittest\nfrom order_calculator import OrderCalculator\n\nclass TestOrderCalculator(unittest.TestCase):\n    def test_init_default_parameters(self):\n        calc = OrderCalculator()\n        self.assertTrue(calc.is_empty())\n        self.assertEqual(calc.total_items(), 0)\n        self.assertEqual(calc.list_items(), [])\n\n    def test_init_custom_parameters(self):\n        calc = OrderCalculator(tax_rate=0.1, free_shipping_threshold=50.0, shipping_cost=5.0)\n        self.assertEqual(calc.tax_rate, 0.1)\n        self.assertEqual(calc.free_shipping_threshold, 50.0)\n        self.assertEqual(calc.shipping_cost, 5.0)\n\n    def test_init_invalid_tax_rate_too_low(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=-0.01)\n\n    def test_init_invalid_tax_rate_too_high(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=1.5)\n\n    def test_init_tax_rate_wrong_type(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(tax_rate=\"0.2\")\n\n    def test_init_negative_free_shipping_threshold(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(free_shipping_threshold=-10)\n\n    def test_init_free_shipping_threshold_wrong_type(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(free_shipping_threshold=\"100\")\n\n    def test_init_negative_shipping_cost(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(shipping_cost=-5)\n\n    def test_init_shipping_cost_wrong_type(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(shipping_cost=[10])\n\n    def test_add_item_single_default_quantity(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Widget\", 10.0)\n        self.assertEqual(calc.get_subtotal(), 10.0)\n        self.assertEqual(calc.total_items(), 1)\n        self.assertEqual(calc.list_items(), [\"Widget\"])\n\n    def test_add_item_quantity_greater_than_one(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Gadget\", 5.0, 3)\n        self.assertEqual(calc.get_subtotal(), 15.0)\n        self.assertEqual(calc.total_items(), 3)\n\n    def test_add_item_repeated_same_name_price(self):\n        calc = OrderCalculator()\n        calc.add_item(\"X\", 2.0, 2)\n        calc.add_item(\"X\", 2.0, 4)\n        self.assertEqual(calc.get_subtotal(), 12.0)\n        self.assertEqual(calc.total_items(), 6)\n        self.assertEqual(calc.list_items(), [\"X\"])\n\n    def test_add_multiple_distinct_items(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 1.0, 2)\n        calc.add_item(\"B\", 2.0, 3)\n        self.assertEqual(calc.get_subtotal(), 8.0)\n        self.assertCountEqual(calc.list_items(), [\"A\", \"B\"])\n        self.assertEqual(calc.total_items(), 5)\n\n    def test_add_item_empty_name(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"\", 10.0)\n\n    def test_add_item_price_non_positive(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"Item\", 0)\n\n    def test_add_item_quantity_less_than_one(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"Item\", 1.0, 0)\n\n    def test_add_item_same_name_different_price(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Item\", 1.0)\n        with self.assertRaises(ValueError):\n            calc.add_item(\"Item\", 2.0)\n\n    def test_add_item_name_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(123, 10.0)\n\n    def test_add_item_price_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(\"Item\", \"10\")\n\n    def test_add_item_quantity_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(\"Item\", 1.0, 2.5)\n\n    def test_remove_item_existing(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 1.0)\n        calc.remove_item(\"A\")\n        self.assertTrue(calc.is_empty())\n\n    def test_remove_item_nonexistent(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.remove_item(\"NoSuch\")\n\n    def test_remove_item_name_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.remove_item(None)\n\n    def test_get_subtotal_multiple_items(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 2.0, 2)\n        calc.add_item(\"B\", 3.0, 3)\n        self.assertEqual(calc.get_subtotal(), 13.0)\n\n    def test_get_subtotal_empty_order(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.get_subtotal()\n\n    def test_apply_discount_zero(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(100.0, 0.0), 100.0)\n\n    def test_apply_discount_full(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(100.0, 1.0), 0.0)\n\n    def test_apply_discount_partial(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(100.0, 0.25), 75.0)\n\n    def test_apply_discount_negative_subtotal(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(-5.0, 0.1)\n\n    def test_apply_discount_discount_less_than_zero(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(100.0, -0.1)\n\n    def test_apply_discount_discount_greater_than_one(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(100.0, 1.2)\n\n    def test_apply_discount_subtotal_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.apply_discount(\"50\", 0.1)\n\n    def test_apply_discount_discount_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.apply_discount(50.0, None)\n\n    def test_calculate_shipping_below_threshold(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_shipping(50.0), calc.shipping_cost)\n\n    def test_calculate_shipping_at_threshold(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_shipping(calc.free_shipping_threshold), 0.0)\n\n    def test_calculate_shipping_above_threshold(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_shipping(200.0), 0.0)\n\n    def test_calculate_shipping_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_shipping(\"100\")\n\n    def test_calculate_tax_positive_amount(self):\n        calc = OrderCalculator()\n        self.assertAlmostEqual(calc.calculate_tax(100.0), 23.0)\n\n    def test_calculate_tax_zero_amount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_tax(0.0), 0.0)\n\n    def test_calculate_tax_negative_amount(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_tax(-1.0)\n\n    def test_calculate_tax_wrong_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_tax([50])\n\n    def test_calculate_total_no_discount_free_shipping(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 50.0, 2)\n        self.assertAlmostEqual(calc.calculate_total(), 123.0)\n\n    def test_calculate_total_with_discount_shipping_applies(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 50.0, 2)\n        self.assertAlmostEqual(calc.calculate_total(0.1), 123.0)\n\n    def test_calculate_total_empty_order(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_total()\n\n    def test_calculate_total_discount_less_than_zero(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 10.0)\n        with self.assertRaises(ValueError):\n            calc.calculate_total(-0.1)\n\n    def test_calculate_total_discount_greater_than_one(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 10.0)\n        with self.assertRaises(ValueError):\n            calc.calculate_total(1.5)\n\n    def test_calculate_total_discount_wrong_type(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 10.0)\n        with self.assertRaises(TypeError):\n            calc.calculate_total(\"0.2\")\n\n    def test_total_items_after_adds(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 1.0, 2)\n        calc.add_item(\"B\", 2.0, 3)\n        self.assertEqual(calc.total_items(), 5)\n\n    def test_total_items_empty(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.total_items(), 0)\n\n    def test_clear_order(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 1.0)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n        self.assertEqual(calc.list_items(), [])\n        with self.assertRaises(ValueError):\n            calc.get_subtotal()\n\n    def test_list_items_distinct(self):\n        calc = OrderCalculator()\n        calc.add_item(\"X\", 1.0)\n        calc.add_item(\"Y\", 2.0)\n        self.assertCountEqual(calc.list_items(), [\"X\", \"Y\"])\n\n    def test_list_items_repeated_adds_deduped(self):\n        calc = OrderCalculator()\n        calc.add_item(\"X\", 1.0)\n        calc.add_item(\"X\", 1.0)\n        self.assertEqual(calc.list_items(), [\"X\"])\n\n    def test_list_items_empty(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.list_items(), [])\n\n    def test_is_empty_fresh(self):\n        calc = OrderCalculator()\n        self.assertTrue(calc.is_empty())\n\n    def test_is_empty_after_add(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 1.0)\n        self.assertFalse(calc.is_empty())\n\n    def test_is_empty_after_clear(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 1.0)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n\nif __name__ == \"__main__\":\n    unittest.main()",
    "total_response_time": 85.25155329704285,
    "strategy": "chain_of_thought_prompting",
    "context_type": "interface_docstring"
  }
}