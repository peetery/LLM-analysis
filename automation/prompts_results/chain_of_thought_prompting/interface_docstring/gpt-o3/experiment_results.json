{
  "model": "o3",
  "strategy": "chain_of_thought_prompting",
  "context_type": "interface_docstring",
  "timestamp": "2025-07-03T01:07:15.770825",
  "response_time": 136.25462174415588,
  "test_file": "prompts_results\\chain_of_thought_prompting\\interface_docstring\\gpt-o3\\tests.py",
  "raw_results": {
    "responses": [
      {
        "step": 1,
        "prompt": "You are a software testing assistant. Your task is to generate a set of unit tests for a Python class provided below.\n\nThe tests should:\n- use the `unittest` framework,\n- cover all public methods,\n- test typical usage as well as edge cases, invalid inputs, and exceptions,\n- be clear, atomic, and minimal.\n\nYou will now analyze the class to prepare relevant test cases.\nDo not write test code yet.\n\nBelow is the interface+docstrings of the class:\n\n```python\nfrom typing import TypedDict, List\n\nclass Item(TypedDict):\n    \"\"\"\n    Represents a single product entry in the order.\n\n:key name: The name of the product.\n    :key price: The price per unit of the product.\n    :key quantity: The number of units of the product.\n    \"\"\"\n\nclass OrderCalculator:\n    def __init__(self, tax_rate=0.23, free_shipping_threshold=100.0, shipping_cost=10.0):\n        \"\"\"\n        Initializes a new OrderCalculator instance.\n        Initializes an empty list of items (each represented as a TypedDict 'Item')\n        and stores the configured tax and shipping parameters.\n\n:param tax_rate: The percentage of tax applied to the final amount, expressed as a float between 0.0 and 1.0 (default is 0.23 for 23%).\n        :param free_shipping_threshold: The minimum order value (after discount) that qualifies for free shipping (default is 100.0).\n        :param shipping_cost: The cost of shipping applied if the order does not meet the free shipping threshold (default is 10.0).\n\n:raises ValueError:\n            - If tax_rate is not in the range [0.0, 1.0].\n            - If free_shipping_threshold is negative.\n            - If shipping_cost is negative.\n        :raises TypeError: If any parameter is of incorrect type.\n        \"\"\"\n\ndef add_item(self, name: str, price: float, quantity: int = 1):\n        \"\"\"\n        Add an item to the order.\n\nIf an item with the same name and price already exists, its quantity is increased.\n\n:param name: the name of the item\n        :param price: the price of the item\n        :param quantity: the quantity of the item (default is 1)\n        :raises ValueError: If name is empty, price <= 0, quantity < 1, or item with same name but different price exists.\n        :raises TypeError: If inputs are of incorrect types.\n        \"\"\"\n\ndef remove_item(self, name: str):\n        \"\"\"\n        Removes an item from the order.\n\n:param name: The name of the item to remove.\n        :raises ValueError: If no item with the given name exists in the order.\n        :raises TypeError: If name is not a string.\n        \"\"\"\n\ndef get_subtotal(self) -> float:\n        \"\"\"\n        Calculates the subtotal (sum of item prices times their quantities) for all items in the order.\n\n:return: The subtotal as a float.\n        :raises ValueError: If the order is empty.\n        \"\"\"\n\ndef apply_discount(self, subtotal: float, discount: float) -> float:\n        \"\"\"\n        Applies a percentage discount to the given subtotal.\n\n:param subtotal: the subtotal amount (must be >= 0)\n        :param discount: the discount rate as a float between 0.0 and 1.0 (e.g. 0.2 = 20%).\n        :return: The discounted subtotal.\n        :raises ValueError: If subtotal < 0 or discount is outside the [0.0, 1.0] range.\n        :raises TypeError: If inputs are of incorrect types.\n        \"\"\"\n\ndef calculate_shipping(self, discounted_subtotal: float) -> float:\n        \"\"\"\n        Calculates the shipping cost based on the discounted subtotal.\n\nIf the discounted subtotal >= free shipping threshold shipping is free (0.0).\n        Otherwise, the standard shipping cost is applied.\n\n:param discounted_subtotal: The subtotal amount after applying discount (must be >= 0.0).\n        :return: The shipping cost as a float (0.0 or self.shipping_cost).\n        :raises TypeError: If input is not a number.\n        \"\"\"\n\ndef calculate_tax(self, amount: float) -> float:\n        \"\"\"\n        Calculates the tax based on the provided amount using the configured tax rate.\n\n:param amount: The amount on which to calculate the tax (must be >= 0.0).\n        :return: The tax as a float.\n        :raises ValueError: If the amount is negative.\n        :raises TypeError: If input is not a number.\n        \"\"\"\n\ndef calculate_total(self, discount: float = 0.0) -> float:\n        \"\"\"\n        Calculates the total cost of the order after applying discount, shipping, and tax.\n\nThis method performs the following steps:\n        1. Calculates the subtotal from all items.\n        2. Applies the given discount.\n        3. Adds shipping cost if necessary.\n        4. Calculates tax on the discounted subtotal + shipping.\n\n:param discount: Discount rate between 0.0 and 1.0 (e.g. 0.2 = 20%).\n        :return: The final total as a float.\n        :raises ValueError:\n            - If the subtotal is negative.\n            - If the discount is invalid.\n            - If the order is empty.\n        :raises TypeError: If input is not a number.\n        \"\"\"\n\ndef total_items(self) -> int:\n        \"\"\"\n        Returns the total quantity of all items in the order.\n\n:return: The sum of the quantities of all items.\n        :return:\n        \"\"\"\n\ndef clear_order(self):\n        \"\"\"\n        Removes all items from the order, resetting it to an empty state.\n        \"\"\"\n\ndef list_items(self) -> List[str]:\n        \"\"\"\n        Returns a list of all unique item names currently in the order.\n\n:return: A list of unique item names (no duplicates).\n        \"\"\"\n\ndef is_empty(self) -> bool:\n        \"\"\"\n        Checks whether the order is currently empty.\n\n:return: True if no items are in the order, False otherwise.\n        \"\"\"\n```",
        "response": "Analysis & Test-Case Inventory for OrderCalculator\nBelow is an organized checklist of unit-test scenarios that will fully exercise every public interface of the class.\n(The next step will be to translate each scenario into individual unittest.TestCase methods.)\n1. __init__\n# Scenario Inputs Expected\n1.1 Default construction none object created; internal list empty; params set to defaults\n1.2 Custom valid parameters tax_rate=0.05, free_shipping_threshold=50, shipping_cost=5 attributes reflect arguments\n1.3 Boundary tax_rate 0 and 1 tax_rate=0 then tax_rate=1 allowed, no error\n1.4 Invalid tax_rate <0 or >1 tax_rate=-0.1, 1.2 ValueError\n1.5 Negative free_shipping_threshold free_shipping_threshold=-1 ValueError\n1.6 Negative shipping_cost shipping_cost=-5 ValueError\n1.7 Wrong type arguments (e.g., string) \"0.2\" for tax_rate TypeError\n2. add_item\n# Scenario Inputs Expected\n2.1 Add first item \"Pen\", 2.0, 3 appears in list; quantity = 3\n2.2 Add same name & price again \"Pen\", 2.0, 2 quantity increments to 5\n2.3 Add same name but different price \"Pen\", 2.5, 1 ValueError\n2.4 Empty name \"\" , 1.0, 1 ValueError\n2.5 Non-positive price \"Book\", 0, 1 and negative price ValueError\n2.6 Quantity < 1 \"Book\", 5.0, 0 ValueError\n2.7 Wrong-type args (e.g., price str, quantity str) \"Pen\", \"2.0\", \"3\" TypeError\n3. remove_item\n# Scenario Inputs Expected\n3.1 Remove existing item \"Pen\" item gone; list length decreases\n3.2 Remove non-existent item \"Ghost\" ValueError\n3.3 Wrong-type name (e.g., int) 123 TypeError\n4. get_subtotal\n# Scenario State Expected\n4.1 Typical subtotal items: Pen 2×3, Book 10×1 result ≈ (2*3)+(10*1)=16\n4.2 Empty order no items ValueError\n5. apply_discount\n# Scenario Inputs Expected\n5.1 Typical discount 20 % subtotal=100, discount=0.2 result ≈ 80\n5.2 Discount 0 (no change) discount=0 result == subtotal\n5.3 Discount 1 (100 %) discount=1 result == 0\n5.4 Invalid discount <0 or >1 -0.1, 1.5 ValueError\n5.5 Negative subtotal subtotal=-5 ValueError\n5.6 Wrong-type args (e.g., str) \"100\", 0.1 TypeError\n6. calculate_shipping\n# Scenario Inputs / Config Expected\n6.1 Below free-shipping threshold subtotal 80 (threshold 100) returns shipping_cost\n6.2 Exactly at threshold subtotal 100 returns 0\n6.3 Above threshold subtotal 150 returns 0\n6.4 Wrong-type input \"80\" TypeError\n(Spec does not forbid negative discounted_subtotal; we’ll skip that to avoid guessing implementation behavior.)\n7. calculate_tax\n# Scenario Inputs Expected\n7.1 Typical amount amount=100, tax_rate=0.2 result ≈ 20\n7.2 Zero amount 0 tax = 0\n7.3 Negative amount -1 ValueError\n7.4 Wrong-type amount \"50\" TypeError\n8. calculate_total\n# Scenario Setup + Input Expected\n8.1 No discount, shipping applied items total 50 < threshold total = subtotal + shipping + tax\n8.2 Discount triggers free shipping subtotal 120, discount 0.2 → discounted 96 (< 100) so shipping charged; verify formula\n8.3 Discount keeps free shipping subtotal 130, discount 0.1 → discounted 117 (≥ 100) shipping 0\n8.4 Discount = 0 same as 8.1 but discount 0\n8.5 Discount 100 % discount 1 → subtotal 0, shipping charged (threshold unmet), tax on shipping only\n8.6 Invalid discount <0 or >1 -0.1, 1.1 ValueError\n8.7 Empty order call without adding items ValueError\n8.8 Wrong-type discount \"0.1\" TypeError\n(All float assertions will use assertAlmostEqual.)\n9. total_items\n# Scenario State Expected\n9.1 Multiple items & quantities Pen×3 + Book×2 returns 5\n9.2 Empty order 0\n10. clear_order\n# Scenario Steps Expected\n10.1 Clear after items added add a couple items then clear_order() list empty; is_empty() → True; total_items() → 0\n11. list_items\n# Scenario State Expected\n11.1 Unique names only Pen×2 + Pen (same price) + Book returns [\"Pen\", \"Book\"] (order not important)\n11.2 Empty order returns []\n12. is_empty\n# Scenario Steps Expected\n12.1 Initially new calculator True\n12.2 After adding item add one item False\n12.3 After clearing clear True\nAdditional Notes for Implementation\nFloat comparisons: use assertAlmostEqual with a small places or delta.\nAtomicity: one assertion per logical outcome; separate tests for exceptions using assertRaises.\nSetUp convenience: a setUp helper can create a fresh OrderCalculator per test, plus utility for adding standard items.\nEdge coverage: parameters at exact boundaries (0, 1, threshold values) are included.\nType errors: every public method that validates type gets at least one wrong-type test.",
        "response_time": 36.766011238098145
      },
      {
        "step": 2,
        "prompt": "Based on the class above, list all relevant unit test scenarios you would create.\nEach scenario should describe:\n- the method being tested,\n- the type of case (e.g. normal use, invalid input, exception),\n- a short explanation of the intent.\nList as many scenarios as you can think of, covering all aspects of the class.\nDo not write test code yet.\n\n",
        "response": "Below is an exhaustive catalogue of unit-test scenarios for every public method of OrderCalculator.\nFor each scenario you’ll find:\nMethod – the function under test\nCase type – e.g. normal, boundary, invalid input, exception path\nIntent – a concise description of what the test verifies\n__init__\n# Case type Intent\n1.1 normal Construct with all defaults; internal list empty and parameters equal defaults (0.23, 100, 10).\n1.2 normal Construct with valid custom values and confirm attributes.\n1.3 boundary Accepts tax_rate=0.0 (0 %) without error.\n1.4 boundary Accepts tax_rate=1.0 (100 %) without error.\n1.5 exception tax_rate < 0 raises ValueError.\n1.6 exception tax_rate > 1 raises ValueError.\n1.7 exception Negative free_shipping_threshold raises ValueError.\n1.8 exception Negative shipping_cost raises ValueError.\n1.9 invalid-type Non-numeric tax_rate (e.g. string) raises TypeError.\n1.10 invalid-type Non-numeric free_shipping_threshold raises TypeError.\n1.11 invalid-type Non-numeric shipping_cost raises TypeError.\nadd_item\n# Case type Intent\n2.1 normal Add first item; entry appears with correct qty.\n2.2 normal Add same name & price again; quantity accumulates.\n2.3 exception Same name but different price triggers ValueError.\n2.4 boundary Add with quantity default (implicit 1).\n2.5 exception Empty string name triggers ValueError.\n2.6 exception price ≤ 0 (zero or negative) raises ValueError.\n2.7 exception quantity < 1 raises ValueError.\n2.8 invalid-type Non-string name raises TypeError.\n2.9 invalid-type Non-numeric price raises TypeError.\n2.10 invalid-type Non-int quantity raises TypeError.\nremove_item\n# Case type Intent\n3.1 normal Remove existing item; list shrinks.\n3.2 exception Removing non-existent name raises ValueError.\n3.3 invalid-type Name not a string raises TypeError.\nget_subtotal\n# Case type Intent\n4.1 normal Calculates correct subtotal for multiple items/qty.\n4.2 exception Empty order triggers ValueError.\napply_discount\n# Case type Intent\n5.1 normal 20 % discount applied correctly.\n5.2 boundary Discount 0 returns original subtotal.\n5.3 boundary Discount 1 returns zero.\n5.4 exception Discount < 0 raises ValueError.\n5.5 exception Discount > 1 raises ValueError.\n5.6 exception Negative subtotal raises ValueError.\n5.7 invalid-type Non-numeric subtotal raises TypeError.\n5.8 invalid-type Non-numeric discount raises TypeError.\ncalculate_shipping\n# Case type Intent\n6.1 normal Subtotal < threshold → returns configured shipping_cost.\n6.2 boundary Subtotal exactly = threshold → free shipping (0).\n6.3 normal Subtotal > threshold → free shipping (0).\n6.4 invalid-type Non-numeric input raises TypeError.\ncalculate_tax\n# Case type Intent\n7.1 normal Computes tax correctly on positive amount.\n7.2 boundary Amount 0 yields tax 0.\n7.3 exception Negative amount raises ValueError.\n7.4 invalid-type Non-numeric amount raises TypeError.\ncalculate_total\n# Case type Intent\n8.1 normal No discount, subtotal below threshold → subtotal + shipping + tax.\n8.2 normal Discount lowers subtotal below threshold → shipping added.\n8.3 normal Discounted subtotal still ≥ threshold → shipping free.\n8.4 boundary Discount 0 behaves same as 8.1.\n8.5 boundary Discount 1 (100 %) → pay only shipping + tax on shipping.\n8.6 exception Discount < 0 raises ValueError.\n8.7 exception Discount > 1 raises ValueError.\n8.8 exception Call with empty order raises ValueError.\n8.9 invalid-type Non-numeric discount raises TypeError.\ntotal_items\n# Case type Intent\n9.1 normal Returns sum of quantities across items.\n9.2 boundary Empty order returns 0.\nclear_order\n# Case type Intent\n10.1 normal After clear, order list empty and is_empty() true.\nlist_items\n# Case type Intent\n11.1 normal Returns unique names only (no duplicates).\n11.2 boundary Empty order returns empty list.\nis_empty\n# Case type Intent\n12.1 normal Fresh instance is empty.\n12.2 normal After adding item, reports not empty.\n12.3 normal After clearing, reports empty again.\nThese scenarios collectively exercise all functional paths, edge cases, type-checking branches, and error handling exposed by OrderCalculator.",
        "response_time": 27.463661432266235
      },
      {
        "step": 3,
        "prompt": "Now, based on the test scenarios you just listed, generate the complete Python unit test suite using the `unittest` framework.\n\nFollow these rules:\n- Include one test method per scenario.\n- Use meaningful test method names.\n- Do not include comments or explanations.\n- Output a valid `.py` file containing only the test class.\n\nThe output must contain only Python code.",
        "response": "python\nKopiuj\nEdytuj\nimport unittest\nfrom order_calculator import OrderCalculator\n\n\nclass TestOrderCalculator(unittest.TestCase):\n    # __init__ scenarios\n    def test_init_defaults(self):\n        calc = OrderCalculator()\n        self.assertTrue(calc.is_empty())\n        self.assertAlmostEqual(calc.tax_rate, 0.23)\n        self.assertAlmostEqual(calc.free_shipping_threshold, 100.0)\n        self.assertAlmostEqual(calc.shipping_cost, 10.0)\n\n    def test_init_custom_values(self):\n        calc = OrderCalculator(tax_rate=0.05, free_shipping_threshold=50, shipping_cost=5)\n        self.assertAlmostEqual(calc.tax_rate, 0.05)\n        self.assertAlmostEqual(calc.free_shipping_threshold, 50)\n        self.assertAlmostEqual(calc.shipping_cost, 5)\n\n    def test_init_tax_rate_zero(self):\n        calc = OrderCalculator(tax_rate=0.0)\n        self.assertAlmostEqual(calc.tax_rate, 0.0)\n\n    def test_init_tax_rate_one(self):\n        calc = OrderCalculator(tax_rate=1.0)\n        self.assertAlmostEqual(calc.tax_rate, 1.0)\n\n    def test_init_tax_rate_negative_error(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=-0.1)\n\n    def test_init_tax_rate_above_one_error(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=1.2)\n\n    def test_init_negative_free_shipping_threshold_error(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(free_shipping_threshold=-1)\n\n    def test_init_negative_shipping_cost_error(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(shipping_cost=-5)\n\n    def test_init_tax_rate_type_error(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(tax_rate=\"0.2\")\n\n    def test_init_free_shipping_threshold_type_error(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(free_shipping_threshold=\"50\")\n\n    def test_init_shipping_cost_type_error(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(shipping_cost=\"10\")\n\n    # add_item scenarios\n    def test_add_item_first(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 2.0, 3)\n        self.assertEqual(calc.total_items(), 3)\n\n    def test_add_item_accumulates_quantity(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 2.0, 3)\n        calc.add_item(\"Pen\", 2.0, 2)\n        self.assertEqual(calc.total_items(), 5)\n\n    def test_add_item_same_name_diff_price_error(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 2.0, 1)\n        with self.assertRaises(ValueError):\n            calc.add_item(\"Pen\", 2.5, 1)\n\n    def test_add_item_quantity_default(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Book\", 10.0)\n        self.assertEqual(calc.total_items(), 1)\n\n    def test_add_item_empty_name_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"\", 1.0, 1)\n\n    def test_add_item_non_positive_price_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"Book\", 0, 1)\n\n    def test_add_item_quantity_less_than_one_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"Book\", 5.0, 0)\n\n    def test_add_item_name_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(123, 2.0, 1)\n\n    def test_add_item_price_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(\"Pen\", \"2.0\", 1)\n\n    def test_add_item_quantity_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(\"Pen\", 2.0, \"3\")\n\n    # remove_item scenarios\n    def test_remove_item_existing(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 2.0, 1)\n        calc.remove_item(\"Pen\")\n        self.assertTrue(calc.is_empty())\n\n    def test_remove_item_nonexistent_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.remove_item(\"Ghost\")\n\n    def test_remove_item_name_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.remove_item(123)\n\n    # get_subtotal scenarios\n    def test_get_subtotal_multiple_items(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 2.0, 3)\n        calc.add_item(\"Book\", 10.0, 1)\n        self.assertAlmostEqual(calc.get_subtotal(), 16.0)\n\n    def test_get_subtotal_empty_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.get_subtotal()\n\n    # apply_discount scenarios\n    def test_apply_discount_normal(self):\n        calc = OrderCalculator()\n        self.assertAlmostEqual(calc.apply_discount(100.0, 0.2), 80.0)\n\n    def test_apply_discount_zero(self):\n        calc = OrderCalculator()\n        self.assertAlmostEqual(calc.apply_discount(50.0, 0.0), 50.0)\n\n    def test_apply_discount_full(self):\n        calc = OrderCalculator()\n        self.assertAlmostEqual(calc.apply_discount(50.0, 1.0), 0.0)\n\n    def test_apply_discount_negative_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(50.0, -0.1)\n\n    def test_apply_discount_above_one_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(50.0, 1.5)\n\n    def test_apply_discount_negative_subtotal_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(-5.0, 0.1)\n\n    def test_apply_discount_subtotal_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.apply_discount(\"100\", 0.1)\n\n    def test_apply_discount_discount_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.apply_discount(100.0, \"0.2\")\n\n    # calculate_shipping scenarios\n    def test_calculate_shipping_below_threshold(self):\n        calc = OrderCalculator()\n        self.assertAlmostEqual(calc.calculate_shipping(80.0), calc.shipping_cost)\n\n    def test_calculate_shipping_at_threshold(self):\n        calc = OrderCalculator()\n        self.assertAlmostEqual(calc.calculate_shipping(calc.free_shipping_threshold), 0.0)\n\n    def test_calculate_shipping_above_threshold(self):\n        calc = OrderCalculator()\n        self.assertAlmostEqual(calc.calculate_shipping(150.0), 0.0)\n\n    def test_calculate_shipping_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_shipping(\"80\")\n\n    # calculate_tax scenarios\n    def test_calculate_tax_normal(self):\n        calc = OrderCalculator(tax_rate=0.2)\n        self.assertAlmostEqual(calc.calculate_tax(100.0), 20.0)\n\n    def test_calculate_tax_zero_amount(self):\n        calc = OrderCalculator()\n        self.assertAlmostEqual(calc.calculate_tax(0.0), 0.0)\n\n    def test_calculate_tax_negative_amount_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_tax(-1.0)\n\n    def test_calculate_tax_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_tax(\"50\")\n\n    # calculate_total scenarios\n    def test_calculate_total_no_discount_shipping_added(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 20.0, 2)\n        expected = 40.0 + calc.shipping_cost + 0.23 * (40.0 + calc.shipping_cost)\n        self.assertAlmostEqual(calc.calculate_total(0.0), expected)\n\n    def test_calculate_total_discount_causes_shipping(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Item\", 120.0, 1)\n        discounted = 120.0 * 0.8\n        shipping = calc.shipping_cost\n        expected = discounted + shipping + 0.23 * (discounted + shipping)\n        self.assertAlmostEqual(calc.calculate_total(0.2), expected)\n\n    def test_calculate_total_discount_keeps_free_shipping(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Item\", 130.0, 1)\n        discounted = 130.0 * 0.9\n        shipping = 0.0\n        expected = discounted + shipping + 0.23 * (discounted + shipping)\n        self.assertAlmostEqual(calc.calculate_total(0.1), expected)\n\n    def test_calculate_total_discount_zero(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 20.0, 5)\n        subtotal = 100.0\n        shipping = 0.0\n        expected = subtotal + shipping + 0.23 * subtotal\n        self.assertAlmostEqual(calc.calculate_total(0.0), expected)\n\n    def test_calculate_total_discount_full(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 25.0, 2)\n        discounted = 0.0\n        shipping = calc.shipping_cost\n        expected = shipping + 0.23 * shipping\n        self.assertAlmostEqual(calc.calculate_total(1.0), expected)\n\n    def test_calculate_total_discount_negative_error(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 10.0, 1)\n        with self.assertRaises(ValueError):\n            calc.calculate_total(-0.1)\n\n    def test_calculate_total_discount_above_one_error(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 10.0, 1)\n        with self.assertRaises(ValueError):\n            calc.calculate_total(1.1)\n\n    def test_calculate_total_empty_order_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_total(0.0)\n\n    def test_calculate_total_discount_type_error(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 10.0, 1)\n        with self.assertRaises(TypeError):\n            calc.calculate_total(\"0.1\")\n\n    # total_items scenarios\n    def test_total_items_multiple(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 2.0, 3)\n        calc.add_item(\"Book\", 5.0, 2)\n        self.assertEqual(calc.total_items(), 5)\n\n    def test_total_items_empty(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.total_items(), 0)\n\n    # clear_order scenario\n    def test_clear_order(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 2.0, 1)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n        self.assertEqual(calc.total_items(), 0)\n\n    # list_items scenarios\n    def test_list_items_unique_names(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 2.0, 2)\n        calc.add_item(\"Pen\", 2.0, 1)\n        calc.add_item(\"Book\", 5.0, 1)\n        self.assertEqual(set(calc.list_items()), {\"Pen\", \"Book\"})\n\n    def test_list_items_empty(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.list_items(), [])\n\n    # is_empty scenarios\n    def test_is_empty_initial(self):\n        calc = OrderCalculator()\n        self.assertTrue(calc.is_empty())\n\n    def test_is_empty_after_add(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 2.0, 1)\n        self.assertFalse(calc.is_empty())\n\n    def test_is_empty_after_clear(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 2.0, 1)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())",
        "response_time": 72.0249490737915
      }
    ],
    "final_response": "python\nKopiuj\nEdytuj\nimport unittest\nfrom order_calculator import OrderCalculator\n\n\nclass TestOrderCalculator(unittest.TestCase):\n    # __init__ scenarios\n    def test_init_defaults(self):\n        calc = OrderCalculator()\n        self.assertTrue(calc.is_empty())\n        self.assertAlmostEqual(calc.tax_rate, 0.23)\n        self.assertAlmostEqual(calc.free_shipping_threshold, 100.0)\n        self.assertAlmostEqual(calc.shipping_cost, 10.0)\n\n    def test_init_custom_values(self):\n        calc = OrderCalculator(tax_rate=0.05, free_shipping_threshold=50, shipping_cost=5)\n        self.assertAlmostEqual(calc.tax_rate, 0.05)\n        self.assertAlmostEqual(calc.free_shipping_threshold, 50)\n        self.assertAlmostEqual(calc.shipping_cost, 5)\n\n    def test_init_tax_rate_zero(self):\n        calc = OrderCalculator(tax_rate=0.0)\n        self.assertAlmostEqual(calc.tax_rate, 0.0)\n\n    def test_init_tax_rate_one(self):\n        calc = OrderCalculator(tax_rate=1.0)\n        self.assertAlmostEqual(calc.tax_rate, 1.0)\n\n    def test_init_tax_rate_negative_error(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=-0.1)\n\n    def test_init_tax_rate_above_one_error(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=1.2)\n\n    def test_init_negative_free_shipping_threshold_error(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(free_shipping_threshold=-1)\n\n    def test_init_negative_shipping_cost_error(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(shipping_cost=-5)\n\n    def test_init_tax_rate_type_error(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(tax_rate=\"0.2\")\n\n    def test_init_free_shipping_threshold_type_error(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(free_shipping_threshold=\"50\")\n\n    def test_init_shipping_cost_type_error(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(shipping_cost=\"10\")\n\n    # add_item scenarios\n    def test_add_item_first(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 2.0, 3)\n        self.assertEqual(calc.total_items(), 3)\n\n    def test_add_item_accumulates_quantity(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 2.0, 3)\n        calc.add_item(\"Pen\", 2.0, 2)\n        self.assertEqual(calc.total_items(), 5)\n\n    def test_add_item_same_name_diff_price_error(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 2.0, 1)\n        with self.assertRaises(ValueError):\n            calc.add_item(\"Pen\", 2.5, 1)\n\n    def test_add_item_quantity_default(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Book\", 10.0)\n        self.assertEqual(calc.total_items(), 1)\n\n    def test_add_item_empty_name_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"\", 1.0, 1)\n\n    def test_add_item_non_positive_price_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"Book\", 0, 1)\n\n    def test_add_item_quantity_less_than_one_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"Book\", 5.0, 0)\n\n    def test_add_item_name_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(123, 2.0, 1)\n\n    def test_add_item_price_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(\"Pen\", \"2.0\", 1)\n\n    def test_add_item_quantity_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(\"Pen\", 2.0, \"3\")\n\n    # remove_item scenarios\n    def test_remove_item_existing(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 2.0, 1)\n        calc.remove_item(\"Pen\")\n        self.assertTrue(calc.is_empty())\n\n    def test_remove_item_nonexistent_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.remove_item(\"Ghost\")\n\n    def test_remove_item_name_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.remove_item(123)\n\n    # get_subtotal scenarios\n    def test_get_subtotal_multiple_items(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 2.0, 3)\n        calc.add_item(\"Book\", 10.0, 1)\n        self.assertAlmostEqual(calc.get_subtotal(), 16.0)\n\n    def test_get_subtotal_empty_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.get_subtotal()\n\n    # apply_discount scenarios\n    def test_apply_discount_normal(self):\n        calc = OrderCalculator()\n        self.assertAlmostEqual(calc.apply_discount(100.0, 0.2), 80.0)\n\n    def test_apply_discount_zero(self):\n        calc = OrderCalculator()\n        self.assertAlmostEqual(calc.apply_discount(50.0, 0.0), 50.0)\n\n    def test_apply_discount_full(self):\n        calc = OrderCalculator()\n        self.assertAlmostEqual(calc.apply_discount(50.0, 1.0), 0.0)\n\n    def test_apply_discount_negative_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(50.0, -0.1)\n\n    def test_apply_discount_above_one_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(50.0, 1.5)\n\n    def test_apply_discount_negative_subtotal_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(-5.0, 0.1)\n\n    def test_apply_discount_subtotal_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.apply_discount(\"100\", 0.1)\n\n    def test_apply_discount_discount_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.apply_discount(100.0, \"0.2\")\n\n    # calculate_shipping scenarios\n    def test_calculate_shipping_below_threshold(self):\n        calc = OrderCalculator()\n        self.assertAlmostEqual(calc.calculate_shipping(80.0), calc.shipping_cost)\n\n    def test_calculate_shipping_at_threshold(self):\n        calc = OrderCalculator()\n        self.assertAlmostEqual(calc.calculate_shipping(calc.free_shipping_threshold), 0.0)\n\n    def test_calculate_shipping_above_threshold(self):\n        calc = OrderCalculator()\n        self.assertAlmostEqual(calc.calculate_shipping(150.0), 0.0)\n\n    def test_calculate_shipping_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_shipping(\"80\")\n\n    # calculate_tax scenarios\n    def test_calculate_tax_normal(self):\n        calc = OrderCalculator(tax_rate=0.2)\n        self.assertAlmostEqual(calc.calculate_tax(100.0), 20.0)\n\n    def test_calculate_tax_zero_amount(self):\n        calc = OrderCalculator()\n        self.assertAlmostEqual(calc.calculate_tax(0.0), 0.0)\n\n    def test_calculate_tax_negative_amount_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_tax(-1.0)\n\n    def test_calculate_tax_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_tax(\"50\")\n\n    # calculate_total scenarios\n    def test_calculate_total_no_discount_shipping_added(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 20.0, 2)\n        expected = 40.0 + calc.shipping_cost + 0.23 * (40.0 + calc.shipping_cost)\n        self.assertAlmostEqual(calc.calculate_total(0.0), expected)\n\n    def test_calculate_total_discount_causes_shipping(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Item\", 120.0, 1)\n        discounted = 120.0 * 0.8\n        shipping = calc.shipping_cost\n        expected = discounted + shipping + 0.23 * (discounted + shipping)\n        self.assertAlmostEqual(calc.calculate_total(0.2), expected)\n\n    def test_calculate_total_discount_keeps_free_shipping(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Item\", 130.0, 1)\n        discounted = 130.0 * 0.9\n        shipping = 0.0\n        expected = discounted + shipping + 0.23 * (discounted + shipping)\n        self.assertAlmostEqual(calc.calculate_total(0.1), expected)\n\n    def test_calculate_total_discount_zero(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 20.0, 5)\n        subtotal = 100.0\n        shipping = 0.0\n        expected = subtotal + shipping + 0.23 * subtotal\n        self.assertAlmostEqual(calc.calculate_total(0.0), expected)\n\n    def test_calculate_total_discount_full(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 25.0, 2)\n        discounted = 0.0\n        shipping = calc.shipping_cost\n        expected = shipping + 0.23 * shipping\n        self.assertAlmostEqual(calc.calculate_total(1.0), expected)\n\n    def test_calculate_total_discount_negative_error(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 10.0, 1)\n        with self.assertRaises(ValueError):\n            calc.calculate_total(-0.1)\n\n    def test_calculate_total_discount_above_one_error(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 10.0, 1)\n        with self.assertRaises(ValueError):\n            calc.calculate_total(1.1)\n\n    def test_calculate_total_empty_order_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_total(0.0)\n\n    def test_calculate_total_discount_type_error(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 10.0, 1)\n        with self.assertRaises(TypeError):\n            calc.calculate_total(\"0.1\")\n\n    # total_items scenarios\n    def test_total_items_multiple(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 2.0, 3)\n        calc.add_item(\"Book\", 5.0, 2)\n        self.assertEqual(calc.total_items(), 5)\n\n    def test_total_items_empty(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.total_items(), 0)\n\n    # clear_order scenario\n    def test_clear_order(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 2.0, 1)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n        self.assertEqual(calc.total_items(), 0)\n\n    # list_items scenarios\n    def test_list_items_unique_names(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 2.0, 2)\n        calc.add_item(\"Pen\", 2.0, 1)\n        calc.add_item(\"Book\", 5.0, 1)\n        self.assertEqual(set(calc.list_items()), {\"Pen\", \"Book\"})\n\n    def test_list_items_empty(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.list_items(), [])\n\n    # is_empty scenarios\n    def test_is_empty_initial(self):\n        calc = OrderCalculator()\n        self.assertTrue(calc.is_empty())\n\n    def test_is_empty_after_add(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 2.0, 1)\n        self.assertFalse(calc.is_empty())\n\n    def test_is_empty_after_clear(self):\n        calc = OrderCalculator()\n        calc.add_item(\"Pen\", 2.0, 1)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())",
    "total_response_time": 136.25462174415588,
    "strategy": "chain_of_thought_prompting",
    "context_type": "interface_docstring"
  }
}