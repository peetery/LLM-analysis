{
  "model": "gpt-o4-mini-high",
  "strategy": "chain_of_thought_prompting",
  "context_type": "interface",
  "timestamp": "2025-07-04T01:05:21.887790",
  "response_time": 112.75090193748474,
  "test_file": "prompts_results\\chain_of_thought_prompting\\interface\\gpt-o4-mini-high\\tests.py",
  "raw_results": {
    "responses": [
      {
        "step": 1,
        "prompt": "You are a software testing assistant. Your task is to generate a set of unit tests for a Python class provided below.\n\nThe tests should:\n- use the `unittest` framework,\n- cover all public methods,\n- test typical usage as well as edge cases, invalid inputs, and exceptions,\n- be clear, atomic, and minimal.\n\nYou will now analyze the class to prepare relevant test cases.\nDo not write test code yet. Do not write test scenarios yet. Just analyze the class and prepare for the next step.\n\nBelow is the class interface (without implementation):\n\n```python\nfrom typing import TypedDict, List\n\nclass Item(TypedDict)\n\nclass OrderCalculator:\n    def __init__(self, tax_rate=0.23, free_shipping_threshold=100.0, shipping_cost=10.0):\n\ndef add_item(self, name: str, price: float, quantity: int = 1):\n\ndef remove_item(self, name: str):\n\ndef get_subtotal(self) -> float:\n\ndef apply_discount(self, subtotal: float, discount: float) -> float:\n\ndef calculate_shipping(self, discounted_subtotal: float) -> float:\n\ndef calculate_tax(self, amount: float) -> float:\n\ndef calculate_total(self, discount: float = 0.0) -> float:\n\ndef total_items(self) -> int:\n\ndef clear_order(self):\n\ndef list_items(self) -> List[str]:\n\ndef is_empty(self) -> bool:\n\n```\n\n",
        "response": "Here’s a breakdown of the public interface and the behaviors we’ll want to cover when we write our tests:\nInitialization\nDefault parameters (tax_rate=0.23, free_shipping_threshold=100.0, shipping_cost=10.0)\nNon-default constructor arguments (e.g. zero or very large tax rates, negative shipping costs, etc.)\nInitial state: empty order (is_empty() should be True, total_items() should be 0, get_subtotal() should be 0.0, list_items() should be empty).\nadd_item(name: str, price: float, quantity: int = 1)\nTypical use: add a single item, add multiple quantities.\nAdding the same item twice should either increment its quantity or overwrite—it must be defined and tested.\nEdge cases:\nprice=0.0\nvery large price, very large quantity\nInvalid inputs:\nnon-string name\nnegative or zero quantity\nnegative price\nnon-numeric types for price or quantity\nPost-conditions:\ntotal_items() reflects added quantity\nget_subtotal() includes price×quantity\nis_empty() becomes False\nlist_items() contains the new name\nremove_item(name: str)\nTypical: remove an existing item (quantity should go to zero or the item should disappear).\nBehavior if item was added multiple times: remove entirely or decrement? (Choose expected and test it.)\nEdge: removing the last item in an order (order becomes empty again).\nInvalid: removing a name that was never added should raise a defined exception (e.g. KeyError or custom).\nInvalid input types (non-string name).\nget_subtotal() → float\nOn empty order → 0.0\nAfter one item, multiple items\nFloating-point precision (e.g. prices that have many decimals)\nItems added and then removed should update subtotal accordingly\napply_discount(subtotal: float, discount: float) → float\nTypical: percentage discount (e.g. discount=0.1 means 10% off) or absolute? (Behavior must be defined.)\nZero discount → returns subtotal unchanged\nFull discount (discount=1.0) → zero or negative?\nOver-100% discount (discount>1.0) → negative totals? Throw?\nNegative discount → increase total? Throw?\nInvalid types (non-float discount)\ncalculate_shipping(discounted_subtotal: float) → float\nBelow threshold → returns shipping_cost\nAt exactly threshold → free shipping or not? (Define and test.)\nAbove threshold → zero\nNegative discounted_subtotal → treat as zero or throw? (Define and test.)\nCustom thresholds via constructor\ncalculate_tax(amount: float) → float\nTax on zero → 0.0\nTax on positive amounts: amount * tax_rate (floating precision)\nTax on negative amounts? (Define behavior.)\nCustom tax_rate via constructor\nInvalid input types\ncalculate_total(discount: float = 0.0) → float\nNo items, no discount → total 0.0\nWith items, no discount → subtotal + shipping + tax\nWith items, with discount → ensure discount applied before shipping threshold check and tax calculation\nEdge: discount makes subtotal drop below zero → does total go negative or floor at zero? (Define and test.)\nCombination of free-shipping threshold, custom rates, and shipping costs\nInvalid discount values\ntotal_items() → int\nEmpty order → 0\nAfter adding/removing items → accurate count\nLarge quantities → ensure no overflow\nclear_order()\nAfter clear: is_empty() is True, total_items() is 0, get_subtotal() is 0.0, list_items() empty\nClearing an already empty order should be safe (no exception)\nlist_items() → List[str]\nReturns each distinct item name once\nOrder of names: deterministic? (Test expected order or sort it in tests.)\nAfter add/remove operations\nis_empty() → bool\nOn new instance → True\nAfter adds → False\nAfter removing all items / clearing → True\nStateful interactions / integration tests\nA full “checkout” flow: add several items, apply a discount, compute shipping, tax, and total, then clear the order and verify reset.\nMix of operations: add, remove some, add more, apply discount, etc., to ensure internal consistency.\nException and error handling\nInvalid method arguments (type errors, value errors)\nRemoving non-existent items\nOver-discounting or negative inputs if methods are specified to guard against those\nThis gives us a matrix of methods vs. input categories (typical, edge, invalid) to ensure 100% coverage of public behavior, state transitions, and error paths. Let me know if you’d like to adjust any of these assumptions (e.g. whether discounts are percentages vs. absolutes) before I write out the concrete test scenarios.",
        "response_time": 23.475574731826782
      },
      {
        "step": 2,
        "prompt": "Based on the class above, list all relevant unit test scenarios you would create.\nEach scenario should describe:\n- the method being tested,\n- the type of case (e.g. normal use, invalid input, exception),\n- a short explanation of the intent.\nList as many scenarios as you can think of, covering all aspects of the class.\nDo not write test code yet.\n\n",
        "response": "Here’s a comprehensive list of unit-test scenarios, organized by method. Each scenario names the method under test, the kind of case, and what it’s verifying.\n1. Initialization (__init__)\nCase: Normal use (defaults)\nIntent: Verify that with no args, tax_rate==0.23, free_shipping_threshold==100.0, shipping_cost==10.0, and internal state is empty.\nCase: Normal use (custom params)\nIntent: Construct with non-default tax_rate, free_shipping_threshold, shipping_cost and confirm they’re set.\nCase: Edge (zero values)\nIntent: tax_rate=0, free_shipping_threshold=0, shipping_cost=0 – ensure no errors and behavior matches zero thresholds.\nCase: Invalid input (negative values)\nIntent: Passing negative tax_rate, free_shipping_threshold, or shipping_cost should raise ValueError (or appropriate).\n2. add_item(name, price, quantity)\nCase: Normal use (single item)\nIntent: Add \"apple\", 1.0 → subtotal 1.0, total_items 1, is_empty()==False, list_items()==[\"apple\"].\nCase: Normal use (multiple quantity)\nIntent: Add \"banana\", 2.0, quantity=5 → subtotal 10.0, total_items 5.\nCase: Idempotence (same item twice)\nIntent: Add \"orange\", 1.5, q=2 then again \"orange\", 1.5, q=3 → subtotal 7.5, total_items 5.\nCase: Edge (price=0)\nIntent: Add \"freebie\", 0.0 → subtotal doesn’t change but item is listed.\nCase: Edge (very large price/quantity)\nIntent: Add with huge numbers to check no overflow and correct math.\nCase: Invalid (negative price)\nIntent: price < 0 → raises ValueError.\nCase: Invalid (zero or negative quantity)\nIntent: quantity <= 0 → raises ValueError.\nCase: Invalid (non-string name)\nIntent: name not str → raises TypeError.\nCase: Invalid (non-numeric price or quantity)\nIntent: Wrong types for price/quantity → raises TypeError.\n3. remove_item(name)\nCase: Normal use (existing item)\nIntent: Remove \"apple\" that was added → item gone, subtotal and total_items update.\nCase: Edge (remove last item)\nIntent: Remove only item → is_empty()==True, subtotal 0.\nCase: Idempotence (remove after removal)\nIntent: Remove \"apple\", then again → second call raises KeyError.\nCase: Invalid (non-string name)\nIntent: Passing non-str name → raises TypeError.\nCase: Invalid (remove never-added)\nIntent: Removing \"ghost\" → raises KeyError.\n4. get_subtotal()\nCase: Normal use (empty)\nIntent: On new order → returns 0.0.\nCase: Normal use (after adds)\nIntent: Sum of all (price × quantity).\nCase: After removals\nIntent: Add items, remove some/all, then confirm updated subtotal.\nCase: Floating-point precision\nIntent: Add prices like 0.1 + 0.2 → check correct handling or acceptable epsilon.\n5. apply_discount(subtotal, discount)\nCase: Normal use (10% off)\nIntent: Given subtotal=100, discount=0.1 → returns 90.0.\nCase: Edge (0% discount)\nIntent: discount=0.0 → returns subtotal unchanged.\nCase: Edge (100% discount)\nIntent: discount=1.0 → returns 0.0.\nCase: Invalid (discount >1.0)\nIntent: discount=1.5 → raises ValueError.\nCase: Invalid (negative discount)\nIntent: discount=-0.1 → raises ValueError.\nCase: Invalid (non-numeric discount)\nIntent: Type mismatch → raises TypeError.\nCase: Zero subtotal\nIntent: subtotal=0, any valid discount → returns 0.0.\n6. calculate_shipping(discounted_subtotal)\nCase: Below threshold\nIntent: If discounted_subtotal < free_shipping_threshold → returns shipping_cost.\nCase: At threshold\nIntent: == free_shipping_threshold → define whether free or charged, and assert it.\nCase: Above threshold\nIntent: Returns 0.0.\nCase: Edge (threshold=0)\nIntent: With custom free_shipping_threshold=0 → always free.\nCase: Invalid (negative subtotal)\nIntent: Negative input → raises ValueError (or treated as zero—test defined behavior).\nCase: Invalid (non-numeric input)\nIntent: Type mismatch → raises TypeError.\n7. calculate_tax(amount)\nCase: Normal use (positive amount)\nIntent: Returns amount × tax_rate.\nCase: Edge (zero amount)\nIntent: Returns 0.0.\nCase: Edge (negative amount)\nIntent: Negative input → raises ValueError (or defined behavior).\nCase: Custom tax rate\nIntent: Construct with custom tax_rate and verify.\nCase: Invalid (non-numeric input)\nIntent: Raises TypeError.\n8. calculate_total(discount=0.0)\nCase: Empty order, no discount\nIntent: Returns 0.0.\nCase: No discount, items under free-shipping\nIntent: subtotal + shipping_cost + tax.\nCase: No discount, items over free-shipping\nIntent: subtotal + 0 + tax.\nCase: With discount\nIntent: Discount applies before shipping decision and tax; verify full formula.\nCase: Discount to zero\nIntent: Discount such that discounted_subtotal == 0 → shipping applies to zero if below threshold, then tax on zero.\nCase: Invalid discount values\nIntent: discount < 0 or >1 → raises ValueError.\nCase: Custom parameters combined\nIntent: Custom tax_rate, free_shipping_threshold, shipping_cost, plus discount → verify end-to-end.\n9. total_items()\nCase: Empty order\nIntent: Returns 0.\nCase: After adds\nIntent: Sum of all quantities.\nCase: After removals\nIntent: Reflects removal.\nCase: Large quantities\nIntent: No overflow, correct count for big ints.\n10. clear_order()\nCase: Normal use (non-empty)\nIntent: Resets to empty state: subtotal 0, total_items 0, is_empty()==True, list_items()==[].\nCase: Idempotence (already empty)\nIntent: No exception, remains empty.\n11. list_items()\nCase: Empty order\nIntent: Returns [].\nCase: After adds\nIntent: Returns each distinct name once.\nCase: After duplicate adds\nIntent: Name appears only once.\nCase: After removal\nIntent: Removed names no longer in list.\nCase: Order determinism\nIntent: If order is defined, verify consistent ordering (or test sorted output).\n12. is_empty()\nCase: On init\nIntent: Returns True.\nCase: After add\nIntent: Returns False.\nCase: After removing all items\nIntent: Returns True.\nCase: After clear\nIntent: Returns True.\n13. Integration / State-flow scenarios\nScenario: Full checkout workflow\nIntent: Add multiple items, apply discount, calculate total, then clear and verify reset.\nScenario: Mixed adds/removes before total\nIntent: Add A, B, remove A, add C, then calculate subtotal, shipping, tax, total.\nScenario: Exception recovery\nIntent: After catching an invalid-input error, ensure order state is unchanged.\nTogether, these cover normal operations, boundary conditions, invalid inputs/exceptions, and end-to-end behavior for every public method. Let me know if you’d like to refine any assumptions before moving on to writing the actual test code!",
        "response_time": 29.619093894958496
      },
      {
        "step": 3,
        "prompt": "Now, based on the test scenarios you just listed, generate the complete Python unit test suite using the `unittest` framework.\n\nFollow these rules:\n- Include one test method per scenario.\n- Use meaningful test method names.\n- Do not include comments or explanations.\n- Output a valid `.py` file containing only the test class.\n\nThe output must contain only Python code.",
        "response": "python\nKopiuj\nEdytuj\nimport unittest\nfrom order_calculator import OrderCalculator\n\nclass TestOrderCalculator(unittest.TestCase):\n    def test_init_defaults(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.tax_rate, 0.23)\n        self.assertEqual(calc.free_shipping_threshold, 100.0)\n        self.assertEqual(calc.shipping_cost, 10.0)\n        self.assertTrue(calc.is_empty())\n        self.assertEqual(calc.total_items(), 0)\n        self.assertEqual(calc.get_subtotal(), 0.0)\n        self.assertEqual(calc.list_items(), [])\n\n    def test_init_custom_params(self):\n        calc = OrderCalculator(tax_rate=0.1, free_shipping_threshold=50.0, shipping_cost=5.0)\n        self.assertEqual(calc.tax_rate, 0.1)\n        self.assertEqual(calc.free_shipping_threshold, 50.0)\n        self.assertEqual(calc.shipping_cost, 5.0)\n\n    def test_init_zero_values(self):\n        calc = OrderCalculator(tax_rate=0.0, free_shipping_threshold=0.0, shipping_cost=0.0)\n        self.assertEqual(calc.tax_rate, 0.0)\n        self.assertEqual(calc.free_shipping_threshold, 0.0)\n        self.assertEqual(calc.shipping_cost, 0.0)\n\n    def test_init_negative_values_raises_value_error(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=-0.1)\n        with self.assertRaises(ValueError):\n            OrderCalculator(free_shipping_threshold=-1.0)\n        with self.assertRaises(ValueError):\n            OrderCalculator(shipping_cost=-5.0)\n\n    def test_add_single_item(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        self.assertEqual(calc.get_subtotal(), 1.0)\n        self.assertEqual(calc.total_items(), 1)\n        self.assertFalse(calc.is_empty())\n        self.assertEqual(calc.list_items(), [\"apple\"])\n\n    def test_add_multiple_quantity(self):\n        calc = OrderCalculator()\n        calc.add_item(\"banana\", 2.0, quantity=5)\n        self.assertEqual(calc.get_subtotal(), 10.0)\n        self.assertEqual(calc.total_items(), 5)\n\n    def test_add_same_item_twice_accumulates_quantity(self):\n        calc = OrderCalculator()\n        calc.add_item(\"orange\", 1.5, quantity=2)\n        calc.add_item(\"orange\", 1.5, quantity=3)\n        self.assertEqual(calc.get_subtotal(), 7.5)\n        self.assertEqual(calc.total_items(), 5)\n\n    def test_add_item_zero_price(self):\n        calc = OrderCalculator()\n        calc.add_item(\"freebie\", 0.0)\n        self.assertEqual(calc.get_subtotal(), 0.0)\n        self.assertIn(\"freebie\", calc.list_items())\n\n    def test_add_item_large_price_and_quantity(self):\n        calc = OrderCalculator()\n        calc.add_item(\"expensive\", 1e6, quantity=1000)\n        self.assertEqual(calc.get_subtotal(), 1e9)\n        self.assertEqual(calc.total_items(), 1000)\n\n    def test_add_item_negative_price_raises_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"bad\", -1.0)\n\n    def test_add_item_non_positive_quantity_raises_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"bad\", 1.0, quantity=0)\n        with self.assertRaises(ValueError):\n            calc.add_item(\"bad\", 1.0, quantity=-5)\n\n    def test_add_item_non_string_name_raises_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(123, 1.0)\n\n    def test_add_item_non_numeric_price_or_quantity_raises_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(\"item\", \"one\", 1)\n        with self.assertRaises(TypeError):\n            calc.add_item(\"item\", 1.0, \"two\")\n\n    def test_remove_existing_item(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.remove_item(\"apple\")\n        self.assertEqual(calc.get_subtotal(), 0.0)\n        self.assertEqual(calc.total_items(), 0)\n        self.assertNotIn(\"apple\", calc.list_items())\n\n    def test_remove_last_item_makes_order_empty(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.remove_item(\"apple\")\n        self.assertTrue(calc.is_empty())\n\n    def test_remove_item_twice_raises_key_error(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.remove_item(\"apple\")\n        with self.assertRaises(KeyError):\n            calc.remove_item(\"apple\")\n\n    def test_remove_non_string_name_raises_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.remove_item(123)\n\n    def test_remove_nonexistent_item_raises_key_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(KeyError):\n            calc.remove_item(\"ghost\")\n\n    def test_get_subtotal_empty_order(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.get_subtotal(), 0.0)\n\n    def test_get_subtotal_after_adds(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0, 2)\n        calc.add_item(\"b\", 2.5, 3)\n        self.assertEqual(calc.get_subtotal(), 1.0*2 + 2.5*3)\n\n    def test_get_subtotal_after_removals(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0, 2)\n        calc.remove_item(\"a\")\n        self.assertEqual(calc.get_subtotal(), 0.0)\n\n    def test_get_subtotal_floating_point_precision(self):\n        calc = OrderCalculator()\n        calc.add_item(\"x\", 0.1)\n        calc.add_item(\"y\", 0.2)\n        self.assertAlmostEqual(calc.get_subtotal(), 0.3, places=7)\n\n    def test_apply_discount_normal(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(100.0, 0.1), 90.0)\n\n    def test_apply_discount_zero_discount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(50.0, 0.0), 50.0)\n\n    def test_apply_discount_full_discount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(80.0, 1.0), 0.0)\n\n    def test_apply_discount_over_100_percent_raises_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(100.0, 1.5)\n\n    def test_apply_discount_negative_discount_raises_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(100.0, -0.1)\n\n    def test_apply_discount_non_numeric_discount_raises_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.apply_discount(100.0, \"0.1\")\n\n    def test_apply_discount_zero_subtotal(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(0.0, 0.5), 0.0)\n\n    def test_calculate_shipping_below_threshold(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_shipping(50.0), 10.0)\n\n    def test_calculate_shipping_at_threshold(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_shipping(100.0), 0.0)\n\n    def test_calculate_shipping_above_threshold(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_shipping(150.0), 0.0)\n\n    def test_calculate_shipping_threshold_zero_always_free(self):\n        calc = OrderCalculator(free_shipping_threshold=0.0)\n        self.assertEqual(calc.calculate_shipping(0.0), 0.0)\n        self.assertEqual(calc.calculate_shipping(10.0), 0.0)\n\n    def test_calculate_shipping_negative_subtotal_raises_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_shipping(-10.0)\n\n    def test_calculate_shipping_non_numeric_input_raises_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_shipping(\"free\")\n\n    def test_calculate_tax_normal(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_tax(100.0), 23.0)\n\n    def test_calculate_tax_zero_amount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_tax(0.0), 0.0)\n\n    def test_calculate_tax_negative_amount_raises_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_tax(-5.0)\n\n    def test_calculate_tax_custom_rate(self):\n        calc = OrderCalculator(tax_rate=0.1)\n        self.assertEqual(calc.calculate_tax(100.0), 10.0)\n\n    def test_calculate_tax_non_numeric_input_raises_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_tax(\"100\")\n\n    def test_calculate_total_empty_order_no_discount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_total(), 0.0)\n\n    def test_calculate_total_under_free_shipping_no_discount(self):\n        calc = OrderCalculator()\n        calc.add_item(\"item\", 50.0)\n        self.assertAlmostEqual(calc.calculate_total(), 73.8, places=7)\n\n    def test_calculate_total_over_free_shipping_no_discount(self):\n        calc = OrderCalculator()\n        calc.add_item(\"item\", 150.0)\n        self.assertAlmostEqual(calc.calculate_total(), 150.0*1.23, places=7)\n\n    def test_calculate_total_with_discount(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 50.0)\n        calc.add_item(\"b\", 60.0)\n        self.assertAlmostEqual(calc.calculate_total(0.1), 134.07, places=2)\n\n    def test_calculate_total_discount_to_zero(self):\n        calc = OrderCalculator()\n        calc.add_item(\"item\", 50.0)\n        self.assertAlmostEqual(calc.calculate_total(1.0), 12.3, places=7)\n\n    def test_calculate_total_invalid_discount_raises_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_total(-0.1)\n        with self.assertRaises(ValueError):\n            calc.calculate_total(1.5)\n\n    def test_calculate_total_custom_parameters_combined(self):\n        calc = OrderCalculator(tax_rate=0.2, free_shipping_threshold=50.0, shipping_cost=5.0)\n        calc.add_item(\"a\", 30.0)\n        self.assertAlmostEqual(calc.calculate_total(0.5), 24.0, places=7)\n\n    def test_total_items_empty_order(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.total_items(), 0)\n\n    def test_total_items_after_adds(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0, 3)\n        calc.add_item(\"b\", 2.0, 2)\n        self.assertEqual(calc.total_items(), 5)\n\n    def test_total_items_after_removals(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0, 3)\n        calc.remove_item(\"a\")\n        self.assertEqual(calc.total_items(), 0)\n\n    def test_total_items_large_quantities(self):\n        calc = OrderCalculator()\n        calc.add_item(\"big\", 1.0, 10**6)\n        self.assertEqual(calc.total_items(), 10**6)\n\n    def test_clear_order_resets_state(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n        self.assertEqual(calc.total_items(), 0)\n        self.assertEqual(calc.get_subtotal(), 0.0)\n        self.assertEqual(calc.list_items(), [])\n\n    def test_clear_order_on_empty_does_not_raise(self):\n        calc = OrderCalculator()\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n\n    def test_list_items_empty_order(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.list_items(), [])\n\n    def test_list_items_after_adds(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0)\n        calc.add_item(\"b\", 2.0)\n        self.assertEqual(calc.list_items(), [\"a\", \"b\"])\n\n    def test_list_items_duplicate_adds(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0)\n        calc.add_item(\"a\", 1.0)\n        self.assertEqual(calc.list_items(), [\"a\"])\n\n    def test_list_items_after_removal(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0)\n        calc.add_item(\"b\", 2.0)\n        calc.remove_item(\"a\")\n        self.assertEqual(calc.list_items(), [\"b\"])\n\n    def test_list_items_deterministic_order(self):\n        calc = OrderCalculator()\n        calc.add_item(\"b\", 1.0)\n        calc.add_item(\"a\", 1.0)\n        self.assertEqual(calc.list_items(), [\"b\", \"a\"])\n\n    def test_is_empty_on_init(self):\n        calc = OrderCalculator()\n        self.assertTrue(calc.is_empty())\n\n    def test_is_empty_after_add(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0)\n        self.assertFalse(calc.is_empty())\n\n    def test_is_empty_after_removing_all_items(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0)\n        calc.remove_item(\"a\")\n        self.assertTrue(calc.is_empty())\n\n    def test_is_empty_after_clear(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n\n    def test_full_checkout_workflow(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 50.0)\n        calc.add_item(\"banana\", 60.0)\n        total = calc.calculate_total(0.1)\n        self.assertAlmostEqual(total, 134.07, places=2)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n        self.assertEqual(calc.total_items(), 0)\n        self.assertEqual(calc.get_subtotal(), 0.0)\n        self.assertEqual(calc.list_items(), [])\n\n    def test_mixed_adds_removes_before_total(self):\n        calc = OrderCalculator()\n        calc.add_item(\"widget\", 10.0, 2)\n        calc.add_item(\"gadget\", 5.0)\n        calc.remove_item(\"widget\")\n        calc.add_item(\"doodad\", 20.0, 3)\n        total = calc.calculate_total()\n        self.assertAlmostEqual(total, 92.25, places=2)\n\n    def test_exception_recovery_state_unchanged(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"bad\", -1.0)\n        self.assertTrue(calc.is_empty())\n        self.assertEqual(calc.total_items(), 0)\n        self.assertEqual(calc.get_subtotal(), 0.0)",
        "response_time": 59.65623331069946
      }
    ],
    "final_response": "python\nKopiuj\nEdytuj\nimport unittest\nfrom order_calculator import OrderCalculator\n\nclass TestOrderCalculator(unittest.TestCase):\n    def test_init_defaults(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.tax_rate, 0.23)\n        self.assertEqual(calc.free_shipping_threshold, 100.0)\n        self.assertEqual(calc.shipping_cost, 10.0)\n        self.assertTrue(calc.is_empty())\n        self.assertEqual(calc.total_items(), 0)\n        self.assertEqual(calc.get_subtotal(), 0.0)\n        self.assertEqual(calc.list_items(), [])\n\n    def test_init_custom_params(self):\n        calc = OrderCalculator(tax_rate=0.1, free_shipping_threshold=50.0, shipping_cost=5.0)\n        self.assertEqual(calc.tax_rate, 0.1)\n        self.assertEqual(calc.free_shipping_threshold, 50.0)\n        self.assertEqual(calc.shipping_cost, 5.0)\n\n    def test_init_zero_values(self):\n        calc = OrderCalculator(tax_rate=0.0, free_shipping_threshold=0.0, shipping_cost=0.0)\n        self.assertEqual(calc.tax_rate, 0.0)\n        self.assertEqual(calc.free_shipping_threshold, 0.0)\n        self.assertEqual(calc.shipping_cost, 0.0)\n\n    def test_init_negative_values_raises_value_error(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=-0.1)\n        with self.assertRaises(ValueError):\n            OrderCalculator(free_shipping_threshold=-1.0)\n        with self.assertRaises(ValueError):\n            OrderCalculator(shipping_cost=-5.0)\n\n    def test_add_single_item(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        self.assertEqual(calc.get_subtotal(), 1.0)\n        self.assertEqual(calc.total_items(), 1)\n        self.assertFalse(calc.is_empty())\n        self.assertEqual(calc.list_items(), [\"apple\"])\n\n    def test_add_multiple_quantity(self):\n        calc = OrderCalculator()\n        calc.add_item(\"banana\", 2.0, quantity=5)\n        self.assertEqual(calc.get_subtotal(), 10.0)\n        self.assertEqual(calc.total_items(), 5)\n\n    def test_add_same_item_twice_accumulates_quantity(self):\n        calc = OrderCalculator()\n        calc.add_item(\"orange\", 1.5, quantity=2)\n        calc.add_item(\"orange\", 1.5, quantity=3)\n        self.assertEqual(calc.get_subtotal(), 7.5)\n        self.assertEqual(calc.total_items(), 5)\n\n    def test_add_item_zero_price(self):\n        calc = OrderCalculator()\n        calc.add_item(\"freebie\", 0.0)\n        self.assertEqual(calc.get_subtotal(), 0.0)\n        self.assertIn(\"freebie\", calc.list_items())\n\n    def test_add_item_large_price_and_quantity(self):\n        calc = OrderCalculator()\n        calc.add_item(\"expensive\", 1e6, quantity=1000)\n        self.assertEqual(calc.get_subtotal(), 1e9)\n        self.assertEqual(calc.total_items(), 1000)\n\n    def test_add_item_negative_price_raises_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"bad\", -1.0)\n\n    def test_add_item_non_positive_quantity_raises_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"bad\", 1.0, quantity=0)\n        with self.assertRaises(ValueError):\n            calc.add_item(\"bad\", 1.0, quantity=-5)\n\n    def test_add_item_non_string_name_raises_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(123, 1.0)\n\n    def test_add_item_non_numeric_price_or_quantity_raises_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(\"item\", \"one\", 1)\n        with self.assertRaises(TypeError):\n            calc.add_item(\"item\", 1.0, \"two\")\n\n    def test_remove_existing_item(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.remove_item(\"apple\")\n        self.assertEqual(calc.get_subtotal(), 0.0)\n        self.assertEqual(calc.total_items(), 0)\n        self.assertNotIn(\"apple\", calc.list_items())\n\n    def test_remove_last_item_makes_order_empty(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.remove_item(\"apple\")\n        self.assertTrue(calc.is_empty())\n\n    def test_remove_item_twice_raises_key_error(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 1.0)\n        calc.remove_item(\"apple\")\n        with self.assertRaises(KeyError):\n            calc.remove_item(\"apple\")\n\n    def test_remove_non_string_name_raises_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.remove_item(123)\n\n    def test_remove_nonexistent_item_raises_key_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(KeyError):\n            calc.remove_item(\"ghost\")\n\n    def test_get_subtotal_empty_order(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.get_subtotal(), 0.0)\n\n    def test_get_subtotal_after_adds(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0, 2)\n        calc.add_item(\"b\", 2.5, 3)\n        self.assertEqual(calc.get_subtotal(), 1.0*2 + 2.5*3)\n\n    def test_get_subtotal_after_removals(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0, 2)\n        calc.remove_item(\"a\")\n        self.assertEqual(calc.get_subtotal(), 0.0)\n\n    def test_get_subtotal_floating_point_precision(self):\n        calc = OrderCalculator()\n        calc.add_item(\"x\", 0.1)\n        calc.add_item(\"y\", 0.2)\n        self.assertAlmostEqual(calc.get_subtotal(), 0.3, places=7)\n\n    def test_apply_discount_normal(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(100.0, 0.1), 90.0)\n\n    def test_apply_discount_zero_discount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(50.0, 0.0), 50.0)\n\n    def test_apply_discount_full_discount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(80.0, 1.0), 0.0)\n\n    def test_apply_discount_over_100_percent_raises_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(100.0, 1.5)\n\n    def test_apply_discount_negative_discount_raises_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(100.0, -0.1)\n\n    def test_apply_discount_non_numeric_discount_raises_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.apply_discount(100.0, \"0.1\")\n\n    def test_apply_discount_zero_subtotal(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(0.0, 0.5), 0.0)\n\n    def test_calculate_shipping_below_threshold(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_shipping(50.0), 10.0)\n\n    def test_calculate_shipping_at_threshold(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_shipping(100.0), 0.0)\n\n    def test_calculate_shipping_above_threshold(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_shipping(150.0), 0.0)\n\n    def test_calculate_shipping_threshold_zero_always_free(self):\n        calc = OrderCalculator(free_shipping_threshold=0.0)\n        self.assertEqual(calc.calculate_shipping(0.0), 0.0)\n        self.assertEqual(calc.calculate_shipping(10.0), 0.0)\n\n    def test_calculate_shipping_negative_subtotal_raises_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_shipping(-10.0)\n\n    def test_calculate_shipping_non_numeric_input_raises_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_shipping(\"free\")\n\n    def test_calculate_tax_normal(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_tax(100.0), 23.0)\n\n    def test_calculate_tax_zero_amount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_tax(0.0), 0.0)\n\n    def test_calculate_tax_negative_amount_raises_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_tax(-5.0)\n\n    def test_calculate_tax_custom_rate(self):\n        calc = OrderCalculator(tax_rate=0.1)\n        self.assertEqual(calc.calculate_tax(100.0), 10.0)\n\n    def test_calculate_tax_non_numeric_input_raises_type_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_tax(\"100\")\n\n    def test_calculate_total_empty_order_no_discount(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_total(), 0.0)\n\n    def test_calculate_total_under_free_shipping_no_discount(self):\n        calc = OrderCalculator()\n        calc.add_item(\"item\", 50.0)\n        self.assertAlmostEqual(calc.calculate_total(), 73.8, places=7)\n\n    def test_calculate_total_over_free_shipping_no_discount(self):\n        calc = OrderCalculator()\n        calc.add_item(\"item\", 150.0)\n        self.assertAlmostEqual(calc.calculate_total(), 150.0*1.23, places=7)\n\n    def test_calculate_total_with_discount(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 50.0)\n        calc.add_item(\"b\", 60.0)\n        self.assertAlmostEqual(calc.calculate_total(0.1), 134.07, places=2)\n\n    def test_calculate_total_discount_to_zero(self):\n        calc = OrderCalculator()\n        calc.add_item(\"item\", 50.0)\n        self.assertAlmostEqual(calc.calculate_total(1.0), 12.3, places=7)\n\n    def test_calculate_total_invalid_discount_raises_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_total(-0.1)\n        with self.assertRaises(ValueError):\n            calc.calculate_total(1.5)\n\n    def test_calculate_total_custom_parameters_combined(self):\n        calc = OrderCalculator(tax_rate=0.2, free_shipping_threshold=50.0, shipping_cost=5.0)\n        calc.add_item(\"a\", 30.0)\n        self.assertAlmostEqual(calc.calculate_total(0.5), 24.0, places=7)\n\n    def test_total_items_empty_order(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.total_items(), 0)\n\n    def test_total_items_after_adds(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0, 3)\n        calc.add_item(\"b\", 2.0, 2)\n        self.assertEqual(calc.total_items(), 5)\n\n    def test_total_items_after_removals(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0, 3)\n        calc.remove_item(\"a\")\n        self.assertEqual(calc.total_items(), 0)\n\n    def test_total_items_large_quantities(self):\n        calc = OrderCalculator()\n        calc.add_item(\"big\", 1.0, 10**6)\n        self.assertEqual(calc.total_items(), 10**6)\n\n    def test_clear_order_resets_state(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n        self.assertEqual(calc.total_items(), 0)\n        self.assertEqual(calc.get_subtotal(), 0.0)\n        self.assertEqual(calc.list_items(), [])\n\n    def test_clear_order_on_empty_does_not_raise(self):\n        calc = OrderCalculator()\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n\n    def test_list_items_empty_order(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.list_items(), [])\n\n    def test_list_items_after_adds(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0)\n        calc.add_item(\"b\", 2.0)\n        self.assertEqual(calc.list_items(), [\"a\", \"b\"])\n\n    def test_list_items_duplicate_adds(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0)\n        calc.add_item(\"a\", 1.0)\n        self.assertEqual(calc.list_items(), [\"a\"])\n\n    def test_list_items_after_removal(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0)\n        calc.add_item(\"b\", 2.0)\n        calc.remove_item(\"a\")\n        self.assertEqual(calc.list_items(), [\"b\"])\n\n    def test_list_items_deterministic_order(self):\n        calc = OrderCalculator()\n        calc.add_item(\"b\", 1.0)\n        calc.add_item(\"a\", 1.0)\n        self.assertEqual(calc.list_items(), [\"b\", \"a\"])\n\n    def test_is_empty_on_init(self):\n        calc = OrderCalculator()\n        self.assertTrue(calc.is_empty())\n\n    def test_is_empty_after_add(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0)\n        self.assertFalse(calc.is_empty())\n\n    def test_is_empty_after_removing_all_items(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0)\n        calc.remove_item(\"a\")\n        self.assertTrue(calc.is_empty())\n\n    def test_is_empty_after_clear(self):\n        calc = OrderCalculator()\n        calc.add_item(\"a\", 1.0)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n\n    def test_full_checkout_workflow(self):\n        calc = OrderCalculator()\n        calc.add_item(\"apple\", 50.0)\n        calc.add_item(\"banana\", 60.0)\n        total = calc.calculate_total(0.1)\n        self.assertAlmostEqual(total, 134.07, places=2)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n        self.assertEqual(calc.total_items(), 0)\n        self.assertEqual(calc.get_subtotal(), 0.0)\n        self.assertEqual(calc.list_items(), [])\n\n    def test_mixed_adds_removes_before_total(self):\n        calc = OrderCalculator()\n        calc.add_item(\"widget\", 10.0, 2)\n        calc.add_item(\"gadget\", 5.0)\n        calc.remove_item(\"widget\")\n        calc.add_item(\"doodad\", 20.0, 3)\n        total = calc.calculate_total()\n        self.assertAlmostEqual(total, 92.25, places=2)\n\n    def test_exception_recovery_state_unchanged(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item(\"bad\", -1.0)\n        self.assertTrue(calc.is_empty())\n        self.assertEqual(calc.total_items(), 0)\n        self.assertEqual(calc.get_subtotal(), 0.0)",
    "total_response_time": 112.75090193748474,
    "strategy": "chain_of_thought_prompting",
    "context_type": "interface"
  }
}