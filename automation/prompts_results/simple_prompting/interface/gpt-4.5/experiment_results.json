{
  "model": "gpt-4.5",
  "strategy": "simple_prompting",
  "context_type": "interface",
  "timestamp": "2025-07-01T23:27:28.740837",
  "response_time": 48.86953568458557,
  "test_file": "prompts_results\\simple_prompting\\interface\\gpt-4.5\\tests.py",
  "raw_results": {
    "response": "import unittest\nfrom order_calculator import OrderCalculator\n\nclass TestOrderCalculator(unittest.TestCase):\n\n    def setUp(self):\n        self.calc = OrderCalculator()\n\n    def test_add_item_typical(self):\n        self.calc.add_item(\"apple\", 1.0, 3)\n        self.assertEqual(self.calc.total_items(), 3)\n\n    def test_add_item_default_quantity(self):\n        self.calc.add_item(\"banana\", 0.5)\n        self.assertEqual(self.calc.total_items(), 1)\n\n    def test_remove_item(self):\n        self.calc.add_item(\"orange\", 2.0, 2)\n        self.calc.remove_item(\"orange\")\n        self.assertEqual(self.calc.total_items(), 0)\n\n    def test_get_subtotal_typical(self):\n        self.calc.add_item(\"milk\", 3.0, 2)\n        self.assertEqual(self.calc.get_subtotal(), 6.0)\n\n    def test_apply_discount_typical(self):\n        discounted = self.calc.apply_discount(100.0, 0.1)\n        self.assertEqual(discounted, 90.0)\n\n    def test_apply_discount_edge_case_zero(self):\n        discounted = self.calc.apply_discount(100.0, 0.0)\n        self.assertEqual(discounted, 100.0)\n\n    def test_apply_discount_invalid(self):\n        with self.assertRaises(ValueError):\n            self.calc.apply_discount(100.0, -0.1)\n\n    def test_calculate_shipping_free(self):\n        shipping = self.calc.calculate_shipping(150.0)\n        self.assertEqual(shipping, 0.0)\n\n    def test_calculate_shipping_paid(self):\n        shipping = self.calc.calculate_shipping(50.0)\n        self.assertEqual(shipping, 10.0)\n\n    def test_calculate_tax_typical(self):\n        tax = self.calc.calculate_tax(100.0)\n        self.assertEqual(tax, 23.0)\n\n    def test_calculate_total_typical(self):\n        self.calc.add_item(\"bread\", 2.0, 10)\n        total = self.calc.calculate_total()\n        self.assertEqual(total, 34.6)\n\n    def test_calculate_total_with_discount(self):\n        self.calc.add_item(\"bread\", 2.0, 10)\n        total = self.calc.calculate_total(0.1)\n        self.assertAlmostEqual(total, 31.6)\n\n    def test_total_items_empty(self):\n        self.assertEqual(self.calc.total_items(), 0)\n\n    def test_clear_order(self):\n        self.calc.add_item(\"bread\", 2.0, 2)\n        self.calc.clear_order()\n        self.assertTrue(self.calc.is_empty())\n\n    def test_list_items_typical(self):\n        self.calc.add_item(\"bread\", 2.0)\n        self.calc.add_item(\"milk\", 3.0)\n        items = self.calc.list_items()\n        self.assertListEqual(sorted(items), [\"bread\", \"milk\"])\n\n    def test_is_empty_initial(self):\n        self.assertTrue(self.calc.is_empty())\n\n    def test_is_empty_after_add(self):\n        self.calc.add_item(\"bread\", 2.0)\n        self.assertFalse(self.calc.is_empty())\n\n    def test_add_item_invalid_price(self):\n        with self.assertRaises(ValueError):\n            self.calc.add_item(\"bread\", -1.0)\n\n    def test_add_item_invalid_quantity(self):\n        with self.assertRaises(ValueError):\n            self.calc.add_item(\"bread\", 1.0, 0)\n\n    def test_remove_nonexistent_item(self):\n        with self.assertRaises(KeyError):\n            self.calc.remove_item(\"nonexistent\")\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "response_time": 48.86953568458557,
    "strategy": "simple_prompting",
    "context_type": "interface",
    "prompt": "Generate a complete Python unit test suite for the class `OrderCalculator`.\n\nInstructions:\n- Use the `unittest` framework.\n- Include tests for all public methods of the class.\n- Ensure proper coverage of:\n  • typical use cases,\n  • edge cases (corner cases),\n  • incorrect input (invalid types or values),\n  • exceptions.\n- Each test should be clear, minimal and atomic (test one behavior at a time).\n- Avoid comments or explanations — output only the test code.\n- Return a single valid Python file with a class extending `unittest.TestCase`.\n\nBelow is the class interface (without implementation):\n\n```python\nfrom typing import TypedDict, List\n\n\nclass Item(TypedDict)\n\nclass OrderCalculator:\n    def __init__(self, tax_rate=0.23, free_shipping_threshold=100.0, shipping_cost=10.0):\n\n    def add_item(self, name: str, price: float, quantity: int = 1):\n\n    def remove_item(self, name: str):\n\n    def get_subtotal(self) -> float:\n\n    def apply_discount(self, subtotal: float, discount: float) -> float:\n\n    def calculate_shipping(self, discounted_subtotal: float) -> float:\n\n    def calculate_tax(self, amount: float) -> float:\n\n    def calculate_total(self, discount: float = 0.0) -> float:\n\n    def total_items(self) -> int:\n\n    def clear_order(self):\n\n    def list_items(self) -> List[str]:\n\n\tdef is_empty(self) -> bool:\n\n```"
  }
}