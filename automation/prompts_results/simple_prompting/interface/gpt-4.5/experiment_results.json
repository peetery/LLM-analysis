{
  "model": "gpt-4.5",
  "strategy": "simple_prompting",
  "context_type": "interface",
  "timestamp": "2025-07-01T22:32:30.997925",
  "response_time": 52.73582220077515,
  "test_file": "prompts_results\\simple_prompting\\interface\\gpt-4.5\\tests.py",
  "raw_results": {
    "response": "python\nKopiuj\nEdytuj\nimport unittest\nfrom typing import List\nfrom order_calculator import OrderCalculator\n\n\nclass TestOrderCalculator(unittest.TestCase):\n\n    def setUp(self):\n        self.calc = OrderCalculator()\n\n    def test_add_item_typical(self):\n        self.calc.add_item(\"Book\", 20.0, 2)\n        self.assertEqual(self.calc.total_items(), 2)\n\n    def test_add_item_default_quantity(self):\n        self.calc.add_item(\"Pen\", 5.0)\n        self.assertEqual(self.calc.total_items(), 1)\n\n    def test_add_item_negative_price(self):\n        with self.assertRaises(ValueError):\n            self.calc.add_item(\"Invalid\", -10.0, 1)\n\n    def test_add_item_zero_quantity(self):\n        with self.assertRaises(ValueError):\n            self.calc.add_item(\"Invalid\", 10.0, 0)\n\n    def test_add_item_invalid_price_type(self):\n        with self.assertRaises(TypeError):\n            self.calc.add_item(\"Invalid\", \"10.0\", 1)\n\n    def test_add_item_invalid_quantity_type(self):\n        with self.assertRaises(TypeError):\n            self.calc.add_item(\"Invalid\", 10.0, \"one\")\n\n    def test_remove_item_existing(self):\n        self.calc.add_item(\"Book\", 20.0, 1)\n        self.calc.remove_item(\"Book\")\n        self.assertTrue(self.calc.is_empty())\n\n    def test_remove_item_nonexistent(self):\n        with self.assertRaises(KeyError):\n            self.calc.remove_item(\"Ghost\")\n\n    def test_get_subtotal(self):\n        self.calc.add_item(\"Book\", 10.0, 3)\n        self.assertEqual(self.calc.get_subtotal(), 30.0)\n\n    def test_apply_discount_typical(self):\n        result = self.calc.apply_discount(100.0, 0.1)\n        self.assertEqual(result, 90.0)\n\n    def test_apply_discount_zero(self):\n        result = self.calc.apply_discount(50.0, 0.0)\n        self.assertEqual(result, 50.0)\n\n    def test_apply_discount_full(self):\n        result = self.calc.apply_discount(50.0, 1.0)\n        self.assertEqual(result, 0.0)\n\n    def test_apply_discount_negative(self):\n        with self.assertRaises(ValueError):\n            self.calc.apply_discount(50.0, -0.1)\n\n    def test_apply_discount_over_one(self):\n        with self.assertRaises(ValueError):\n            self.calc.apply_discount(50.0, 1.5)\n\n    def test_apply_discount_invalid_type(self):\n        with self.assertRaises(TypeError):\n            self.calc.apply_discount(\"100\", 0.1)\n\n    def test_calculate_shipping_above_threshold(self):\n        self.assertEqual(self.calc.calculate_shipping(150.0), 0.0)\n\n    def test_calculate_shipping_below_threshold(self):\n        self.assertEqual(self.calc.calculate_shipping(80.0), 10.0)\n\n    def test_calculate_shipping_at_threshold(self):\n        self.assertEqual(self.calc.calculate_shipping(100.0), 0.0)\n\n    def test_calculate_shipping_invalid_type(self):\n        with self.assertRaises(TypeError):\n            self.calc.calculate_shipping(\"50.0\")\n\n    def test_calculate_tax_typical(self):\n        self.assertAlmostEqual(self.calc.calculate_tax(100.0), 23.0)\n\n    def test_calculate_tax_zero(self):\n        self.assertEqual(self.calc.calculate_tax(0.0), 0.0)\n\n    def test_calculate_tax_negative(self):\n        with self.assertRaises(ValueError):\n            self.calc.calculate_tax(-10.0)\n\n    def test_calculate_tax_invalid_type(self):\n        with self.assertRaises(TypeError):\n            self.calc.calculate_tax(\"100\")\n\n    def test_calculate_total_typical(self):\n        self.calc.add_item(\"Item1\", 50.0, 1)\n        self.calc.add_item(\"Item2\", 30.0, 1)\n        total = self.calc.calculate_total(discount=0.1)\n        self.assertGreater(total, 0)\n\n    def test_calculate_total_zero_discount(self):\n        self.calc.add_item(\"Item1\", 50.0, 1)\n        total = self.calc.calculate_total()\n        expected_tax = self.calc.calculate_tax(50.0)\n        expected_shipping = self.calc.calculate_shipping(50.0)\n        self.assertAlmostEqual(total, 50.0 + expected_shipping + expected_tax)\n\n    def test_calculate_total_full_discount(self):\n        self.calc.add_item(\"Item1\", 100.0, 1)\n        total = self.calc.calculate_total(discount=1.0)\n        expected_tax = self.calc.calculate_tax(0.0)\n        expected_shipping = self.calc.calculate_shipping(0.0)\n        self.assertAlmostEqual(total, expected_shipping + expected_tax)\n\n    def test_calculate_total_invalid_discount_type(self):\n        self.calc.add_item(\"Item1\", 20.0, 1)\n        with self.assertRaises(TypeError):\n            self.calc.calculate_total(discount=\"0.2\")\n\n    def test_total_items_multiple(self):\n        self.calc.add_item(\"A\", 10.0, 2)\n        self.calc.add_item(\"B\", 5.0, 3)\n        self.assertEqual(self.calc.total_items(), 5)\n\n    def test_total_items_empty(self):\n        self.assertEqual(self.calc.total_items(), 0)\n\n    def test_clear_order(self):\n        self.calc.add_item(\"Item\", 10.0, 2)\n        self.calc.clear_order()\n        self.assertTrue(self.calc.is_empty())\n        self.assertEqual(self.calc.total_items(), 0)\n\n    def test_list_items_typical(self):\n        self.calc.add_item(\"A\", 10.0)\n        self.calc.add_item(\"B\", 20.0)\n        items = self.calc.list_items()\n        self.assertIn(\"A\", items)\n        self.assertIn(\"B\", items)\n\n    def test_list_items_empty(self):\n        self.assertEqual(self.calc.list_items(), [])\n\n    def test_is_empty_true(self):\n        self.assertTrue(self.calc.is_empty())\n\n    def test_is_empty_false(self):\n        self.calc.add_item(\"Item\", 1.0)\n        self.assertFalse(self.calc.is_empty())\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "response_time": 52.73582220077515,
    "strategy": "simple_prompting",
    "context_type": "interface",
    "prompt": "Generate a complete Python unit test suite for the class `OrderCalculator`.\n\nInstructions:\n- Use the `unittest` framework.\n- Include tests for all public methods of the class.\n- Ensure proper coverage of:\n  • typical use cases,\n  • edge cases (corner cases),\n  • incorrect input (invalid types or values),\n  • exceptions.\n- Each test should be clear, minimal and atomic (test one behavior at a time).\n- Avoid comments or explanations — output only the test code.\n- Return a single valid Python file with a class extending `unittest.TestCase`.\n\nBelow is the class interface (without implementation):\n\n```python\nfrom typing import TypedDict, List\n\n\nclass Item(TypedDict)\n\nclass OrderCalculator:\n    def __init__(self, tax_rate=0.23, free_shipping_threshold=100.0, shipping_cost=10.0):\n\n    def add_item(self, name: str, price: float, quantity: int = 1):\n\n    def remove_item(self, name: str):\n\n    def get_subtotal(self) -> float:\n\n    def apply_discount(self, subtotal: float, discount: float) -> float:\n\n    def calculate_shipping(self, discounted_subtotal: float) -> float:\n\n    def calculate_tax(self, amount: float) -> float:\n\n    def calculate_total(self, discount: float = 0.0) -> float:\n\n    def total_items(self) -> int:\n\n    def clear_order(self):\n\n    def list_items(self) -> List[str]:\n\n\tdef is_empty(self) -> bool:\n\n```"
  }
}