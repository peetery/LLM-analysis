{
  "model": "gpt-o4-mini-high",
  "strategy": "simple_prompting",
  "context_type": "interface",
  "timestamp": "2025-07-04T00:50:27.513374",
  "response_time": 19.922065258026123,
  "test_file": "prompts_results\\simple_prompting\\interface\\gpt-o4-mini-high\\tests.py",
  "raw_results": {
    "response": "python\nKopiuj\nEdytuj\nimport unittest\nfrom order_calculator import OrderCalculator\n\nclass TestOrderCalculator(unittest.TestCase):\n\n    def setUp(self):\n        self.calculator = OrderCalculator()\n\n    def test_is_empty_initial(self):\n        self.assertTrue(self.calculator.is_empty())\n\n    def test_add_item_and_is_not_empty(self):\n        self.calculator.add_item(\"apple\", 1.0, 2)\n        self.assertFalse(self.calculator.is_empty())\n\n    def test_add_item_invalid_name_type(self):\n        with self.assertRaises(TypeError):\n            self.calculator.add_item(123, 1.0, 1)\n\n    def test_add_item_invalid_price_type(self):\n        with self.assertRaises(TypeError):\n            self.calculator.add_item(\"apple\", \"free\", 1)\n\n    def test_add_item_invalid_quantity_type(self):\n        with self.assertRaises(TypeError):\n            self.calculator.add_item(\"apple\", 1.0, \"two\")\n\n    def test_add_item_negative_price(self):\n        with self.assertRaises(ValueError):\n            self.calculator.add_item(\"apple\", -1.0, 1)\n\n    def test_add_item_zero_quantity(self):\n        with self.assertRaises(ValueError):\n            self.calculator.add_item(\"apple\", 1.0, 0)\n\n    def test_remove_item(self):\n        self.calculator.add_item(\"banana\", 2.0, 3)\n        self.calculator.remove_item(\"banana\")\n        self.assertTrue(self.calculator.is_empty())\n\n    def test_remove_item_nonexistent(self):\n        with self.assertRaises(KeyError):\n            self.calculator.remove_item(\"pear\")\n\n    def test_get_subtotal_empty(self):\n        self.assertEqual(self.calculator.get_subtotal(), 0.0)\n\n    def test_get_subtotal_multiple_items(self):\n        self.calculator.add_item(\"a\", 5.0, 2)\n        self.calculator.add_item(\"b\", 3.0, 1)\n        self.assertAlmostEqual(self.calculator.get_subtotal(), 13.0)\n\n    def test_apply_discount_typical(self):\n        result = self.calculator.apply_discount(100.0, 15.0)\n        self.assertAlmostEqual(result, 85.0)\n\n    def test_apply_discount_zero(self):\n        result = self.calculator.apply_discount(50.0, 0.0)\n        self.assertAlmostEqual(result, 50.0)\n\n    def test_apply_discount_invalid_negative(self):\n        with self.assertRaises(ValueError):\n            self.calculator.apply_discount(50.0, -5.0)\n\n    def test_apply_discount_invalid_too_large(self):\n        with self.assertRaises(ValueError):\n            self.calculator.apply_discount(30.0, 40.0)\n\n    def test_calculate_shipping_below_threshold(self):\n        cost = self.calculator.calculate_shipping(50.0)\n        self.assertAlmostEqual(cost, 10.0)\n\n    def test_calculate_shipping_at_threshold(self):\n        cost = self.calculator.calculate_shipping(100.0)\n        self.assertAlmostEqual(cost, 0.0)\n\n    def test_calculate_shipping_above_threshold(self):\n        cost = self.calculator.calculate_shipping(150.0)\n        self.assertAlmostEqual(cost, 0.0)\n\n    def test_calculate_tax_typical(self):\n        tax = self.calculator.calculate_tax(200.0)\n        self.assertAlmostEqual(tax, 200.0 * 0.23)\n\n    def test_calculate_tax_zero(self):\n        tax = self.calculator.calculate_tax(0.0)\n        self.assertAlmostEqual(tax, 0.0)\n\n    def test_total_items_empty(self):\n        self.assertEqual(self.calculator.total_items(), 0)\n\n    def test_total_items_after_adding(self):\n        self.calculator.add_item(\"x\", 2.0, 3)\n        self.calculator.add_item(\"y\", 5.0, 2)\n        self.assertEqual(self.calculator.total_items(), 5)\n\n    def test_clear_order(self):\n        self.calculator.add_item(\"z\", 1.0, 1)\n        self.calculator.clear_order()\n        self.assertTrue(self.calculator.is_empty())\n        self.assertEqual(self.calculator.total_items(), 0)\n\n    def test_list_items(self):\n        self.calculator.add_item(\"item1\", 1.0, 1)\n        self.calculator.add_item(\"item2\", 2.0, 2)\n        items = self.calculator.list_items()\n        self.assertCountEqual(items, [\"item1\", \"item2\"])\n\n    def test_calculate_total_typical(self):\n        oc = OrderCalculator(tax_rate=0.1, free_shipping_threshold=1000.0, shipping_cost=5.0)\n        oc.add_item(\"a\", 10.0, 2)\n        oc.add_item(\"b\", 20.0, 1)\n        total = oc.calculate_total(discount=5.0)\n        # subtotal = 40, discounted = 35, shipping = 5, tax = 3.5, total = 43.5\n        self.assertAlmostEqual(total, 43.5)\n\n    def test_calculate_total_no_discount(self):\n        oc = OrderCalculator(tax_rate=0.2, free_shipping_threshold=0.0, shipping_cost=10.0)\n        oc.add_item(\"a\", 50.0, 1)\n        total = oc.calculate_total()\n        # subtotal = 50, discounted = 50, shipping = 0, tax = 10\n        self.assertAlmostEqual(total, 60.0)\n\nif __name__ == '__main__':\n    unittest.main()",
    "response_time": 19.922065258026123,
    "strategy": "simple_prompting",
    "context_type": "interface",
    "prompt": "Generate a complete Python unit test suite for the class `OrderCalculator`.\n\nInstructions:\n- Use the `unittest` framework.\n- Include tests for all public methods of the class.\n- Ensure proper coverage of:\n  • typical use cases,\n  • edge cases (corner cases),\n  • incorrect input (invalid types or values),\n  • exceptions.\n- Each test should be clear, minimal and atomic (test one behavior at a time).\n- Avoid comments or explanations — output only the test code.\n- Return a single valid Python file with a class extending `unittest.TestCase`.\n\nBelow is the class interface (without implementation):\n\n```python\nfrom typing import TypedDict, List\n\n\nclass Item(TypedDict)\n\nclass OrderCalculator:\n    def __init__(self, tax_rate=0.23, free_shipping_threshold=100.0, shipping_cost=10.0):\n\n    def add_item(self, name: str, price: float, quantity: int = 1):\n\n    def remove_item(self, name: str):\n\n    def get_subtotal(self) -> float:\n\n    def apply_discount(self, subtotal: float, discount: float) -> float:\n\n    def calculate_shipping(self, discounted_subtotal: float) -> float:\n\n    def calculate_tax(self, amount: float) -> float:\n\n    def calculate_total(self, discount: float = 0.0) -> float:\n\n    def total_items(self) -> int:\n\n    def clear_order(self):\n\n    def list_items(self) -> List[str]:\n\n\tdef is_empty(self) -> bool:\n\n```"
  }
}