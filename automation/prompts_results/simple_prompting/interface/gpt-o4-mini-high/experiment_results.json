{
  "model": "gpt-o4-mini-high",
  "strategy": "simple_prompting",
  "context_type": "interface",
  "timestamp": "2025-07-03T01:12:58.538734",
  "response_time": 48.62125539779663,
  "test_file": "prompts_results\\simple_prompting\\interface\\gpt-o4-mini-high\\tests.py",
  "raw_results": {
    "response": "python\nKopiuj\nEdytuj\nimport unittest\nfrom order_calculator import OrderCalculator\n\nclass TestOrderCalculator(unittest.TestCase):\n    def setUp(self):\n        self.calc = OrderCalculator()\n\n    def test_init_defaults(self):\n        self.assertEqual(self.calc.tax_rate, 0.23)\n        self.assertEqual(self.calc.free_shipping_threshold, 100.0)\n        self.assertEqual(self.calc.shipping_cost, 10.0)\n        self.assertTrue(self.calc.is_empty())\n\n    def test_init_custom_parameters(self):\n        custom = OrderCalculator(tax_rate=0.1, free_shipping_threshold=50.0, shipping_cost=5.0)\n        self.assertEqual(custom.tax_rate, 0.1)\n        self.assertEqual(custom.free_shipping_threshold, 50.0)\n        self.assertEqual(custom.shipping_cost, 5.0)\n\n    def test_add_item_and_list_and_total_items(self):\n        self.calc.add_item(\"apple\", 1.0, 3)\n        self.assertIn(\"apple\", self.calc.list_items())\n        self.assertEqual(self.calc.total_items(), 3)\n\n    def test_add_item_default_quantity(self):\n        self.calc.add_item(\"banana\", 2.0)\n        self.assertEqual(self.calc.total_items(), 1)\n\n    def test_add_item_invalid_name_type(self):\n        with self.assertRaises(TypeError):\n            self.calc.add_item(123, 1.0, 1)\n\n    def test_add_item_invalid_price_type(self):\n        with self.assertRaises(TypeError):\n            self.calc.add_item(\"item\", \"free\", 1)\n\n    def test_add_item_negative_price(self):\n        with self.assertRaises(ValueError):\n            self.calc.add_item(\"item\", -5.0, 1)\n\n    def test_add_item_invalid_quantity_type(self):\n        with self.assertRaises(TypeError):\n            self.calc.add_item(\"item\", 1.0, \"two\")\n\n    def test_add_item_negative_quantity(self):\n        with self.assertRaises(ValueError):\n            self.calc.add_item(\"item\", 1.0, -1)\n\n    def test_remove_item(self):\n        self.calc.add_item(\"pear\", 2.0, 2)\n        self.calc.remove_item(\"pear\")\n        self.assertNotIn(\"pear\", self.calc.list_items())\n        self.assertEqual(self.calc.total_items(), 0)\n\n    def test_remove_nonexistent_item_raises(self):\n        with self.assertRaises(ValueError):\n            self.calc.remove_item(\"nonexistent\")\n\n    def test_get_subtotal_empty(self):\n        self.assertEqual(self.calc.get_subtotal(), 0.0)\n\n    def test_get_subtotal_multiple_items(self):\n        self.calc.add_item(\"a\", 1.5, 2)\n        self.calc.add_item(\"b\", 2.0, 3)\n        self.assertAlmostEqual(self.calc.get_subtotal(), 1.5*2 + 2.0*3)\n\n    def test_apply_discount_typical(self):\n        subtotal = 100.0\n        self.assertEqual(self.calc.apply_discount(subtotal, 10.0), 90.0)\n\n    def test_apply_discount_zero(self):\n        subtotal = 50.0\n        self.assertEqual(self.calc.apply_discount(subtotal, 0.0), 50.0)\n\n    def test_apply_discount_equal_subtotal(self):\n        subtotal = 20.0\n        self.assertEqual(self.calc.apply_discount(subtotal, 20.0), 0.0)\n\n    def test_apply_discount_negative_discount(self):\n        with self.assertRaises(ValueError):\n            self.calc.apply_discount(50.0, -5.0)\n\n    def test_apply_discount_exceeds_subtotal(self):\n        with self.assertRaises(ValueError):\n            self.calc.apply_discount(30.0, 40.0)\n\n    def test_calculate_shipping_below_threshold(self):\n        self.assertEqual(self.calc.calculate_shipping(50.0), 10.0)\n\n    def test_calculate_shipping_at_threshold(self):\n        self.assertEqual(self.calc.calculate_shipping(100.0), 0.0)\n\n    def test_calculate_shipping_above_threshold(self):\n        self.assertEqual(self.calc.calculate_shipping(150.0), 0.0)\n\n    def test_calculate_tax_typical(self):\n        amount = 100.0\n        expected = amount * self.calc.tax_rate\n        self.assertAlmostEqual(self.calc.calculate_tax(amount), expected)\n\n    def test_calculate_tax_zero(self):\n        self.assertEqual(self.calc.calculate_tax(0.0), 0.0)\n\n    def test_calculate_tax_negative_amount(self):\n        with self.assertRaises(ValueError):\n            self.calc.calculate_tax(-10.0)\n\n    def test_calculate_total_no_discount_below_threshold(self):\n        self.calc.add_item(\"x\", 10.0, 2)\n        total = self.calc.calculate_total()\n        subtotal = 10.0 * 2\n        shipping = self.calc.shipping_cost\n        tax = (subtotal + shipping) * self.calc.tax_rate\n        self.assertAlmostEqual(total, subtotal + shipping + tax)\n\n    def test_calculate_total_with_discount_above_threshold(self):\n        self.calc.add_item(\"y\", 60.0, 2)\n        total = self.calc.calculate_total(discount=20.0)\n        subtotal = 60.0 * 2\n        discounted = subtotal - 20.0\n        shipping = 0.0\n        tax = discounted * self.calc.tax_rate\n        self.assertAlmostEqual(total, discounted + shipping + tax)\n\n    def test_calculate_total_invalid_discount(self):\n        with self.assertRaises(ValueError):\n            self.calc.calculate_total(discount=-5.0)\n\n    def test_total_items_empty(self):\n        self.assertEqual(self.calc.total_items(), 0)\n\n    def test_clear_order(self):\n        self.calc.add_item(\"z\", 5.0, 1)\n        self.calc.clear_order()\n        self.assertTrue(self.calc.is_empty())\n        self.assertEqual(self.calc.list_items(), [])\n\n    def test_list_items_multiple(self):\n        self.calc.add_item(\"a\", 1.0, 1)\n        self.calc.add_item(\"b\", 2.0, 2)\n        self.assertCountEqual(self.calc.list_items(), [\"a\", \"b\"])\n\n    def test_is_empty_true(self):\n        self.assertTrue(self.calc.is_empty())\n\n    def test_is_empty_false(self):\n        self.calc.add_item(\"item\", 1.0, 1)\n        self.assertFalse(self.calc.is_empty())\n\nif __name__ == \"__main__\":\n    unittest.main()",
    "response_time": 48.62125539779663,
    "strategy": "simple_prompting",
    "context_type": "interface",
    "prompt": "Generate a complete Python unit test suite for the class `OrderCalculator`.\n\nInstructions:\n- Use the `unittest` framework.\n- Include tests for all public methods of the class.\n- Ensure proper coverage of:\n  • typical use cases,\n  • edge cases (corner cases),\n  • incorrect input (invalid types or values),\n  • exceptions.\n- Each test should be clear, minimal and atomic (test one behavior at a time).\n- Avoid comments or explanations — output only the test code.\n- Return a single valid Python file with a class extending `unittest.TestCase`.\n\nBelow is the class interface (without implementation):\n\n```python\nfrom typing import TypedDict, List\n\n\nclass Item(TypedDict)\n\nclass OrderCalculator:\n    def __init__(self, tax_rate=0.23, free_shipping_threshold=100.0, shipping_cost=10.0):\n\n    def add_item(self, name: str, price: float, quantity: int = 1):\n\n    def remove_item(self, name: str):\n\n    def get_subtotal(self) -> float:\n\n    def apply_discount(self, subtotal: float, discount: float) -> float:\n\n    def calculate_shipping(self, discounted_subtotal: float) -> float:\n\n    def calculate_tax(self, amount: float) -> float:\n\n    def calculate_total(self, discount: float = 0.0) -> float:\n\n    def total_items(self) -> int:\n\n    def clear_order(self):\n\n    def list_items(self) -> List[str]:\n\n\tdef is_empty(self) -> bool:\n\n```"
  }
}