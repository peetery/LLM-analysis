{
  "model": "o3",
  "strategy": "simple_prompting",
  "context_type": "interface",
  "timestamp": "2025-07-03T00:57:50.295389",
  "response_time": 40.92103171348572,
  "test_file": "prompts_results\\simple_prompting\\interface\\gpt-o3\\tests.py",
  "raw_results": {
    "response": "python\nKopiuj\nEdytuj\nimport unittest\nfrom order_calculator import OrderCalculator\n\n\nclass TestOrderCalculator(unittest.TestCase):\n    def setUp(self):\n        self.calc = OrderCalculator()\n\n    # __init__, is_empty\n    def test_is_empty_initially(self):\n        self.assertTrue(self.calc.is_empty())\n\n    def test_custom_init_parameters(self):\n        custom = OrderCalculator(tax_rate=0.1, free_shipping_threshold=50.0, shipping_cost=5.0)\n        custom.add_item(\"item\", 20.0, 2)\n        self.assertAlmostEqual(custom.calculate_tax(100.0), 10.0)\n\n    # add_item\n    def test_add_item_updates_subtotal(self):\n        self.calc.add_item(\"Book\", 15.0, 2)\n        self.assertAlmostEqual(self.calc.get_subtotal(), 30.0)\n\n    def test_add_item_updates_total_items(self):\n        self.calc.add_item(\"Pen\", 1.5, 3)\n        self.assertEqual(self.calc.total_items(), 3)\n\n    def test_add_multiple_items_list_items(self):\n        self.calc.add_item(\"A\", 5.0)\n        self.calc.add_item(\"B\", 3.0)\n        self.assertCountEqual(self.calc.list_items(), [\"A\", \"B\"])\n\n    def test_add_item_invalid_price_raises(self):\n        with self.assertRaises(Exception):\n            self.calc.add_item(\"Bad\", -1.0, 1)\n\n    def test_add_item_invalid_quantity_raises(self):\n        with self.assertRaises(Exception):\n            self.calc.add_item(\"BadQty\", 1.0, 0)\n\n    def test_add_item_invalid_name_type_raises(self):\n        with self.assertRaises(Exception):\n            self.calc.add_item(123, 1.0, 1)  # type: ignore\n\n    # remove_item\n    def test_remove_item_success(self):\n        self.calc.add_item(\"Del\", 10.0)\n        self.calc.remove_item(\"Del\")\n        self.assertTrue(self.calc.is_empty())\n\n    def test_remove_item_nonexistent_raises(self):\n        with self.assertRaises(Exception):\n            self.calc.remove_item(\"None\")\n\n    # get_subtotal\n    def test_get_subtotal_no_items_zero(self):\n        self.assertAlmostEqual(self.calc.get_subtotal(), 0.0)\n\n    # apply_discount\n    def test_apply_discount_typical(self):\n        self.assertAlmostEqual(self.calc.apply_discount(100.0, 15.0), 85.0)\n\n    def test_apply_discount_zero_discount(self):\n        self.assertAlmostEqual(self.calc.apply_discount(50.0, 0.0), 50.0)\n\n    def test_apply_discount_negative_discount_raises(self):\n        with self.assertRaises(Exception):\n            self.calc.apply_discount(50.0, -5.0)\n\n    # calculate_shipping\n    def test_calculate_shipping_below_threshold(self):\n        self.assertAlmostEqual(self.calc.calculate_shipping(80.0), 10.0)\n\n    def test_calculate_shipping_at_threshold(self):\n        self.assertAlmostEqual(self.calc.calculate_shipping(100.0), 0.0)\n\n    def test_calculate_shipping_above_threshold(self):\n        self.assertAlmostEqual(self.calc.calculate_shipping(120.0), 0.0)\n\n    def test_calculate_shipping_negative_subtotal_raises(self):\n        with self.assertRaises(Exception):\n            self.calc.calculate_shipping(-1.0)\n\n    # calculate_tax\n    def test_calculate_tax_typical(self):\n        self.assertAlmostEqual(self.calc.calculate_tax(100.0), 23.0)\n\n    def test_calculate_tax_zero(self):\n        self.assertAlmostEqual(self.calc.calculate_tax(0.0), 0.0)\n\n    def test_calculate_tax_negative_amount_raises(self):\n        with self.assertRaises(Exception):\n            self.calc.calculate_tax(-10.0)\n\n    # calculate_total\n    def test_calculate_total_no_discount(self):\n        self.calc.add_item(\"Item\", 40.0, 3)  # subtotal 120\n        expected_total = 120.0  # discounted subtotal\n        expected_total += 0.0   # shipping (free)\n        expected_total += 120.0 * 0.23  # tax\n        self.assertAlmostEqual(self.calc.calculate_total(), expected_total)\n\n    def test_calculate_total_with_discount(self):\n        self.calc.add_item(\"Item\", 20.0, 2)  # subtotal 40\n        discount = 5.0\n        discounted = 35.0\n        shipping = 10.0\n        tax = (discounted + shipping) * 0.23\n        expected_total = discounted + shipping + tax\n        self.assertAlmostEqual(self.calc.calculate_total(discount), expected_total)\n\n    # clear_order, total_items\n    def test_clear_order_resets_state(self):\n        self.calc.add_item(\"X\", 1.0, 2)\n        self.calc.clear_order()\n        self.assertTrue(self.calc.is_empty())\n        self.assertEqual(self.calc.total_items(), 0)\n        self.assertEqual(self.calc.list_items(), [])\n\n\nif __name__ == \"__main__\":\n    unittest.main()",
    "response_time": 40.92103171348572,
    "strategy": "simple_prompting",
    "context_type": "interface",
    "prompt": "Generate a complete Python unit test suite for the class `OrderCalculator`.\n\nInstructions:\n- Use the `unittest` framework.\n- Include tests for all public methods of the class.\n- Ensure proper coverage of:\n  • typical use cases,\n  • edge cases (corner cases),\n  • incorrect input (invalid types or values),\n  • exceptions.\n- Each test should be clear, minimal and atomic (test one behavior at a time).\n- Avoid comments or explanations — output only the test code.\n- Return a single valid Python file with a class extending `unittest.TestCase`.\n\nBelow is the class interface (without implementation):\n\n```python\nfrom typing import TypedDict, List\n\n\nclass Item(TypedDict)\n\nclass OrderCalculator:\n    def __init__(self, tax_rate=0.23, free_shipping_threshold=100.0, shipping_cost=10.0):\n\n    def add_item(self, name: str, price: float, quantity: int = 1):\n\n    def remove_item(self, name: str):\n\n    def get_subtotal(self) -> float:\n\n    def apply_discount(self, subtotal: float, discount: float) -> float:\n\n    def calculate_shipping(self, discounted_subtotal: float) -> float:\n\n    def calculate_tax(self, amount: float) -> float:\n\n    def calculate_total(self, discount: float = 0.0) -> float:\n\n    def total_items(self) -> int:\n\n    def clear_order(self):\n\n    def list_items(self) -> List[str]:\n\n\tdef is_empty(self) -> bool:\n\n```"
  }
}