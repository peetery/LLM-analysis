{
  "model": "claude-3.7-sonnet",
  "strategy": "simple_prompting",
  "context_type": "interface",
  "timestamp": "2025-07-05T18:05:07.997466",
  "response_time": 45.873332500457764,
  "test_file": "prompts_results\\simple_prompting\\interface\\claude-3.7-sonnet\\tests.py",
  "raw_results": {
    "response": "import unittest\nfrom typing import TypedDict, List\n\nclass Item(TypedDict):\n    name: str\n    price: float\n    quantity: int\n\nclass OrderCalculator:\n    def __init__(self, tax_rate=0.23, free_shipping_threshold=100.0, shipping_cost=10.0):\n        pass\n\n    def add_item(self, name: str, price: float, quantity: int = 1):\n        pass\n\n    def remove_item(self, name: str):\n        pass\n\n    def get_subtotal(self) -> float:\n        pass\n\n    def apply_discount(self, subtotal: float, discount: float) -> float:\n        pass\n\n    def calculate_shipping(self, discounted_subtotal: float) -> float:\n        pass\n\n    def calculate_tax(self, amount: float) -> float:\n        pass\n\n    def calculate_total(self, discount: float = 0.0) -> float:\n        pass\n\n    def total_items(self) -> int:\n        pass\n\n    def clear_order(self):\n        pass\n\n    def list_items(self) -> List[str]:\n        pass\n\n    def is_empty(self) -> bool:\n        pass\n\n\nclass TestOrderCalculator(unittest.TestCase):\n    def setUp(self):\n        self.calculator = OrderCalculator()\n        self.calculator_custom = OrderCalculator(tax_rate=0.10, free_shipping_threshold=200.0, shipping_cost=15.0)\n\n    def test_init_default_values(self):\n        calculator = OrderCalculator()\n        self.assertEqual(calculator.tax_rate, 0.23)\n        self.assertEqual(calculator.free_shipping_threshold, 100.0)\n        self.assertEqual(calculator.shipping_cost, 10.0)\n\n    def test_init_custom_values(self):\n        calculator = OrderCalculator(tax_rate=0.10, free_shipping_threshold=200.0, shipping_cost=15.0)\n        self.assertEqual(calculator.tax_rate, 0.10)\n        self.assertEqual(calculator.free_shipping_threshold, 200.0)\n        self.assertEqual(calculator.shipping_cost, 15.0)\n\n    def test_add_item_single(self):\n        self.calculator.add_item(\"Test Item\", 10.0)\n        self.assertEqual(self.calculator.total_items(), 1)\n        self.assertIn(\"Test Item\", self.calculator.list_items())\n\n    def test_add_item_multiple_quantity(self):\n        self.calculator.add_item(\"Test Item\", 10.0, 3)\n        self.assertEqual(self.calculator.total_items(), 3)\n\n    def test_add_item_invalid_price_negative(self):\n        with self.assertRaises(ValueError):\n            self.calculator.add_item(\"Test Item\", -10.0)\n\n    def test_add_item_invalid_price_zero(self):\n        with self.assertRaises(ValueError):\n            self.calculator.add_item(\"Test Item\", 0.0)\n\n    def test_add_item_invalid_quantity(self):\n        with self.assertRaises(ValueError):\n            self.calculator.add_item(\"Test Item\", 10.0, 0)\n\n    def test_add_item_invalid_name_empty(self):\n        with self.assertRaises(ValueError):\n            self.calculator.add_item(\"\", 10.0)\n\n    def test_add_item_invalid_name_none(self):\n        with self.assertRaises(TypeError):\n            self.calculator.add_item(None, 10.0)\n\n    def test_add_multiple_items(self):\n        self.calculator.add_item(\"Item 1\", 10.0)\n        self.calculator.add_item(\"Item 2\", 20.0)\n        self.assertEqual(self.calculator.total_items(), 2)\n        self.assertIn(\"Item 1\", self.calculator.list_items())\n        self.assertIn(\"Item 2\", self.calculator.list_items())\n\n    def test_remove_item_existing(self):\n        self.calculator.add_item(\"Test Item\", 10.0)\n        self.calculator.remove_item(\"Test Item\")\n        self.assertEqual(self.calculator.total_items(), 0)\n        self.assertNotIn(\"Test Item\", self.calculator.list_items())\n\n    def test_remove_item_nonexistent(self):\n        with self.assertRaises(KeyError):\n            self.calculator.remove_item(\"Nonexistent Item\")\n\n    def test_remove_item_invalid_type(self):\n        with self.assertRaises(TypeError):\n            self.calculator.remove_item(None)\n\n    def test_get_subtotal_empty(self):\n        self.assertEqual(self.calculator.get_subtotal(), 0.0)\n\n    def test_get_subtotal_single_item(self):\n        self.calculator.add_item(\"Test Item\", 10.0)\n        self.assertEqual(self.calculator.get_subtotal(), 10.0)\n\n    def test_get_subtotal_multiple_items(self):\n        self.calculator.add_item(\"Item 1\", 10.0)\n        self.calculator.add_item(\"Item 2\", 20.0)\n        self.assertEqual(self.calculator.get_subtotal(), 30.0)\n\n    def test_get_subtotal_multiple_quantity(self):\n        self.calculator.add_item(\"Test Item\", 10.0, 3)\n        self.assertEqual(self.calculator.get_subtotal(), 30.0)\n\n    def test_apply_discount_zero(self):\n        subtotal = 100.0\n        self.assertEqual(self.calculator.apply_discount(subtotal, 0.0), 100.0)\n\n    def test_apply_discount_percentage(self):\n        subtotal = 100.0\n        self.assertEqual(self.calculator.apply_discount(subtotal, 0.1), 90.0)\n\n    def test_apply_discount_percentage_greater_than_one(self):\n        subtotal = 100.0\n        with self.assertRaises(ValueError):\n            self.calculator.apply_discount(subtotal, 1.1)\n\n    def test_apply_discount_negative(self):\n        subtotal = 100.0\n        with self.assertRaises(ValueError):\n            self.calculator.apply_discount(subtotal, -0.1)\n\n    def test_calculate_shipping_below_threshold(self):\n        discounted_subtotal = 50.0\n        self.assertEqual(self.calculator.calculate_shipping(discounted_subtotal), 10.0)\n\n    def test_calculate_shipping_at_threshold(self):\n        discounted_subtotal = 100.0\n        self.assertEqual(self.calculator.calculate_shipping(discounted_subtotal), 0.0)\n\n    def test_calculate_shipping_above_threshold(self):\n        discounted_subtotal = 150.0\n        self.assertEqual(self.calculator.calculate_shipping(discounted_subtotal), 0.0)\n\n    def test_calculate_shipping_custom_threshold(self):\n        discounted_subtotal = 150.0\n        self.assertEqual(self.calculator_custom.calculate_shipping(discounted_subtotal), 15.0)\n        \n        discounted_subtotal = 200.0\n        self.assertEqual(self.calculator_custom.calculate_shipping(discounted_subtotal), 0.0)\n\n    def test_calculate_shipping_negative_subtotal(self):\n        with self.assertRaises(ValueError):\n            self.calculator.calculate_shipping(-50.0)\n\n    def test_calculate_tax_zero(self):\n        amount = 0.0\n        self.assertEqual(self.calculator.calculate_tax(amount), 0.0)\n\n    def test_calculate_tax_positive(self):\n        amount = 100.0\n        self.assertEqual(self.calculator.calculate_tax(amount), 23.0)\n\n    def test_calculate_tax_custom_rate(self):\n        amount = 100.0\n        self.assertEqual(self.calculator_custom.calculate_tax(amount), 10.0)\n\n    def test_calculate_tax_negative(self):\n        with self.assertRaises(ValueError):\n            self.calculator.calculate_tax(-100.0)\n\n    def test_calculate_total_no_discount(self):\n        self.calculator.add_item(\"Item 1\", 50.0)\n        self.assertEqual(self.calculator.calculate_total(), 73.5)  # 50 + 10 shipping + 23% tax on 60\n\n    def test_calculate_total_with_discount(self):\n        self.calculator.add_item(\"Item 1\", 100.0)\n        self.assertEqual(self.calculator.calculate_total(0.1), 110.7)  # 100 - 10 discount + 0 shipping + 23% tax on 90\n\n    def test_calculate_total_empty_order(self):\n        self.assertEqual(self.calculator.calculate_total(), 0.0)\n\n    def test_calculate_total_free_shipping(self):\n        self.calculator.add_item(\"Item 1\", 200.0)\n        self.assertEqual(self.calculator.calculate_total(), 246.0)  # 200 + 0 shipping + 23% tax on 200\n\n    def test_total_items_empty(self):\n        self.assertEqual(self.calculator.total_items(), 0)\n\n    def test_total_items_single_item(self):\n        self.calculator.add_item(\"Test Item\", 10.0)\n        self.assertEqual(self.calculator.total_items(), 1)\n\n    def test_total_items_multiple_items(self):\n        self.calculator.add_item(\"Item 1\", 10.0)\n        self.calculator.add_item(\"Item 2\", 20.0)\n        self.assertEqual(self.calculator.total_items(), 2)\n\n    def test_total_items_multiple_quantity(self):\n        self.calculator.add_item(\"Test Item\", 10.0, 3)\n        self.assertEqual(self.calculator.total_items(), 3)\n\n    def test_clear_order(self):\n        self.calculator.add_item(\"Item 1\", 10.0)\n        self.calculator.add_item(\"Item 2\", 20.0)\n        self.calculator.clear_order()\n        self.assertEqual(self.calculator.total_items(), 0)\n        self.assertEqual(len(self.calculator.list_items()), 0)\n\n    def test_list_items_empty(self):\n        self.assertEqual(len(self.calculator.list_items()), 0)\n\n    def test_list_items_single(self):\n        self.calculator.add_item(\"Test Item\", 10.0)\n        self.assertEqual(len(self.calculator.list_items()), 1)\n        self.assertIn(\"Test Item\", self.calculator.list_items())\n\n    def test_list_items_multiple(self):\n        self.calculator.add_item(\"Item 1\", 10.0)\n        self.calculator.add_item(\"Item 2\", 20.0)\n        items = self.calculator.list_items()\n        self.assertEqual(len(items), 2)\n        self.assertIn(\"Item 1\", items)\n        self.assertIn(\"Item 2\", items)\n\n    def test_is_empty_true(self):\n        self.assertTrue(self.calculator.is_empty())\n\n    def test_is_empty_false(self):\n        self.calculator.add_item(\"Test Item\", 10.0)\n        self.assertFalse(self.calculator.is_empty())\n\n    def test_is_empty_after_clear(self):\n        self.calculator.add_item(\"Test Item\", 10.0)\n        self.calculator.clear_order()\n        self.assertTrue(self.calculator.is_empty())\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n",
    "response_time": 45.873332500457764,
    "strategy": "simple_prompting",
    "context_type": "interface",
    "prompt": "Generate a complete Python unit test suite for the class `OrderCalculator`.\n\nInstructions:\n- Use the `unittest` framework.\n- Include tests for all public methods of the class.\n- Ensure proper coverage of:\n  • typical use cases,\n  • edge cases (corner cases),\n  • incorrect input (invalid types or values),\n  • exceptions.\n- Each test should be clear, minimal and atomic (test one behavior at a time).\n- Avoid comments or explanations — output only the test code.\n- Return a single valid Python file with a class extending `unittest.TestCase`.\n\nBelow is the class interface (without implementation):\n\n```python\nfrom typing import TypedDict, List\n\n\nclass Item(TypedDict)\n\nclass OrderCalculator:\n    def __init__(self, tax_rate=0.23, free_shipping_threshold=100.0, shipping_cost=10.0):\n\n    def add_item(self, name: str, price: float, quantity: int = 1):\n\n    def remove_item(self, name: str):\n\n    def get_subtotal(self) -> float:\n\n    def apply_discount(self, subtotal: float, discount: float) -> float:\n\n    def calculate_shipping(self, discounted_subtotal: float) -> float:\n\n    def calculate_tax(self, amount: float) -> float:\n\n    def calculate_total(self, discount: float = 0.0) -> float:\n\n    def total_items(self) -> int:\n\n    def clear_order(self):\n\n    def list_items(self) -> List[str]:\n\n\tdef is_empty(self) -> bool:\n\n```"
  }
}