{
  "model": "o3",
  "strategy": "simple_prompting",
  "context_type": "full_context",
  "timestamp": "2025-07-03T01:01:19.100415",
  "response_time": 71.54005217552185,
  "test_file": "prompts_results\\simple_prompting\\full_context\\gpt-o3\\tests.py",
  "raw_results": {
    "response": "import unittest\n            calc.calculate_tax(-1)\n\n    def test_calculate_tax_invalid_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_tax(\"100\")\n\n    def test_calculate_total_with_shipping_and_tax(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 50, 1)\n        calc.add_item(\"B\", 20, 2)\n        total = calc.calculate_total(0.1)\n        expected_subtotal = 50 + 20 * 2\n        discounted = expected_subtotal * 0.9\n        shipping = 10\n        tax = (discounted + shipping) * 0.23\n        expected_total = discounted + shipping + tax\n        self.assertAlmostEqual(total, expected_total)\n\n    def test_calculate_total_free_shipping(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 120, 1)\n        total = calc.calculate_total()\n        discounted = 120\n        shipping = 0\n        tax = (discounted + shipping) * 0.23\n        self.assertAlmostEqual(total, discounted + shipping + tax)\n\n    def test_calculate_total_invalid_discount_type(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 10, 1)\n        with self.assertRaises(TypeError):\n            calc.calculate_total(\"0.1\")\n\n    def test_calculate_total_empty_order_value_error(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_total()\n\n    def test_total_items(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 1, 2)\n        calc.add_item(\"B\", 1, 3)\n        self.assertEqual(calc.total_items(), 5)\n\n    def test_clear_order_resets(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 1, 1)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n\n    def test_list_items_unique(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 1, 1)\n        calc.add_item(\"A\", 1, 2)\n        calc.add_item(\"B\", 2, 1)\n        self.assertEqual(set(calc.list_items()), {\"A\", \"B\"})\n\n    def test_is_empty_true(self):\n        calc = OrderCalculator()\n        self.assertTrue(calc.is_empty())\n\n    def test_is_empty_false(self):\n        calc = OrderCalculator()\n        calc.add_item(\"A\", 1, 1)\n        self.assertFalse(calc.is_empty())\n\n\nif __name__ == \"__main__\":\n    unittest.main()",
    "response_time": 71.54005217552185,
    "strategy": "simple_prompting",
    "context_type": "full_context",
    "prompt": "Generate a complete Python unit test suite for the class `OrderCalculator`.\n\nInstructions:\n- Use the `unittest` framework.\n- Include tests for all public methods of the class.\n- Ensure proper coverage of:\n  • typical use cases,\n  • edge cases (corner cases),\n  • incorrect input (invalid types or values),\n  • exceptions.\n- Each test should be clear, minimal and atomic (test one behavior at a time).\n- Avoid comments or explanations — output only the test code.\n- Return a single valid Python file with a class extending `unittest.TestCase`.\n\nBelow is the full class implementation:\n\n```python\nfrom typing import TypedDict, List\n\n\nclass Item(TypedDict):\n    \"\"\"\n    Represents a single product entry in the order.\n\n    :key name: The name of the product.\n    :key price: The price per unit of the product.\n    :key quantity: The number of units of the product.\n    \"\"\"\n    name: str\n    price: float\n    quantity: int\n\n\nclass OrderCalculator:\n    def __init__(self, tax_rate=0.23, free_shipping_threshold=100.0, shipping_cost=10.0):\n        \"\"\"\n        Initializes a new OrderCalculator instance.\n        Initializes an empty list of items (each represented as a TypedDict 'Item')\n        and stores the configured tax and shipping parameters.\n\n        :param tax_rate: The percentage of tax applied to the final amount, expressed as a float between 0.0 and 1.0 (default is 0.23 for 23%).\n        :param free_shipping_threshold: The minimum order value (after discount) that qualifies for free shipping (default is 100.0).\n        :param shipping_cost: The cost of shipping applied if the order does not meet the free shipping threshold (default is 10.0).\n\n        :raises ValueError:\n            - If tax_rate is not in the range [0.0, 1.0].\n            - If free_shipping_threshold is negative.\n            - If shipping_cost is negative.\n        :raises TypeError: If any parameter is of incorrect type.\n        \"\"\"\n        if not isinstance(tax_rate, (float, int)):\n            raise TypeError(\"Tax rate must be a float or int.\")\n        if not isinstance(free_shipping_threshold, (float, int)):\n            raise TypeError(\"Free shipping threshold must be a float or int.\")\n        if not isinstance(shipping_cost, (float, int)):\n            raise TypeError(\"Shipping cost must be a float or int.\")\n        if not 0.0 <= tax_rate <= 1.0:\n            raise ValueError(\"Tax rate must be between 0.0 and 1.0.\")\n        if free_shipping_threshold < 0.0:\n            raise ValueError(\"Free shipping threshold cannot be negative.\")\n        if shipping_cost < 0.0:\n            raise ValueError(\"Shipping cost cannot be negative.\")\n\n        self.items: List[Item] = []\n        self.tax_rate = tax_rate\n        self.free_shipping_threshold = free_shipping_threshold\n        self.shipping_cost = shipping_cost\n\n    def add_item(self, name: str, price: float, quantity: int = 1):\n        \"\"\"\n        Add an item to the order.\n\n        If an item with the same name and price already exists, its quantity is increased.\n\n        :param name: the name of the item\n        :param price: the price of the item\n        :param quantity: the quantity of the item (default is 1)\n        :raises ValueError: If name is empty, price <= 0, quantity < 1, or item with same name but different price exists.\n        :raises TypeError: If inputs are of incorrect types.\n        \"\"\"\n        if not isinstance(name, str):\n            raise TypeError(\"Item name must be a string.\")\n        if not isinstance(price, (float, int)):\n            raise TypeError(\"Price must be a number.\")\n        if not isinstance(quantity, int):\n            raise TypeError(\"Quantity must be an integer.\")\n        if not name:\n            raise ValueError(\"Item name cannot be empty.\")\n        if quantity < 1:\n            raise ValueError(\"Quantity must be at least 1.\")\n        if price <= 0:\n            raise ValueError(\"Price must be greater than 0.\")\n\n        for item in self.items:\n            if item[\"name\"] == name:\n                if item[\"price\"] != price:\n                    raise ValueError(\"Item with the same name but different price already exists.\")\n                item[\"quantity\"] += quantity\n                return\n\n\n        self.items.append({\n            \"name\": name,\n            \"price\": price,\n            \"quantity\": quantity\n        })\n\n    def remove_item(self, name: str):\n        \"\"\"\n        Removes an item from the order.\n\n        :param name: The name of the item to remove.\n        :raises ValueError: If no item with the given name exists in the order.\n        :raises TypeError: If name is not a string.\n        \"\"\"\n        if not isinstance(name, str):\n            raise TypeError(\"Item name must be a string.\")\n        if not any(item[\"name\"] == name for item in self.items):\n            raise ValueError(f\"Item with name '{name}' does not exist in the order.\")\n\n        self.items = [item for item in self.items if item[\"name\"] != name]\n\n    def get_subtotal(self) -> float:\n        \"\"\"\n        Calculates the subtotal (sum of item prices times their quantities) for all items in the order.\n\n        :return: The subtotal as a float.\n        :raises ValueError: If the order is empty.\n        \"\"\"\n        if not self.items:\n            raise ValueError(\"Cannot calculate subtotal on empty order.\")\n        return sum(item[\"price\"] * item[\"quantity\"] for item in self.items)\n\n    def apply_discount(self, subtotal: float, discount: float) -> float:\n        \"\"\"\n        Applies a percentage discount to the given subtotal.\n\n        :param subtotal: the subtotal amount (must be >= 0)\n        :param discount: the discount rate as a float between 0.0 and 1.0 (e.g. 0.2 = 20%).\n        :return: The discounted subtotal.\n        :raises ValueError: If subtotal < 0 or discount is outside the [0.0, 1.0] range.\n        :raises TypeError: If inputs are of incorrect types.\n        \"\"\"\n        if not isinstance(subtotal, (float, int)):\n            raise TypeError(\"Subtotal must be a number.\")\n        if not isinstance(discount, (float, int)):\n            raise TypeError(\"Discount must be a number.\")\n        if not 0.0 <= discount <= 1.0:\n            raise ValueError(\"Discount must be between 0.0 and 1.0.\")\n        if subtotal < 0.0:\n            raise ValueError(\"Cannot apply discount on negative subtotal.\")\n        return subtotal * (1 - discount)\n\n    def calculate_shipping(self, discounted_subtotal: float) -> float:\n        \"\"\"\n        Calculates the shipping cost based on the discounted subtotal.\n\n        If the discounted subtotal >= free shipping threshold shipping is free (0.0).\n        Otherwise, the standard shipping cost is applied.\n\n        :param discounted_subtotal: The subtotal amount after applying discount (must be >= 0.0).\n        :return: The shipping cost as a float (0.0 or self.shipping_cost).\n        :raises TypeError: If input is not a number.\n        \"\"\"\n        if not isinstance(discounted_subtotal, (float, int)):\n            raise TypeError(\"Discounted subtotal must be a number.\")\n        if discounted_subtotal >= self.free_shipping_threshold:\n            return 0.0\n        return self.shipping_cost\n\n    def calculate_tax(self, amount: float) -> float:\n        \"\"\"\n        Calculates the tax based on the provided amount using the configured tax rate.\n\n        :param amount: The amount on which to calculate the tax (must be >= 0.0).\n        :return: The tax as a float.\n        :raises ValueError: If the amount is negative.\n        :raises TypeError: If input is not a number.\n        \"\"\"\n        if not isinstance(amount, (float, int)):\n            raise TypeError(\"Amount must be a number.\")\n        if amount < 0.0:\n            raise ValueError(\"Cannot calculate tax on negative amount.\")\n        return amount * self.tax_rate\n\n    def calculate_total(self, discount: float = 0.0) -> float:\n        \"\"\"\n        Calculates the total cost of the order after applying discount, shipping, and tax.\n\n        This method performs the following steps:\n        1. Calculates the subtotal from all items.\n        2. Applies the given discount.\n        3. Adds shipping cost if necessary.\n        4. Calculates tax on the discounted subtotal + shipping.\n\n        :param discount: Discount rate between 0.0 and 1.0 (e.g. 0.2 = 20%).\n        :return: The final total as a float.\n        :raises ValueError:\n            - If the subtotal is negative.\n            - If the discount is invalid.\n            - If the order is empty.\n        :raises TypeError: If input is not a number.\n        \"\"\"\n        if not isinstance(discount, (float, int)):\n            raise TypeError(\"Discount must be a number.\")\n\n        subtotal = self.get_subtotal()\n        if subtotal < 0.0:\n            raise ValueError(\"Cannot calculate total on negative subtotal.\")\n        discounted_subtotal = self.apply_discount(subtotal, discount)\n        shipping_cost = self.calculate_shipping(discounted_subtotal)\n        tax = self.calculate_tax(discounted_subtotal + shipping_cost)\n        return discounted_subtotal + shipping_cost + tax\n\n    def total_items(self) -> int:\n        \"\"\"\n        Returns the total quantity of all items in the order.\n\n        :return: The sum of the quantities of all items.\n        :return:\n        \"\"\"\n        return sum(item[\"quantity\"] for item in self.items)\n\n    def clear_order(self):\n        \"\"\"\n        Removes all items from the order, resetting it to an empty state.\n        \"\"\"\n        self.items = []\n\n    def list_items(self) -> List[str]:\n        \"\"\"\n        Returns a list of all unique item names currently in the order.\n\n        :return: A list of unique item names (no duplicates).\n        \"\"\"\n        return list(set(item[\"name\"] for item in self.items))\n\n    def is_empty(self) -> bool:\n        \"\"\"\n        Checks whether the order is currently empty.\n\n        :return: True if no items are in the order, False otherwise.\n        \"\"\"\n        return len(self.items) == 0\n```"
  }
}