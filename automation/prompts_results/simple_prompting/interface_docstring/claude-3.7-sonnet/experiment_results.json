{
  "model": "claude-3.7-sonnet",
  "strategy": "simple_prompting",
  "context_type": "interface_docstring",
  "timestamp": "2025-07-05T18:06:56.896092",
  "response_time": 67.50941228866577,
  "test_file": "prompts_results\\simple_prompting\\interface_docstring\\claude-3.7-sonnet\\tests.py",
  "raw_results": {
    "response": "import unittest\nfrom typing import TypedDict, List\n\n\nclass Item(TypedDict):\n    \"\"\"\n    Represents a single product entry in the order.\n    \n    :key name: The name of the product.\n    :key price: The price per unit of the product.\n    :key quantity: The number of units of the product.\n    \"\"\"\n\n\nclass OrderCalculator:\n    def __init__(self, tax_rate=0.23, free_shipping_threshold=100.0, shipping_cost=10.0):\n        \"\"\"\n        Initializes a new OrderCalculator instance.\n        Initializes an empty list of items (each represented as a TypedDict 'Item')\n        and stores the configured tax and shipping parameters.\n        \n        :param tax_rate: The percentage of tax applied to the final amount, expressed as a float between 0.0 and 1.0 (default is 0.23 for 23%).\n        :param free_shipping_threshold: The minimum order value (after discount) that qualifies for free shipping (default is 100.0).\n        :param shipping_cost: The cost of shipping applied if the order does not meet the free shipping threshold (default is 10.0).\n        \n        :raises ValueError:\n            - If tax_rate is not in the range [0.0, 1.0].\n            - If free_shipping_threshold is negative.\n            - If shipping_cost is negative.\n        :raises TypeError: If any parameter is of incorrect type.\n        \"\"\"\n        pass\n    \n    def add_item(self, name: str, price: float, quantity: int = 1):\n        \"\"\"\n        Add an item to the order.\n        \n        If an item with the same name and price already exists, its quantity is increased.\n        \n        :param name: the name of the item\n        :param price: the price of the item\n        :param quantity: the quantity of the item (default is 1)\n        :raises ValueError: If name is empty, price <= 0, quantity < 1, or item with same name but different price exists.\n        :raises TypeError: If inputs are of incorrect types.\n        \"\"\"\n        pass\n    \n    def remove_item(self, name: str):\n        \"\"\"\n        Removes an item from the order.\n        \n        :param name: The name of the item to remove.\n        :raises ValueError: If no item with the given name exists in the order.\n        :raises TypeError: If name is not a string.\n        \"\"\"\n        pass\n    \n    def get_subtotal(self) -> float:\n        \"\"\"\n        Calculates the subtotal (sum of item prices times their quantities) for all items in the order.\n        \n        :return: The subtotal as a float.\n        :raises ValueError: If the order is empty.\n        \"\"\"\n        pass\n    \n    def apply_discount(self, subtotal: float, discount: float) -> float:\n        \"\"\"\n        Applies a percentage discount to the given subtotal.\n        \n        :param subtotal: the subtotal amount (must be >= 0)\n        :param discount: the discount rate as a float between 0.0 and 1.0 (e.g. 0.2 = 20%).\n        :return: The discounted subtotal.\n        :raises ValueError: If subtotal < 0 or discount is outside the [0.0, 1.0] range.\n        :raises TypeError: If inputs are of incorrect types.\n        \"\"\"\n        pass\n    \n    def calculate_shipping(self, discounted_subtotal: float) -> float:\n        \"\"\"\n        Calculates the shipping cost based on the discounted subtotal.\n        \n        If the discounted subtotal >= free shipping threshold shipping is free (0.0).\n        Otherwise, the standard shipping cost is applied.\n        \n        :param discounted_subtotal: The subtotal amount after applying discount (must be >= 0.0).\n        :return: The shipping cost as a float (0.0 or self.shipping_cost).\n        :raises TypeError: If input is not a number.\n        \"\"\"\n        pass\n    \n    def calculate_tax(self, amount: float) -> float:\n        \"\"\"\n        Calculates the tax based on the provided amount using the configured tax rate.\n        \n        :param amount: The amount on which to calculate the tax (must be >= 0.0).\n        :return: The tax as a float.\n        :raises ValueError: If the amount is negative.\n        :raises TypeError: If input is not a number.\n        \"\"\"\n        pass\n    \n    def calculate_total(self, discount: float = 0.0) -> float:\n        \"\"\"\n        Calculates the total cost of the order after applying discount, shipping, and tax.\n        \n        This method performs the following steps:\n        1. Calculates the subtotal from all items.\n        2. Applies the given discount.\n        3. Adds shipping cost if necessary.\n        4. Calculates tax on the discounted subtotal + shipping.\n        \n        :param discount: Discount rate between 0.0 and 1.0 (e.g. 0.2 = 20%).\n        :return: The final total as a float.\n        :raises ValueError:\n            - If the subtotal is negative.\n            - If the discount is invalid.\n            - If the order is empty.\n        :raises TypeError: If input is not a number.\n        \"\"\"\n        pass\n    \n    def total_items(self) -> int:\n        \"\"\"\n        Returns the total quantity of all items in the order.\n        \n        :return: The sum of the quantities of all items.\n        :return:\n        \"\"\"\n        pass\n    \n    def clear_order(self):\n        \"\"\"\n        Removes all items from the order, resetting it to an empty state.\n        \"\"\"\n        pass\n    \n    def list_items(self) -> List[str]:\n        \"\"\"\n        Returns a list of all unique item names currently in the order.\n        \n        :return: A list of unique item names (no duplicates).\n        \"\"\"\n        pass\n    \n    def is_empty(self) -> bool:\n        \"\"\"\n        Checks whether the order is currently empty.\n        \n        :return: True if no items are in the order, False otherwise.\n        \"\"\"\n        pass\n\n\nclass TestOrderCalculator(unittest.TestCase):\n    def setUp(self):\n        self.calculator = OrderCalculator()\n        self.calculator_custom = OrderCalculator(tax_rate=0.10, free_shipping_threshold=50.0, shipping_cost=5.0)\n    \n    def test_init_default_values(self):\n        self.assertEqual(0.23, self.calculator._tax_rate)\n        self.assertEqual(100.0, self.calculator._free_shipping_threshold)\n        self.assertEqual(10.0, self.calculator._shipping_cost)\n        self.assertEqual([], self.calculator._items)\n    \n    def test_init_custom_values(self):\n        self.assertEqual(0.10, self.calculator_custom._tax_rate)\n        self.assertEqual(50.0, self.calculator_custom._free_shipping_threshold)\n        self.assertEqual(5.0, self.calculator_custom._shipping_cost)\n    \n    def test_init_invalid_tax_rate(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=-0.1)\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=1.1)\n    \n    def test_init_invalid_free_shipping_threshold(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(free_shipping_threshold=-0.1)\n    \n    def test_init_invalid_shipping_cost(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(shipping_cost=-0.1)\n    \n    def test_init_invalid_types(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(tax_rate=\"0.23\")\n        with self.assertRaises(TypeError):\n            OrderCalculator(free_shipping_threshold=\"100.0\")\n        with self.assertRaises(TypeError):\n            OrderCalculator(shipping_cost=\"10.0\")\n    \n    def test_add_item_valid(self):\n        self.calculator.add_item(\"Test Item\", 10.0, 2)\n        self.assertEqual(1, len(self.calculator._items))\n        self.assertEqual(\"Test Item\", self.calculator._items[0][\"name\"])\n        self.assertEqual(10.0, self.calculator._items[0][\"price\"])\n        self.assertEqual(2, self.calculator._items[0][\"quantity\"])\n    \n    def test_add_item_default_quantity(self):\n        self.calculator.add_item(\"Test Item\", 10.0)\n        self.assertEqual(1, self.calculator._items[0][\"quantity\"])\n    \n    def test_add_item_same_name_same_price(self):\n        self.calculator.add_item(\"Test Item\", 10.0, 2)\n        self.calculator.add_item(\"Test Item\", 10.0, 3)\n        self.assertEqual(1, len(self.calculator._items))\n        self.assertEqual(5, self.calculator._items[0][\"quantity\"])\n    \n    def test_add_item_same_name_different_price(self):\n        self.calculator.add_item(\"Test Item\", 10.0)\n        with self.assertRaises(ValueError):\n            self.calculator.add_item(\"Test Item\", 20.0)\n    \n    def test_add_item_empty_name(self):\n        with self.assertRaises(ValueError):\n            self.calculator.add_item(\"\", 10.0)\n    \n    def test_add_item_invalid_price(self):\n        with self.assertRaises(ValueError):\n            self.calculator.add_item(\"Test Item\", 0.0)\n        with self.assertRaises(ValueError):\n            self.calculator.add_item(\"Test Item\", -10.0)\n    \n    def test_add_item_invalid_quantity(self):\n        with self.assertRaises(ValueError):\n            self.calculator.add_item(\"Test Item\", 10.0, 0)\n        with self.assertRaises(ValueError):\n            self.calculator.add_item(\"Test Item\", 10.0, -1)\n    \n    def test_add_item_invalid_types(self):\n        with self.assertRaises(TypeError):\n            self.calculator.add_item(123, 10.0)\n        with self.assertRaises(TypeError):\n            self.calculator.add_item(\"Test Item\", \"10.0\")\n        with self.assertRaises(TypeError):\n            self.calculator.add_item(\"Test Item\", 10.0, 1.5)\n    \n    def test_remove_item_existing(self):\n        self.calculator.add_item(\"Test Item\", 10.0)\n        self.calculator.remove_item(\"Test Item\")\n        self.assertEqual(0, len(self.calculator._items))\n    \n    def test_remove_item_nonexistent(self):\n        with self.assertRaises(ValueError):\n            self.calculator.remove_item(\"Nonexistent Item\")\n    \n    def test_remove_item_invalid_type(self):\n        with self.assertRaises(TypeError):\n            self.calculator.remove_item(123)\n    \n    def test_get_subtotal_valid(self):\n        self.calculator.add_item(\"Item 1\", 10.0, 2)\n        self.calculator.add_item(\"Item 2\", 20.0, 1)\n        self.assertEqual(40.0, self.calculator.get_subtotal())\n    \n    def test_get_subtotal_empty(self):\n        with self.assertRaises(ValueError):\n            self.calculator.get_subtotal()\n    \n    def test_apply_discount_valid(self):\n        self.assertEqual(80.0, self.calculator.apply_discount(100.0, 0.2))\n        self.assertEqual(100.0, self.calculator.apply_discount(100.0, 0.0))\n        self.assertEqual(0.0, self.calculator.apply_discount(100.0, 1.0))\n    \n    def test_apply_discount_invalid_subtotal(self):\n        with self.assertRaises(ValueError):\n            self.calculator.apply_discount(-1.0, 0.2)\n    \n    def test_apply_discount_invalid_discount(self):\n        with self.assertRaises(ValueError):\n            self.calculator.apply_discount(100.0, -0.1)\n        with self.assertRaises(ValueError):\n            self.calculator.apply_discount(100.0, 1.1)\n    \n    def test_apply_discount_invalid_types(self):\n        with self.assertRaises(TypeError):\n            self.calculator.apply_discount(\"100.0\", 0.2)\n        with self.assertRaises(TypeError):\n            self.calculator.apply_discount(100.0, \"0.2\")\n    \n    def test_calculate_shipping_below_threshold(self):\n        self.assertEqual(10.0, self.calculator.calculate_shipping(99.9))\n        self.assertEqual(5.0, self.calculator_custom.calculate_shipping(49.9))\n    \n    def test_calculate_shipping_above_threshold(self):\n        self.assertEqual(0.0, self.calculator.calculate_shipping(100.0))\n        self.assertEqual(0.0, self.calculator.calculate_shipping(200.0))\n        self.assertEqual(0.0, self.calculator_custom.calculate_shipping(50.0))\n    \n    def test_calculate_shipping_invalid_type(self):\n        with self.assertRaises(TypeError):\n            self.calculator.calculate_shipping(\"100.0\")\n    \n    def test_calculate_tax_valid(self):\n        self.assertEqual(23.0, self.calculator.calculate_tax(100.0))\n        self.assertEqual(10.0, self.calculator_custom.calculate_tax(100.0))\n        self.assertEqual(0.0, self.calculator.calculate_tax(0.0))\n    \n    def test_calculate_tax_invalid_amount(self):\n        with self.assertRaises(ValueError):\n            self.calculator.calculate_tax(-1.0)\n    \n    def test_calculate_tax_invalid_type(self):\n        with self.assertRaises(TypeError):\n            self.calculator.calculate_tax(\"100.0\")\n    \n    def test_calculate_total_no_discount(self):\n        self.calculator.add_item(\"Item\", 50.0, 1)\n        # Subtotal: 50.0\n        # Discounted: 50.0\n        # Shipping: 10.0\n        # Tax: (50.0 + 10.0) * 0.23 = 13.8\n        # Total: 50.0 + 10.0 + 13.8 = 73.8\n        self.assertEqual(73.8, self.calculator.calculate_total())\n    \n    def test_calculate_total_with_discount(self):\n        self.calculator.add_item(\"Item\", 50.0, 1)\n        # Subtotal: 50.0\n        # Discounted: 50.0 * (1 - 0.1) = 45.0\n        # Shipping: 10.0\n        # Tax: (45.0 + 10.0) * 0.23 = 12.65\n        # Total: 45.0 + 10.0 + 12.65 = 67.65\n        self.assertEqual(67.65, self.calculator.calculate_total(0.1))\n    \n    def test_calculate_total_free_shipping(self):\n        self.calculator.add_item(\"Item\", 150.0, 1)\n        # Subtotal: 150.0\n        # Discounted: 150.0\n        # Shipping: 0.0 (free)\n        # Tax: 150.0 * 0.23 = 34.5\n        # Total: 150.0 + 0.0 + 34.5 = 184.5\n        self.assertEqual(184.5, self.calculator.calculate_total())\n    \n    def test_calculate_total_empty_order(self):\n        with self.assertRaises(ValueError):\n            self.calculator.calculate_total()\n    \n    def test_calculate_total_invalid_discount(self):\n        self.calculator.add_item(\"Item\", 50.0, 1)\n        with self.assertRaises(ValueError):\n            self.calculator.calculate_total(-0.1)\n        with self.assertRaises(ValueError):\n            self.calculator.calculate_total(1.1)\n    \n    def test_calculate_total_invalid_discount_type(self):\n        self.calculator.add_item(\"Item\", 50.0, 1)\n        with self.assertRaises(TypeError):\n            self.calculator.calculate_total(\"0.1\")\n    \n    def test_total_items_single_item(self):\n        self.calculator.add_item(\"Item\", 10.0, 5)\n        self.assertEqual(5, self.calculator.total_items())\n    \n    def test_total_items_multiple_items(self):\n        self.calculator.add_item(\"Item 1\", 10.0, 2)\n        self.calculator.add_item(\"Item 2\", 20.0, 3)\n        self.assertEqual(5, self.calculator.total_items())\n    \n    def test_total_items_empty(self):\n        self.assertEqual(0, self.calculator.total_items())\n    \n    def test_clear_order(self):\n        self.calculator.add_item(\"Item\", 10.0)\n        self.calculator.clear_order()\n        self.assertEqual(0, len(self.calculator._items))\n    \n    def test_list_items_empty(self):\n        self.assertEqual([], self.calculator.list_items())\n    \n    def test_list_items_single(self):\n        self.calculator.add_item(\"Item\", 10.0)\n        self.assertEqual([\"Item\"], self.calculator.list_items())\n    \n    def test_list_items_multiple(self):\n        self.calculator.add_item(\"Item 1\", 10.0)\n        self.calculator.add_item(\"Item 2\", 20.0)\n        self.assertIn(\"Item 1\", self.calculator.list_items())\n        self.assertIn(\"Item 2\", self.calculator.list_items())\n        self.assertEqual(2, len(self.calculator.list_items()))\n    \n    def test_is_empty_true(self):\n        self.assertTrue(self.calculator.is_empty())\n    \n    def test_is_empty_false(self):\n        self.calculator.add_item(\"Item\", 10.0)\n        self.assertFalse(self.calculator.is_empty())\n    \n    def test_is_empty_after_clear(self):\n        self.calculator.add_item(\"Item\", 10.0)\n        self.calculator.clear_order()\n        self.assertTrue(self.calculator.is_empty())\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n",
    "response_time": 67.50941228866577,
    "strategy": "simple_prompting",
    "context_type": "interface_docstring",
    "prompt": "Generate a complete Python unit test suite for the class `OrderCalculator`.\n\nInstructions:\n- Use the `unittest` framework.\n- Include tests for all public methods of the class.\n- Ensure proper coverage of:\n  • typical use cases,\n  • edge cases (corner cases),\n  • incorrect input (invalid types or values),\n  • exceptions.\n- Each test should be clear, minimal and atomic (test one behavior at a time).\n- Avoid comments or explanations — output only the test code.\n- Return a single valid Python file with a class extending `unittest.TestCase`.\n\nBelow is the class interface (without implementation) along with its docstrings:\n\n```python\nfrom typing import TypedDict, List\n\n\nclass Item(TypedDict):\n    \"\"\"\n    Represents a single product entry in the order.\n\n    :key name: The name of the product.\n    :key price: The price per unit of the product.\n    :key quantity: The number of units of the product.\n    \"\"\"\n\nclass OrderCalculator:\n    def __init__(self, tax_rate=0.23, free_shipping_threshold=100.0, shipping_cost=10.0):\n        \"\"\"\n        Initializes a new OrderCalculator instance.\n        Initializes an empty list of items (each represented as a TypedDict 'Item')\n        and stores the configured tax and shipping parameters.\n\n        :param tax_rate: The percentage of tax applied to the final amount, expressed as a float between 0.0 and 1.0 (default is 0.23 for 23%).\n        :param free_shipping_threshold: The minimum order value (after discount) that qualifies for free shipping (default is 100.0).\n        :param shipping_cost: The cost of shipping applied if the order does not meet the free shipping threshold (default is 10.0).\n\n        :raises ValueError:\n            - If tax_rate is not in the range [0.0, 1.0].\n            - If free_shipping_threshold is negative.\n            - If shipping_cost is negative.\n        :raises TypeError: If any parameter is of incorrect type.\n        \"\"\"\n\n    def add_item(self, name: str, price: float, quantity: int = 1):\n        \"\"\"\n        Add an item to the order.\n\n        If an item with the same name and price already exists, its quantity is increased.\n\n        :param name: the name of the item\n        :param price: the price of the item\n        :param quantity: the quantity of the item (default is 1)\n        :raises ValueError: If name is empty, price <= 0, quantity < 1, or item with same name but different price exists.\n        :raises TypeError: If inputs are of incorrect types.\n        \"\"\"\n\n    def remove_item(self, name: str):\n        \"\"\"\n        Removes an item from the order.\n\n        :param name: The name of the item to remove.\n        :raises ValueError: If no item with the given name exists in the order.\n        :raises TypeError: If name is not a string.\n        \"\"\"\n\n    def get_subtotal(self) -> float:\n        \"\"\"\n        Calculates the subtotal (sum of item prices times their quantities) for all items in the order.\n\n        :return: The subtotal as a float.\n        :raises ValueError: If the order is empty.\n        \"\"\"\n\n    def apply_discount(self, subtotal: float, discount: float) -> float:\n        \"\"\"\n        Applies a percentage discount to the given subtotal.\n\n        :param subtotal: the subtotal amount (must be >= 0)\n        :param discount: the discount rate as a float between 0.0 and 1.0 (e.g. 0.2 = 20%).\n        :return: The discounted subtotal.\n        :raises ValueError: If subtotal < 0 or discount is outside the [0.0, 1.0] range.\n        :raises TypeError: If inputs are of incorrect types.\n        \"\"\"\n\n    def calculate_shipping(self, discounted_subtotal: float) -> float:\n        \"\"\"\n        Calculates the shipping cost based on the discounted subtotal.\n\n        If the discounted subtotal >= free shipping threshold shipping is free (0.0).\n        Otherwise, the standard shipping cost is applied.\n\n        :param discounted_subtotal: The subtotal amount after applying discount (must be >= 0.0).\n        :return: The shipping cost as a float (0.0 or self.shipping_cost).\n        :raises TypeError: If input is not a number.\n        \"\"\"\n\n    def calculate_tax(self, amount: float) -> float:\n        \"\"\"\n        Calculates the tax based on the provided amount using the configured tax rate.\n\n        :param amount: The amount on which to calculate the tax (must be >= 0.0).\n        :return: The tax as a float.\n        :raises ValueError: If the amount is negative.\n        :raises TypeError: If input is not a number.\n        \"\"\"\n\n    def calculate_total(self, discount: float = 0.0) -> float:\n        \"\"\"\n        Calculates the total cost of the order after applying discount, shipping, and tax.\n\n        This method performs the following steps:\n        1. Calculates the subtotal from all items.\n        2. Applies the given discount.\n        3. Adds shipping cost if necessary.\n        4. Calculates tax on the discounted subtotal + shipping.\n\n        :param discount: Discount rate between 0.0 and 1.0 (e.g. 0.2 = 20%).\n        :return: The final total as a float.\n        :raises ValueError:\n            - If the subtotal is negative.\n            - If the discount is invalid.\n            - If the order is empty.\n        :raises TypeError: If input is not a number.\n        \"\"\"\n\n    def total_items(self) -> int:\n        \"\"\"\n        Returns the total quantity of all items in the order.\n\n        :return: The sum of the quantities of all items.\n        :return:\n        \"\"\"\n\n    def clear_order(self):\n        \"\"\"\n        Removes all items from the order, resetting it to an empty state.\n        \"\"\"\n\n    def list_items(self) -> List[str]:\n        \"\"\"\n        Returns a list of all unique item names currently in the order.\n\n        :return: A list of unique item names (no duplicates).\n        \"\"\"\n\n\tdef is_empty(self) -> bool:\n        \"\"\"\n        Checks whether the order is currently empty.\n\n        :return: True if no items are in the order, False otherwise.\n        \"\"\"\n```"
  }
}