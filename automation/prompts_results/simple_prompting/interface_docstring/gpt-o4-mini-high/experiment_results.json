{
  "model": "gpt-o4-mini-high",
  "strategy": "simple_prompting",
  "context_type": "interface_docstring",
  "timestamp": "2025-07-04T00:51:40.262828",
  "response_time": 29.189396142959595,
  "test_file": "prompts_results\\simple_prompting\\interface_docstring\\gpt-o4-mini-high\\tests.py",
  "raw_results": {
    "response": "python\nKopiuj\nEdytuj\nimport unittest\nfrom order_calculator import OrderCalculator\n\n\nclass TestOrderCalculator(unittest.TestCase):\n\n    # __init__ tests\n    def test_init_default(self):\n        calc = OrderCalculator()\n        self.assertTrue(calc.is_empty())\n\n    def test_init_invalid_tax_rate_type(self):\n        with self.assertRaises(TypeError):\n            OrderCalculator(tax_rate='0.2')\n\n    def test_init_invalid_tax_rate_value_low(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=-0.1)\n\n    def test_init_invalid_tax_rate_value_high(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(tax_rate=1.1)\n\n    def test_init_invalid_free_shipping_threshold(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(free_shipping_threshold=-50.0)\n\n    def test_init_invalid_shipping_cost(self):\n        with self.assertRaises(ValueError):\n            OrderCalculator(shipping_cost=-5.0)\n\n    # add_item tests\n    def test_add_item_typical(self):\n        calc = OrderCalculator()\n        calc.add_item('apple', 1.5, 2)\n        self.assertEqual(calc.get_subtotal(), 3.0)\n\n    def test_add_item_increment_quantity(self):\n        calc = OrderCalculator()\n        calc.add_item('apple', 1.0, 1)\n        calc.add_item('apple', 1.0, 2)\n        self.assertEqual(calc.total_items(), 3)\n\n    def test_add_item_invalid_name_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item(123, 1.0, 1)\n\n    def test_add_item_empty_name(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item('', 1.0, 1)\n\n    def test_add_item_invalid_price_value(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item('apple', 0.0, 1)\n\n    def test_add_item_invalid_quantity_value(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.add_item('apple', 1.0, 0)\n\n    def test_add_item_invalid_quantity_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.add_item('apple', 1.0, '2')\n\n    def test_add_item_same_name_different_price(self):\n        calc = OrderCalculator()\n        calc.add_item('apple', 1.0, 1)\n        with self.assertRaises(ValueError):\n            calc.add_item('apple', 2.0, 1)\n\n    # remove_item tests\n    def test_remove_item_success(self):\n        calc = OrderCalculator()\n        calc.add_item('banana', 2.0, 1)\n        calc.remove_item('banana')\n        self.assertTrue(calc.is_empty())\n\n    def test_remove_item_nonexistent(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.remove_item('orange')\n\n    def test_remove_item_invalid_name_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.remove_item(123)\n\n    # get_subtotal tests\n    def test_get_subtotal_multiple(self):\n        calc = OrderCalculator()\n        calc.add_item('a', 2.0, 2)\n        calc.add_item('b', 3.0, 1)\n        self.assertEqual(calc.get_subtotal(), 7.0)\n\n    def test_get_subtotal_empty(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.get_subtotal()\n\n    # apply_discount tests\n    def test_apply_discount_typical(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(100.0, 0.2), 80.0)\n\n    def test_apply_discount_zero(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(50.0, 0.0), 50.0)\n\n    def test_apply_discount_full(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.apply_discount(50.0, 1.0), 0.0)\n\n    def test_apply_discount_invalid_subtotal(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(-10.0, 0.5)\n\n    def test_apply_discount_invalid_discount_low(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(10.0, -0.1)\n\n    def test_apply_discount_invalid_discount_high(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.apply_discount(10.0, 1.1)\n\n    def test_apply_discount_invalid_subtotal_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.apply_discount('100', 0.2)\n\n    def test_apply_discount_invalid_discount_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.apply_discount(100.0, '0.2')\n\n    # calculate_shipping tests\n    def test_calculate_shipping_free(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_shipping(150.0), 0.0)\n\n    def test_calculate_shipping_cost(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_shipping(50.0), 10.0)\n\n    def test_calculate_shipping_invalid_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_shipping('50')\n\n    # calculate_tax tests\n    def test_calculate_tax_typical(self):\n        calc = OrderCalculator()\n        self.assertAlmostEqual(calc.calculate_tax(100.0), 23.0, places=7)\n\n    def test_calculate_tax_zero(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.calculate_tax(0.0), 0.0)\n\n    def test_calculate_tax_negative(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_tax(-5.0)\n\n    def test_calculate_tax_invalid_type(self):\n        calc = OrderCalculator()\n        with self.assertRaises(TypeError):\n            calc.calculate_tax('100')\n\n    # calculate_total tests\n    def test_calculate_total_no_discount(self):\n        calc = OrderCalculator()\n        calc.add_item('x', 10.0, 1)\n        total = calc.calculate_total()\n        expected = 10.0 + 10.0 + (20.0 * 0.23)  # subtotal + shipping + tax\n        self.assertAlmostEqual(total, expected, places=7)\n\n    def test_calculate_total_with_discount(self):\n        calc = OrderCalculator()\n        calc.add_item('y', 50.0, 1)\n        total = calc.calculate_total(0.5)\n        discounted = 25.0\n        shipping = 10.0\n        tax = (discounted + shipping) * 0.23\n        self.assertAlmostEqual(total, discounted + shipping + tax, places=7)\n\n    def test_calculate_total_empty(self):\n        calc = OrderCalculator()\n        with self.assertRaises(ValueError):\n            calc.calculate_total()\n\n    def test_calculate_total_invalid_discount_type(self):\n        calc = OrderCalculator()\n        calc.add_item('z', 5.0, 1)\n        with self.assertRaises(TypeError):\n            calc.calculate_total('0.1')\n\n    def test_calculate_total_invalid_discount_value(self):\n        calc = OrderCalculator()\n        calc.add_item('z', 5.0, 1)\n        with self.assertRaises(ValueError):\n            calc.calculate_total(1.5)\n\n    # total_items tests\n    def test_total_items_nonempty(self):\n        calc = OrderCalculator()\n        calc.add_item('a', 1.0, 2)\n        calc.add_item('b', 2.0, 3)\n        self.assertEqual(calc.total_items(), 5)\n\n    def test_total_items_empty(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.total_items(), 0)\n\n    # clear_order tests\n    def test_clear_order_clears(self):\n        calc = OrderCalculator()\n        calc.add_item('a', 1.0, 1)\n        calc.clear_order()\n        self.assertTrue(calc.is_empty())\n\n    # list_items tests\n    def test_list_items_nonempty(self):\n        calc = OrderCalculator()\n        calc.add_item('apple', 1.0, 1)\n        calc.add_item('banana', 2.0, 1)\n        self.assertCountEqual(calc.list_items(), ['apple', 'banana'])\n\n    def test_list_items_empty(self):\n        calc = OrderCalculator()\n        self.assertEqual(calc.list_items(), [])\n\n    # is_empty tests\n    def test_is_empty_true(self):\n        calc = OrderCalculator()\n        self.assertTrue(calc.is_empty())\n\n    def test_is_empty_false(self):\n        calc = OrderCalculator()\n        calc.add_item('item', 1.0, 1)\n        self.assertFalse(calc.is_empty())\n\n\nif __name__ == '__main__':\n    unittest.main()",
    "response_time": 29.189396142959595,
    "strategy": "simple_prompting",
    "context_type": "interface_docstring",
    "prompt": "Generate a complete Python unit test suite for the class `OrderCalculator`.\n\nInstructions:\n- Use the `unittest` framework.\n- Include tests for all public methods of the class.\n- Ensure proper coverage of:\n  • typical use cases,\n  • edge cases (corner cases),\n  • incorrect input (invalid types or values),\n  • exceptions.\n- Each test should be clear, minimal and atomic (test one behavior at a time).\n- Avoid comments or explanations — output only the test code.\n- Return a single valid Python file with a class extending `unittest.TestCase`.\n\nBelow is the class interface (without implementation) along with its docstrings:\n\n```python\nfrom typing import TypedDict, List\n\n\nclass Item(TypedDict):\n    \"\"\"\n    Represents a single product entry in the order.\n\n    :key name: The name of the product.\n    :key price: The price per unit of the product.\n    :key quantity: The number of units of the product.\n    \"\"\"\n\nclass OrderCalculator:\n    def __init__(self, tax_rate=0.23, free_shipping_threshold=100.0, shipping_cost=10.0):\n        \"\"\"\n        Initializes a new OrderCalculator instance.\n        Initializes an empty list of items (each represented as a TypedDict 'Item')\n        and stores the configured tax and shipping parameters.\n\n        :param tax_rate: The percentage of tax applied to the final amount, expressed as a float between 0.0 and 1.0 (default is 0.23 for 23%).\n        :param free_shipping_threshold: The minimum order value (after discount) that qualifies for free shipping (default is 100.0).\n        :param shipping_cost: The cost of shipping applied if the order does not meet the free shipping threshold (default is 10.0).\n\n        :raises ValueError:\n            - If tax_rate is not in the range [0.0, 1.0].\n            - If free_shipping_threshold is negative.\n            - If shipping_cost is negative.\n        :raises TypeError: If any parameter is of incorrect type.\n        \"\"\"\n\n    def add_item(self, name: str, price: float, quantity: int = 1):\n        \"\"\"\n        Add an item to the order.\n\n        If an item with the same name and price already exists, its quantity is increased.\n\n        :param name: the name of the item\n        :param price: the price of the item\n        :param quantity: the quantity of the item (default is 1)\n        :raises ValueError: If name is empty, price <= 0, quantity < 1, or item with same name but different price exists.\n        :raises TypeError: If inputs are of incorrect types.\n        \"\"\"\n\n    def remove_item(self, name: str):\n        \"\"\"\n        Removes an item from the order.\n\n        :param name: The name of the item to remove.\n        :raises ValueError: If no item with the given name exists in the order.\n        :raises TypeError: If name is not a string.\n        \"\"\"\n\n    def get_subtotal(self) -> float:\n        \"\"\"\n        Calculates the subtotal (sum of item prices times their quantities) for all items in the order.\n\n        :return: The subtotal as a float.\n        :raises ValueError: If the order is empty.\n        \"\"\"\n\n    def apply_discount(self, subtotal: float, discount: float) -> float:\n        \"\"\"\n        Applies a percentage discount to the given subtotal.\n\n        :param subtotal: the subtotal amount (must be >= 0)\n        :param discount: the discount rate as a float between 0.0 and 1.0 (e.g. 0.2 = 20%).\n        :return: The discounted subtotal.\n        :raises ValueError: If subtotal < 0 or discount is outside the [0.0, 1.0] range.\n        :raises TypeError: If inputs are of incorrect types.\n        \"\"\"\n\n    def calculate_shipping(self, discounted_subtotal: float) -> float:\n        \"\"\"\n        Calculates the shipping cost based on the discounted subtotal.\n\n        If the discounted subtotal >= free shipping threshold shipping is free (0.0).\n        Otherwise, the standard shipping cost is applied.\n\n        :param discounted_subtotal: The subtotal amount after applying discount (must be >= 0.0).\n        :return: The shipping cost as a float (0.0 or self.shipping_cost).\n        :raises TypeError: If input is not a number.\n        \"\"\"\n\n    def calculate_tax(self, amount: float) -> float:\n        \"\"\"\n        Calculates the tax based on the provided amount using the configured tax rate.\n\n        :param amount: The amount on which to calculate the tax (must be >= 0.0).\n        :return: The tax as a float.\n        :raises ValueError: If the amount is negative.\n        :raises TypeError: If input is not a number.\n        \"\"\"\n\n    def calculate_total(self, discount: float = 0.0) -> float:\n        \"\"\"\n        Calculates the total cost of the order after applying discount, shipping, and tax.\n\n        This method performs the following steps:\n        1. Calculates the subtotal from all items.\n        2. Applies the given discount.\n        3. Adds shipping cost if necessary.\n        4. Calculates tax on the discounted subtotal + shipping.\n\n        :param discount: Discount rate between 0.0 and 1.0 (e.g. 0.2 = 20%).\n        :return: The final total as a float.\n        :raises ValueError:\n            - If the subtotal is negative.\n            - If the discount is invalid.\n            - If the order is empty.\n        :raises TypeError: If input is not a number.\n        \"\"\"\n\n    def total_items(self) -> int:\n        \"\"\"\n        Returns the total quantity of all items in the order.\n\n        :return: The sum of the quantities of all items.\n        :return:\n        \"\"\"\n\n    def clear_order(self):\n        \"\"\"\n        Removes all items from the order, resetting it to an empty state.\n        \"\"\"\n\n    def list_items(self) -> List[str]:\n        \"\"\"\n        Returns a list of all unique item names currently in the order.\n\n        :return: A list of unique item names (no duplicates).\n        \"\"\"\n\n\tdef is_empty(self) -> bool:\n        \"\"\"\n        Checks whether the order is currently empty.\n\n        :return: True if no items are in the order, False otherwise.\n        \"\"\"\n```"
  }
}